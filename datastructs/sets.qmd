---
title: "Sets"
toc: true
---

## Sets

A set is a collection of distinct elements that are stored in a way that allows for quick access and retrieval. Sets are commonly used in computer science to store unique elements and perform set operations such as union, intersection, and difference.

Sets are implemented using hash tables in many programming languages, which allows for fast search and retrieval of elements. Sets are useful for removing duplicates from a list, checking for the presence of an element, and performing set operations.

### Sets in Python

In Python, sets are implemented using the `set` data structure, which is a built-in data type that stores unique elements. Sets are unordered collections of elements, and they do not allow duplicate values.

```python
# Create a set
s = set([1, 2, 3, 4, 5])

# Add an element to the set
s.add(6)

# Remove an element from the set
s.remove(3)

# Check if an element is in the set
if 4 in s:
	print("Element found in set")
```

### Set Operations

Sets support a variety of operations, including:

* **Union**: Combines two sets to create a new set containing all unique elements from both sets.

* **Intersection**: Finds the common elements between two sets and creates a new set with those elements.

* **Difference**: Finds the elements that are in one set but not the other and creates a new set with those elements.

* **Subset**: Checks if one set is a subset of another set.

* **Superset**: Checks if one set is a superset of another set.

```python

# Create two sets
s1 = set([1, 2, 3, 4, 5])
s2 = set([4, 5, 6, 7, 8])

# Union of two sets
union_set = s1.union(s2)

# Intersection of two sets
intersection_set = s1.intersection(s2)

# Difference of two sets
difference_set = s1.difference(s2)

# Check if s1 is a subset of s2
is_subset = s1.issubset(s2)

# Check if s1 is a superset of s2
is_superset = s1.issuperset(s2)

```


### Time and Space Complexity

The time complexity of set operations is similar to hash table operations, with an time complexity of O(1) for search, insert, and delete operations. The space complexity of a set is O(n), where n is the number of elements in the set.

Union and intersection operations have a time complexity of O(n) in the worst case, where n is the number of elements in the larger set. The space complexity of set operations depends on the size of the input sets and the implementation of the set data structure.

<!-- ## Problems

Here are some common problems related to arrays and hashing:


<br/>

* ### **Question 1**. [Contains Duplicate](https://leetcode.com/problems/contains-duplicate/description/)

	Easy
	{: .label .label-green }
	
	[Solutions](hashmap(solutions).html)
	{: .label .label-purple }

	Given an integer array nums, return `true` if any value appears **at least twice** in the array, and return false if every element is distinct.

	Try to solve this problem without casting the array to a set.

	```python
	def containsDuplicate(nums):
		pass

	assert containsDuplicate([1,2,3,1]) == True, "Test case 1 failed"
	assert containsDuplicate([1,2,3,4]) == False, "Test case 2 failed"
	assert containsDuplicate([1,1,1,3,3,4,3,2,4,2]) == True, "Test case 3 failed"

	print("All test cases passed")
	```

<br/>

* ### **Question 2**. [Valid Anagram](https://leetcode.com/problems/valid-anagram/)

	Easy
	{: .label .label-green }

	[Solutions](hashmap(solutions).html)
	{: .label .label-purple }

	Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.

	An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

	* Example 1: _Input_: `s = "anagram", t = "nagaram"` _Output_: `true`
	
	* Example 2: _Input_: `s = "rat", t = "car"` _Output_: `false`

	<br/>

	```python
	def isAnagram(s, t):
		pass

	assert isAnagram("anagram", "nagaram") == True, "Test case 1 failed"
	assert isAnagram("rat", "car") == False, "Test case 2 failed"
	assert isAnagram("listen", "silent") == True, "Test case 3 failed"
	assert isAnagram("a", "a") == True, "Test case 4 failed"
	assert isAnagram("a", "ab") == False, "Test case 5 failed"

	print("All test cases passed")
	```

<br/>


* ### **Question 3**. [Two Sum](https://leetcode.com/problems/two-sum/description/) 	

	Easy 
	{: .label .label-green }

	[Solutions](hashmap(solutions).html)
	{: .label .label-purple }
	
	The **Two Sum Problem** is a classic algorithmic problem that asks the following question: given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.

	```python
	def two_sum(nums, target):
		pass

	assert two_sum([2,7,11,15], 9) == [0, 1], "Test case 1 failed"
	assert two_sum([3,2,4], 6) == [1, 2], "Test case 2 failed"
	assert two_sum([3,3], 6) == [0, 1], "Test case 3 failed"
	assert two_sum([0, 2, 4, 5], 5) == [0, 3], "Test case 4 failed"

	print("All test cases passed")
	
	```

<br/>

* ### **Question 4**. [Group Anagrams](https://leetcode.com/problems/group-anagrams/)
	Medium
	{: .label .label-yellow }	

	[Solutions](hashmap(solutions).html)
	{: .label .label-purple }
	
	Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.

	An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

	```python
	def groupAnagrams(strs):
		pass

	assert groupAnagrams(["eat","tea","tan","ate","nat","bat"]) == [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']], "Test case 1 failed"
	assert groupAnagrams([""]) == [[""]], "Test case 2 failed"
	assert groupAnagrams(["a"]) == [["a"]], "Test case 3 failed"

	print("All test cases passed")
	```

* ### **Question 5**. [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/description/)
	Medium
	{: .label .label-yellow }	

	[Solutions](hashmap(solutions).html)
	{: .label .label-purple }
	
	Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.

	```python
	def topKFrequent(nums, k):
		pass

	assert topKFrequent([1,1,1,2,2,3], 2) == [1,2], "Test case 1 failed"
	assert topKFrequent([1], 1) == [1], "Test case 2 failed"
	assert topKFrequent([1,2], 2) == [1,2], "Test case 3 failed"
	assert topKFrequent([1,2,2,3,3,3], 2) == [3,2], "Test case 4 failed"
	

	print("All test cases passed")
	``` 

* ### **Question 6**. [Longest Consecutive Sequence](https://leetcode.com/problems/longest-consecutive-sequence/description/)

	Medium
	{: .label .label-yellow }	

	[Solutions](hashmap(solutions).html)
	{: .label .label-purple }
	
	Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

	You must write an algorithm that runs in O(n) time.

	```python
	def longestConsecutive(nums):
		pass

	assert longestConsecutive([100, 4, 200, 1, 3, 2]) == 4, "Test case 1 failed"
	assert longestConsecutive([0,3,7,2,5,8,4,6,0,1]) == 9, "Test case 2 failed"
	assert longestConsecutive([1,2,0,1]) == 3, "Test case 3 failed"
	assert longestConsecutive([5, 4, 3, 0, 7, 8, 9]) == 3, "Test case 4 failed"

	print("All test cases passed")
	``` -->