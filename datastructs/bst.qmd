---
title: "Binary Search Tree"
toc: true
---

A **binary search tree (BST)** is a binary tree data structure that is used to <u>store data in a sorted order</u>.

The binary search tree must at all times satisfy the binary search tree property:

1. The <u>left subtree of a node</u> contains only nodes with values <u><b>less than or equal to the node's value</b></u>.

2. The <u>right subtree of a node</u> contains only nodes with values <u><b>greater than or equal to the node's value</u></b>.

3. Both the left and right subtrees must themselves be binary search trees>.

As a result of this property, the inorder traversal of a binary search tree will always return the nodes in sorted order.

<center>
<img src="https://media.geeksforgeeks.org/wp-content/uploads/20240418110011/Binary-Search-Tree.webp" style="filter:invert(1);" width="100%">
</center>

<br/><br/>

## Operations on Binary Search Trees

All operations on a binary search tree have a time complexity of O(h), where h is the height of the tree. h is equal to the number of levels in the tree. 

For a balanced binary search tree, the height is O(log n), where n is the number of nodes in the tree.  

For an unbalanced binary search tree, the height is O(n).

### **Search**

Searching for a node in a binary search tree is very similar to searching for a value in a sorted array.

<center><img src="https://www.freelancinggig.com/blog/wp-content/uploads/2019/02/BFS-and-DFS-Algorithms.png" style="filter:invert(1);" width="100%"></center>

#### Depth First Search (DFS)

A traversal algorithm that explores as far as possible along each branch before backtracking.

Depth First Search can be implemented using the following steps: 

* If the tree is empty, return False.

* If the current node is the target node, return True.

* Recursively search the left subtree.

* Recursively search the right subtree.


#### Breadth First Search (BFS)

A traversal algorithm that explores all the nodes at the present depth before moving on to the nodes at the next depth.

Breadth First Search can be implemented using the following steps:

* If the tree is empty, return False.

* Create a queue and add the root node to the queue.

* While the queue is not empty, remove the first node from the queue.

	* If the current node is the target node, return True.

	* Add the left child of the current node to the queue if it exists.

	* Add the right child of the current node to the queue if it exists.

### Insertion

<img align="right" src="https://upload.wikimedia.org/wikipedia/commons/8/83/Binary-search-tree-insertion-animation.gif" style="filter:invert(1);" width="50%">

Adding a new node to the tree follows the following steps:

* If the tree is empty, create a new node and set it as the root of the tree.

* If the tree is not empty

	* Compare the value of the new node with the value of the current node.

	* If the value of the new node is less than the value of the current node, move to the left subtree.

	* If the value of the new node is greater than the value of the current node, move to the right subtree.

	* Repeat steps 2.1 to 2.3 until you reach a leaf node.

	   * Insert the new node as the left child if the value of the new node is less than the value of the leaf node, or as the right child if the value of the new node is greater than the value of the leaf node.

### Deletion


Deletion of a node in a binary search tree involves the following steps:

* If the tree is empty, return the tree.

* If the value of the node to be deleted is less than the value of the current node, move to the left subtree.

* If the value of the node to be deleted is greater than the value of the current node, move to the right subtree.

* If the value of the node to be deleted is equal to the value of the current node, delete the node.

	* If the node has no children, simply delete the node.

	* If the node has one child, replace the node with its child.

	* If the node has two children, find the <u>inorder successor</u> of the node, replace the node with the inorder successor, and delete the inorder successor. 
	
		The <u>inorder successor</u> is the smallest node in the right subtree of the node to be deleted.

<br/>
<center>

Case 1: Node to be deleted has no children
<img src="https://media.geeksforgeeks.org/wp-content/uploads/20230726182925/d1.png" style="filter:invert(1);" width="100%">

Case 2: Node to be deleted has one child
<img src="https://media.geeksforgeeks.org/wp-content/uploads/20231004182120/file.png" style="filter:invert(1);" width="100%">

Case 3: Node to be deleted has two children
<img src="https://media.geeksforgeeks.org/wp-content/uploads/20231006112704/d3.png" style="filter:invert(1);" width="100%">

</center>


### Update 

Updating a node in a binary search tree involves deleting the node and inserting a new node with the updated value.

The time complexity of inserting a node in a binary search tree is O(h), where h is the height of the tree.

The time complexity of deleting a node in a binary search tree is also O(h), where h is the height of the tree.

Therefore, the time complexity of updating a node in a binary search tree is O(h).



<!-- ## Depth First Search -->

<!-- Maximum Depth of Binary Tree
	Solution
	Easy

	Leaf-Similar Trees
	Solution
	Easy

	Count Good Nodes in Binary Tree
	Solution
	Medium

	Path Sum III
	Solution
	Medium

	Longest ZigZag Path in a Binary Tree
	Solution
	Medium

	Lowest Common Ancestor of a Binary Tree
	Solution
	Medium -->

<!-- ## Breadth First Search -->

<!--
	Binary Tree Right Side View
	Solution
	Medium

	Maximum Level Sum of a Binary Tree
	Solution
	Medium
-->

<!-- # Binary Search Tree -->

<!--
	Search in a Binary Search Tree
	Solution
	Easy

	Delete Node in a BST
	Solution
	Medium
-->
