[
  {
    "objectID": "calendar.html",
    "href": "calendar.html",
    "title": "Calendar",
    "section": "",
    "text": "Calendar\n\n\n\n\n\n\nCaution\n\n\n\nPlease note that this is a tentative plan and is subject to change.\n\n\n\n\n\n#\nTOPIC\nREADING\nMEETING 1\nMEETING 2\nWRITTEN ASSIGNMENT\nPROGRAMMING ASSIGNMENT\n\n\n\n\n1\nIntroduction\n\nIntro\nVersion Control\n\nPA 1\n\n\n2\nGit\n\n\n\n\n\n\n\n3\nJava 1\n\n\n\n\n\n\n\n4\nJava 2\n\n\n\n\n\n\n\n\n\n\nEXAM 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nTOPIC\nREADING\nMEETING 1\nMEETING 2\nWRITTEN ASSIGNMENT\nPROGRAMMING ASSIGNMENT\n\n\n\n\n5\nHashmaps\n\n\n\n\n\n\n\n6\nTrees\n\n\n\n\n\n\n\n7\nHeaps\n\n\n\n\n\n\n\n8\nGraphs\n\n\n\n\n\n\n\n\n\n\nEXAM 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nTOPIC\nREADING\nMEETING 1\nMEETING 2\nWRITTEN ASSIGNMENT\nPROGRAMMING ASSIGNMENT\n\n\n\n\n9\nBacktracking\n\n\n\n\n\n\n\n10\nGreedy\n\n\n\n\n\n\n\n11\nDynamic Programming 1\n\n\n\n\n\n\n\n12\nDynamic Programming 2\n\n\n\n\n\n\n\n\n\n\nFINAL EXAM"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever."
  },
  {
    "objectID": "syllabus/textbook.html",
    "href": "syllabus/textbook.html",
    "title": "Textbooks & Other Resources",
    "section": "",
    "text": "Caution\n\n\n\nPlease note that the following textbooks are NOT strictly required for this course, but they are strongly recommended for those who prefer to have a physical reference.",
    "crumbs": [
      "Textbooks & Other Resources"
    ]
  },
  {
    "objectID": "syllabus/textbook.html#other-resources",
    "href": "syllabus/textbook.html#other-resources",
    "title": "Textbooks & Other Resources",
    "section": "Other Resources",
    "text": "Other Resources\n\nVisualization and Animation\n\nVisuAlgo (website)\nSorting Algorithms Animations (website)\nData Structure Visualizations (website)\nSorting Algorithms Visualizations, Cl√©ment Mihailescu (YouTube video)\nSorting Algorithms Visualizations, Mike Bostock (website)\n\n\n\nBooks\n\nComposing Programs by John DeNero (free, open textbook)\nThink Python by Allen B. Downey (free, open textbook)\n\n\n\nVideo Course\n\nAlgorithms and Data Structures Tutorial - Full Course for Beginners, freeCodeCamp.org (YouTube video)\nData Structures and Algorithms in Python - Full Course for Beginners, freeCodeCamp.org (YouTube video)\nAlgorithms by Jeff Erickson (free, open textbook)\n\n\n\nWebsites\n\nData Structures and Algorithms, Geeks for Geeks (website)\nBig-O Cheat Sheet (website)\n\n\n\nProblems for Practice\n\nProject Euler (website)\nLeetCode (website)\nProject Rosalind (website)",
    "crumbs": [
      "Textbooks & Other Resources"
    ]
  },
  {
    "objectID": "syllabus/textbook.html#other-advanced-textbooks",
    "href": "syllabus/textbook.html#other-advanced-textbooks",
    "title": "Textbooks & Other Resources",
    "section": "Other (Advanced) Textbooks",
    "text": "Other (Advanced) Textbooks\n\nAlgorithms by Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani\nStructure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman\nAlgorithm Design Manual by Steven Skiena\nAlgorithm Design by Jon Kleinberg and Eva Tardos",
    "crumbs": [
      "Textbooks & Other Resources"
    ]
  },
  {
    "objectID": "syllabus/mental_health.html",
    "href": "syllabus/mental_health.html",
    "title": "Mental Health Resources",
    "section": "",
    "text": "Empowering and equipping students to manage their mental health and academic success, the Counseling Center‚Äôs stepped care model offers an array of evidence based services.\nThe resources listed below are free, confidential and accessible to all enrolled students. Go to the Counseling Center Website for details.\n\n\nFurman University Counseling Center Mental Health and Crisis Support Line ‚Äì Call the Counseling Center at 864-294-3031, press #3 (confidential, available 24/7/365 from anywhere).\n\n\n\n\nHeadspace ‚Äì a mindfulness app that helps decrease stress and improve focus and mind-wandering, sponsored by SGA and PHOKUS. Students may enroll using their Furman email.\nTAO Connect ‚Äì a self-help platform (anonymous and confidential, 24/7) sponsored by the Counseling Center and accessible to students, faculty and staff. Enroll with a Furman email.\n\n\n\n\n\nPaladin Peer Support is a student peer mentoring organization focused on wellness and self-efficacy. Follow them on Instagram and connect for support in reaching personal well-being goals. ### Skill Building Groups and Workshops\nRotating evidence-based psycho-education and skill building groups for anxiety and emotional regulation ### Consultation and Treatment Services\nStart Strong and Finish Strong Walk-in Clinics (first and last two weeks of every semester)\nBrief individual counseling (in person and online), which may include psychiatric and nutrition consults where clinically indicated.\nSingle Session Consultations\nGroup Counseling and Skill Building Workshops\n\n\n\n\n\n\nThe Office for Spiritual Life provides individual confidential counseling for students, faculty and staff in person and online\nGroups and workshops that are theme-focused and interpersonal\nContact OSL@furman.edu, 864-294-2133, or contact a chaplain directly: vaughn.crowetipton@furman.edu, kate.taber@furman.edu.",
    "crumbs": [
      "Mental Health Resources"
    ]
  },
  {
    "objectID": "syllabus/mental_health.html#the-counseling-center",
    "href": "syllabus/mental_health.html#the-counseling-center",
    "title": "Mental Health Resources",
    "section": "",
    "text": "Empowering and equipping students to manage their mental health and academic success, the Counseling Center‚Äôs stepped care model offers an array of evidence based services.\nThe resources listed below are free, confidential and accessible to all enrolled students. Go to the Counseling Center Website for details.\n\n\nFurman University Counseling Center Mental Health and Crisis Support Line ‚Äì Call the Counseling Center at 864-294-3031, press #3 (confidential, available 24/7/365 from anywhere).\n\n\n\n\nHeadspace ‚Äì a mindfulness app that helps decrease stress and improve focus and mind-wandering, sponsored by SGA and PHOKUS. Students may enroll using their Furman email.\nTAO Connect ‚Äì a self-help platform (anonymous and confidential, 24/7) sponsored by the Counseling Center and accessible to students, faculty and staff. Enroll with a Furman email.\n\n\n\n\n\nPaladin Peer Support is a student peer mentoring organization focused on wellness and self-efficacy. Follow them on Instagram and connect for support in reaching personal well-being goals. ### Skill Building Groups and Workshops\nRotating evidence-based psycho-education and skill building groups for anxiety and emotional regulation ### Consultation and Treatment Services\nStart Strong and Finish Strong Walk-in Clinics (first and last two weeks of every semester)\nBrief individual counseling (in person and online), which may include psychiatric and nutrition consults where clinically indicated.\nSingle Session Consultations\nGroup Counseling and Skill Building Workshops",
    "crumbs": [
      "Mental Health Resources"
    ]
  },
  {
    "objectID": "syllabus/mental_health.html#spiritual-life",
    "href": "syllabus/mental_health.html#spiritual-life",
    "title": "Mental Health Resources",
    "section": "",
    "text": "The Office for Spiritual Life provides individual confidential counseling for students, faculty and staff in person and online\nGroups and workshops that are theme-focused and interpersonal\nContact OSL@furman.edu, 864-294-2133, or contact a chaplain directly: vaughn.crowetipton@furman.edu, kate.taber@furman.edu.",
    "crumbs": [
      "Mental Health Resources"
    ]
  },
  {
    "objectID": "syllabus/appointment.html",
    "href": "syllabus/appointment.html",
    "title": "Appointment",
    "section": "",
    "text": "Appointment\nI don‚Äôt have fixed office hours this semester. Instead, I am using an appointment scheduling system Calendly to make it easier for you to find a time that works for you.\nYou can schedule an appointment with me using using this link\nI also have an Open-door Policy and am generally in my office (Riley Hall 200-D) from 10 AM - 4 PM on most weekdays. You are always welcome to drop by and chat.\nI am also ofcourse available via email."
  },
  {
    "objectID": "syllabus/github.html",
    "href": "syllabus/github.html",
    "title": "Github Classroom",
    "section": "",
    "text": "Link to CSC-223 Github Classroom"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC-223: Advanced Data Structures and Software Development (Fall 2024)",
    "section": "",
    "text": "Hi! Welcome to the CSC-223 Advanced Data Structures & Software Development course website üëãüèæ\nI am excited to talk code üíª, algorithms üîÑ üîÄ and software engineering üìä in this course with you!\nFrom the navigation bar on the top ‚òùüèæ and sidebar on the left üëàüèæ, you should be able to navigate to any topic relevant to the course. If that does not help, there should also be a search icon üîç in the top left corner ‚ÜóÔ∏è\nüëáüèæ Below, you can find important links and important announcements.\n\n\n\n\n\n\nDeliverable\n\n\n\nProgramming Assignment 1 is due on Sept 3rd, 2024 11:59 PM.\n\n\n\n\n\n\n\n\nOpen-Door Policy\n\n\n\nI have an Open-Door Policy and am in my office (Riley Hall 200-D) between 9 AM - 5 PM most weekdays. Please drop by with your questions or just to say hi!\nAlternatively, send me an email or schedule an appointment",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "basics/controls/controls.html",
    "href": "basics/controls/controls.html",
    "title": "Control Flow",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow"
    ]
  },
  {
    "objectID": "basics/controls/controls.html#flow-directionality-of-execution",
    "href": "basics/controls/controls.html#flow-directionality-of-execution",
    "title": "Control Flow",
    "section": "Flow / Directionality of Execution",
    "text": "Flow / Directionality of Execution\n\nPrograms (multiple lines of code) run each line of code sequentially top to bottom\nStatements (single line of code) run right to left\n\nExpression on right hand side of assignment/boolean operator is executed first\nThen, left hand expression of assignment operator is executed\n\nExpressions ( &lt; 1 line of code) run as per rules of precedence; for operators of equal precedence, expressions run left to right.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow"
    ]
  },
  {
    "objectID": "basics/operations/file_io.html",
    "href": "basics/operations/file_io.html",
    "title": "Files",
    "section": "",
    "text": "Standard IO is the default IO for a program. It is the IO that is used when no other IO is specified.\nStandard Input is the default input for a program. It is the input that is used when no other input is specified. In most cases, Standard Input is the keyboard.\nStandard Output is the default output for a program. It is the output that is used when no other output is specified. In most cases, Standard Output is the screen.\nStandard Error is the default error output for a program. It is the error output that is used when no other error output is specified. In most cases, Standard Error is the screen.\nIn Python, Standard Input is represented by the stdin object, Standard Output is represented by the stdout object, and Standard Error is represented by the stderr object.\nTo use Standard Input, Standard Output, or Standard Error, you must import the sys module.\nimport sys\nYou can redirect Standard Input, Standard Output, and Standard Error to a file or another program by using the &lt;, &gt;, and | operators. For example, to redirect Standard Input to a file, you would use the &lt; operator.\npython3 my_program.py &lt; input.txt\nTo redirect Standard Output to a file, you would use the &gt; operator.\npython3 my_program.py &gt; output.txt\nTo redirect Standard Error to a file, you would use the 2&gt; operator.\npython3 my_program.py 2&gt; error.txt\n\n\nThe input function is used to get input from the user. It takes one argument, a string, which is the prompt that is displayed to the user. The input function returns a string.\nname = input(\"What is your name? \")\n\n\n\nThe print function is used to display output to the user. It takes one or more arguments, which are the values to be displayed. The print function returns None.\nprint(\"Hello, World!\")\n\n\n\n\n\n\n\nWhile a program is running, its data is stored in Random Access Memory (RAM).\nRAM is Fast and Inexpensive, but it is also Volatile\n\nVolatile memory means that when the program ends, or the computer shuts down, data in RAM disappears.\n\nTo make data available the next time you turn on your computer and start your program, you have to write it to a Non-volatile Storage medium, such as the Hard Drive. \n\nData on non-volatile Storage media is stored in named locations on the media called Files.\nBy reading and writing data to files, programs can save information between program runs.\nWorking with files is a lot like working with a Jupyter notebook.\n\nTo use a notebook, you have to open it.\nWhen you‚Äôre done, you have to close it.\nWhile the notebook is open, you can either write in it or read from it. \n\n\n\n\n\n\n\nThe key function for working with files in Python is the open() function.\nThe open() function takes two parameters:\n\nfilename (required)\nmode (optional, default value: \"r\")\n\n\n\nf = open(\"words.txt\") \n\n\n\nThere are four primary methods modes for opening a file:\n\n‚Äúr‚Äù - Read - Default value. Opens a file for reading\n\nerror if the file does not exist\n\n‚Äúa‚Äù - Append - Opens a file for appending\n\ncreates the file if it does not exist\n\n‚Äúw‚Äù - Write - Opens a file for writing\n\ncreates the file if it does not exist\n\n‚Äúx‚Äù - Create - Creates the specified file\n\nreturns an error if the file exists\n\n\n\n\n\n\n\nTo open a file for reading it is enough to specify the name of the file:\n\nf = open(\"countries.txt\")\n\n\nThe code above is the same as:\n\n\nf = open(\"countries.txt\", \"r\")\n\n\nBecause \"r\" for read is the default value for the second input (mode), you do not need to specify it.\nMake sure the file exists, or else you will get a FileNotFoundError error.\n\n\n\n\n\n\nTo open the file, use the built-in open() function.\nThe open() function returns a file object\nFile objects have a read() method for reading the content of the file:\n\n\nf = open(\"countries.txt\", \"r\")\ncontent = f.read()\nprint(content)\n\n\n\nIf you try to read a file that does not exist, you will get a FileNotFoundError\nIf the file is located in a different location, you will have to specify the file path, like this:\n\n\nf = open(\"countries.txt\")\n\n\n#Open a file on a different location:\n\nf = open(\"/Users/fsultan/Downloads/csc121/notebooks/countries.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nFile extensions have to be explicitly specified in the file name, when opening an existing file\n\n\nf = open('countries.txt')\nprint(f.read())\nf.close()\n\n\n\n\n\n\nIt is often not feasible to read large files with simply read\nThis is often because:\n\nThe size of the file can exceed the capacity of RAM\nThe software may have a limit on how much data it can read\n\nTo avoid the software/app from crashing\n\n\n\n\nf = open(\"words.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nBy default the read() method returns the whole text\nHowever, read() takes an input, which lets you specify how many characters to read:\n\n\n# Example\n# Return the first 20 characters of the file:\n\nf = open(\"words.txt\", \"r\")\nprint(f.read(20))\n\n\n\n\n\n\nYou can return one line by using the readline() method:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nprint(line)\n\n\nBy calling readline() two times, you can read the two first lines:\n\n\n# Read two lines of the file \n\nf = open(\"words.txt\", \"r\")\n\nline1 = f.readline()\n\nline2 = f.readline()\n\nline3 = f.readline()\n\nprint(\"Line 1:\", line1)\nprint(\"Line 2:\", line2)\nprint(\"Line 3:\", line3)\n\n\n\n\n\n\nBy looping through the lines of the file, you can read the whole file, line by line:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    line = f.readline()\n    print(line)\nf.close()\n\n\n\n\n\n\nSince contents (lines) of a file are a sequence, we can loop over lines using a for loop with line as a target variable:\n\n\nf = open(\"countries.txt\", \"r\")\nfor line in f:\n    print(line)\n\n\nf = open(\"countries.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    print(line)\n    line = f.readline()\n\n\n\n\n\n\nIt is a strongly recommended to close the file when you are done with it.\nThis clears up memory consumed by contents of the file.\nFile object cannot be used to read, write or append after it has been closed.\n\n\nf = open(\"countries.txt\", \"r\")\nprint(f.readline())\nf.close()\n\nf.readline()\n\n\n\n\n\n\nopen(filename,\"w\") mode ‚Äúw‚Äù - Write - allows writing to a file with name filename\nIf a file with name filename already exists, it overwrites any existing content.\n\nIn other words, existing content gets deleted and new content is added.\n\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Now the newfile.txt exists and this is it's content!\")\nf.close()\n\n\n\n\n\n\nWhen writing to a file, do not forget the newlines: \\n\nWithout newlines \\n, all content would be written to the same line\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Line1\")\nf.write(\"Line2\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"r\")\nprint(f.read())\nf.close()\n\n\n\n\n\n\nopen(filename,\"a\") mode ‚Äúa‚Äù - Append - allows appending to the end of a file with name filename\nIf a file with name filename already exists, it adds new content to the end of the file.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"countries.txt\", \"a\")\nf.write(\"Wakanda\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"a\")\nf.write(\"testing\")\nf.close()\n\n\n\n\n\n\n\nopen(filename,\"x\") mode ‚Äúx‚Äù - eXclusive creation- allows creating a new file with name filename\n\nOnly if a file with that name does not exist\n\nIf a file with name filename already exists, it throws a FileExistsError.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"x\")\nf.write(\"This is a brand new file\")\nf.close()\n\n\n\n\n\n\nIf a file is opened in write mode, you can not read from it\nIf a file is opened in read mode, you can not write to it\n\n\n\n\n\nQuestion 1. Count lines\nWrite a function count_lines that accepts as input a string filename and returns the number of lines in that file\n\ndef count_lines(filename):\n    \n\nprint(count_lines(\"words.txt\"))\nprint(count_lines(\"countries.txt\"))\n\nQuestion 2. Print lines ending with suffix\nWrite a function search_lines that accepts as inputs a string filename and a string suffix and prints all lines that end with suffix\n\ndef search_lines(filename, suffix):\n\n\nsearch_lines(\"countries.txt\", \"land\")\n\nQuestion 3. Write Left Triangle\nWrite a function left_triangle that accepts two inputs: 1. a string variable filename 2. an integer n. The function creates a file named filename and writes to the file a left triangle of height n.\nFor example, filename=\"abc.txt\" and n=5 prints the following:\n*\n**\n***\n****\n*****\nto a file named abc.txt\n\ndef left_triangle(filename, n):\n    \n    return\n\nleft_triangle('t4.txt',  4)\nleft_triangle('t10.txt', 10)\n\n\nQuestion 4. Copy File\nWrite a function copy_file that takes two string inputs: 1. oldfile 2. newfile and copies all the contents of oldfile to newfile.\n\ndef copy_file(oldfile, newfile):\n    \n    return",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Files"
    ]
  },
  {
    "objectID": "basics/operations/file_io.html#standard-io",
    "href": "basics/operations/file_io.html#standard-io",
    "title": "Files",
    "section": "",
    "text": "Standard IO is the default IO for a program. It is the IO that is used when no other IO is specified.\nStandard Input is the default input for a program. It is the input that is used when no other input is specified. In most cases, Standard Input is the keyboard.\nStandard Output is the default output for a program. It is the output that is used when no other output is specified. In most cases, Standard Output is the screen.\nStandard Error is the default error output for a program. It is the error output that is used when no other error output is specified. In most cases, Standard Error is the screen.\nIn Python, Standard Input is represented by the stdin object, Standard Output is represented by the stdout object, and Standard Error is represented by the stderr object.\nTo use Standard Input, Standard Output, or Standard Error, you must import the sys module.\nimport sys\nYou can redirect Standard Input, Standard Output, and Standard Error to a file or another program by using the &lt;, &gt;, and | operators. For example, to redirect Standard Input to a file, you would use the &lt; operator.\npython3 my_program.py &lt; input.txt\nTo redirect Standard Output to a file, you would use the &gt; operator.\npython3 my_program.py &gt; output.txt\nTo redirect Standard Error to a file, you would use the 2&gt; operator.\npython3 my_program.py 2&gt; error.txt\n\n\nThe input function is used to get input from the user. It takes one argument, a string, which is the prompt that is displayed to the user. The input function returns a string.\nname = input(\"What is your name? \")\n\n\n\nThe print function is used to display output to the user. It takes one or more arguments, which are the values to be displayed. The print function returns None.\nprint(\"Hello, World!\")",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Files"
    ]
  },
  {
    "objectID": "basics/operations/file_io.html#file-io",
    "href": "basics/operations/file_io.html#file-io",
    "title": "Files",
    "section": "",
    "text": "While a program is running, its data is stored in Random Access Memory (RAM).\nRAM is Fast and Inexpensive, but it is also Volatile\n\nVolatile memory means that when the program ends, or the computer shuts down, data in RAM disappears.\n\nTo make data available the next time you turn on your computer and start your program, you have to write it to a Non-volatile Storage medium, such as the Hard Drive. \n\nData on non-volatile Storage media is stored in named locations on the media called Files.\nBy reading and writing data to files, programs can save information between program runs.\nWorking with files is a lot like working with a Jupyter notebook.\n\nTo use a notebook, you have to open it.\nWhen you‚Äôre done, you have to close it.\nWhile the notebook is open, you can either write in it or read from it. \n\n\n\n\n\n\n\nThe key function for working with files in Python is the open() function.\nThe open() function takes two parameters:\n\nfilename (required)\nmode (optional, default value: \"r\")\n\n\n\nf = open(\"words.txt\") \n\n\n\nThere are four primary methods modes for opening a file:\n\n‚Äúr‚Äù - Read - Default value. Opens a file for reading\n\nerror if the file does not exist\n\n‚Äúa‚Äù - Append - Opens a file for appending\n\ncreates the file if it does not exist\n\n‚Äúw‚Äù - Write - Opens a file for writing\n\ncreates the file if it does not exist\n\n‚Äúx‚Äù - Create - Creates the specified file\n\nreturns an error if the file exists\n\n\n\n\n\n\n\nTo open a file for reading it is enough to specify the name of the file:\n\nf = open(\"countries.txt\")\n\n\nThe code above is the same as:\n\n\nf = open(\"countries.txt\", \"r\")\n\n\nBecause \"r\" for read is the default value for the second input (mode), you do not need to specify it.\nMake sure the file exists, or else you will get a FileNotFoundError error.\n\n\n\n\n\n\nTo open the file, use the built-in open() function.\nThe open() function returns a file object\nFile objects have a read() method for reading the content of the file:\n\n\nf = open(\"countries.txt\", \"r\")\ncontent = f.read()\nprint(content)\n\n\n\nIf you try to read a file that does not exist, you will get a FileNotFoundError\nIf the file is located in a different location, you will have to specify the file path, like this:\n\n\nf = open(\"countries.txt\")\n\n\n#Open a file on a different location:\n\nf = open(\"/Users/fsultan/Downloads/csc121/notebooks/countries.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nFile extensions have to be explicitly specified in the file name, when opening an existing file\n\n\nf = open('countries.txt')\nprint(f.read())\nf.close()\n\n\n\n\n\n\nIt is often not feasible to read large files with simply read\nThis is often because:\n\nThe size of the file can exceed the capacity of RAM\nThe software may have a limit on how much data it can read\n\nTo avoid the software/app from crashing\n\n\n\n\nf = open(\"words.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nBy default the read() method returns the whole text\nHowever, read() takes an input, which lets you specify how many characters to read:\n\n\n# Example\n# Return the first 20 characters of the file:\n\nf = open(\"words.txt\", \"r\")\nprint(f.read(20))\n\n\n\n\n\n\nYou can return one line by using the readline() method:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nprint(line)\n\n\nBy calling readline() two times, you can read the two first lines:\n\n\n# Read two lines of the file \n\nf = open(\"words.txt\", \"r\")\n\nline1 = f.readline()\n\nline2 = f.readline()\n\nline3 = f.readline()\n\nprint(\"Line 1:\", line1)\nprint(\"Line 2:\", line2)\nprint(\"Line 3:\", line3)\n\n\n\n\n\n\nBy looping through the lines of the file, you can read the whole file, line by line:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    line = f.readline()\n    print(line)\nf.close()\n\n\n\n\n\n\nSince contents (lines) of a file are a sequence, we can loop over lines using a for loop with line as a target variable:\n\n\nf = open(\"countries.txt\", \"r\")\nfor line in f:\n    print(line)\n\n\nf = open(\"countries.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    print(line)\n    line = f.readline()\n\n\n\n\n\n\nIt is a strongly recommended to close the file when you are done with it.\nThis clears up memory consumed by contents of the file.\nFile object cannot be used to read, write or append after it has been closed.\n\n\nf = open(\"countries.txt\", \"r\")\nprint(f.readline())\nf.close()\n\nf.readline()\n\n\n\n\n\n\nopen(filename,\"w\") mode ‚Äúw‚Äù - Write - allows writing to a file with name filename\nIf a file with name filename already exists, it overwrites any existing content.\n\nIn other words, existing content gets deleted and new content is added.\n\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Now the newfile.txt exists and this is it's content!\")\nf.close()\n\n\n\n\n\n\nWhen writing to a file, do not forget the newlines: \\n\nWithout newlines \\n, all content would be written to the same line\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Line1\")\nf.write(\"Line2\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"r\")\nprint(f.read())\nf.close()\n\n\n\n\n\n\nopen(filename,\"a\") mode ‚Äúa‚Äù - Append - allows appending to the end of a file with name filename\nIf a file with name filename already exists, it adds new content to the end of the file.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"countries.txt\", \"a\")\nf.write(\"Wakanda\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"a\")\nf.write(\"testing\")\nf.close()\n\n\n\n\n\n\n\nopen(filename,\"x\") mode ‚Äúx‚Äù - eXclusive creation- allows creating a new file with name filename\n\nOnly if a file with that name does not exist\n\nIf a file with name filename already exists, it throws a FileExistsError.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"x\")\nf.write(\"This is a brand new file\")\nf.close()\n\n\n\n\n\n\nIf a file is opened in write mode, you can not read from it\nIf a file is opened in read mode, you can not write to it\n\n\n\n\n\nQuestion 1. Count lines\nWrite a function count_lines that accepts as input a string filename and returns the number of lines in that file\n\ndef count_lines(filename):\n    \n\nprint(count_lines(\"words.txt\"))\nprint(count_lines(\"countries.txt\"))\n\nQuestion 2. Print lines ending with suffix\nWrite a function search_lines that accepts as inputs a string filename and a string suffix and prints all lines that end with suffix\n\ndef search_lines(filename, suffix):\n\n\nsearch_lines(\"countries.txt\", \"land\")\n\nQuestion 3. Write Left Triangle\nWrite a function left_triangle that accepts two inputs: 1. a string variable filename 2. an integer n. The function creates a file named filename and writes to the file a left triangle of height n.\nFor example, filename=\"abc.txt\" and n=5 prints the following:\n*\n**\n***\n****\n*****\nto a file named abc.txt\n\ndef left_triangle(filename, n):\n    \n    return\n\nleft_triangle('t4.txt',  4)\nleft_triangle('t10.txt', 10)\n\n\nQuestion 4. Copy File\nWrite a function copy_file that takes two string inputs: 1. oldfile 2. newfile and copies all the contents of oldfile to newfile.\n\ndef copy_file(oldfile, newfile):\n    \n    return",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Files"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html",
    "href": "basics/operations/math_operators.html",
    "title": "Mathematical Operators",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#arithmetic-operators",
    "href": "basics/operations/math_operators.html#arithmetic-operators",
    "title": "Mathematical Operators",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\nThe following table lists the arithmetic operators in Python. The first four operators are the basic arithmetic operators. The last two operators are the floor division and modulo operators, respectively.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n+\nAddition\n1 + 2\n3\n\n\n-\nSubtraction\n1 - 2\n-1\n\n\n*\nMultiplication\n1 * 2\n2\n\n\n/\nDivision\n1 / 2\n0.5\n\n\n//\nFloor Division\n1 // 2\n0\n\n\n%\nModulo\n1 % 2\n1",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#boolean-operators",
    "href": "basics/operations/math_operators.html#boolean-operators",
    "title": "Mathematical Operators",
    "section": "Boolean Operators",
    "text": "Boolean Operators\nThese operators return True or False (i.e.¬†boolean data type).\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample.\n\n\n\n\n==\nReturns True if left hand operand is equal to right hand operand. Otherwise, returns False\na+b == b+a\n\n\n!=\nReturns True if left hand operand is NOT equal to right hand operand. Otherwise, returns False.\na*b != b/a\n\n\n&lt;\nReturns True if left hand operand is less than right hand operand. Otherwise, returns False.\nb/a &lt; b\n\n\n&gt;\nReturns True if left hand operand is greater than right hand operand. Otherwise, returns False.\na*b &gt; b\n\n\n&lt;=\nReturns True if left hand operand is less than or equal to right hand operand. Otherwise, returns False.\na-b &lt;= a\n\n\n&gt;=\nReturns True if left hand operand is greater than or equal to right hand operand. Otherwise, returns False.\na*b &gt;= b*a\n\n\n\n\na = 2\nb = 10\n\n\na+b == b+a\n\n\na+b != a*b\n\n\na**2 == a*2\n\n\na+b &lt; a+b\n\n\na+b &lt;= a+b\n\n\nComparison Operators\nThe following table lists the comparison operators in Python. These operators compare two operands and evaluate to either True or False.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n==\nEqual To\n1 == 2\nFalse\n\n\n!=\nNot Equal To\n1 != 2\nTrue\n\n\n&gt;\nGreater Than\n1 &gt; 2\nFalse\n\n\n&gt;=\nGreater Than or Equal To\n1 &gt;= 2\nFalse\n\n\n&lt;\nLess Than\n1 &lt; 2\nTrue\n\n\n&lt;=\nLess Than or Equal To\n1 &lt;= 2\nTrue\n\n\n\n\n\nLogical Operators\nThe following table lists the logical operators in Python. These operators combine two or more boolean expressions and evaluate to either True or False.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\nand\nLogical AND\nTrue and False\nFalse\n\n\nor\nLogical OR\nTrue or False\nTrue\n\n\nnot\nLogical NOT\nnot True\nFalse\n\n\n\n\n\nIdentity Operators\nThe following table lists the identity operators in Python. These operators compare the memory addresses of two operands and evaluate to either True or False.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\nis\nIdentity\n1 is 1\nTrue\n\n\nis not\nNon-Identity\n1 is not 1\nFalse\n\n\n\n\n\nMembership Operators\nThe following table lists the membership operators in Python. These operators evaluate to either True or False depending on whether a value is a member of a sequence.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\nin\nMembership\n1 in [1, 2, 3]\nTrue\n\n\nnot in\nNon-Membership\n1 not in [1, 2, 3]\nFalse",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#assignment-operators",
    "href": "basics/operations/math_operators.html#assignment-operators",
    "title": "Mathematical Operators",
    "section": "Assignment Operators",
    "text": "Assignment Operators\nWe have already seen the assignment operator = in the previous sections.\nThe assignment operator has many variations that combine assignment with another operator (primarily arithmetic operators).\nThe following table lists the assignment operators in Python. These operators assign a value to a variable.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n=\nAssignment\nx = 1\n1\n\n\n+=\nAddition Assignment\nx += 1\n2\n\n\n-=\nSubtraction Assignment\nx -= 1\n1\n\n\n*=\nMultiplication Assignment\nx *= 2\n2\n\n\n/=\nDivision Assignment\nx /= 2\n1\n\n\n//=\nFloor Division Assignment\nx //= 2\n0\n\n\n%=\nModulo Assignment\nx %= 2\n1\n\n\n&=\nBitwise AND Assignment\nx &= 0b101\n0b101",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#bitwise-operators",
    "href": "basics/operations/math_operators.html#bitwise-operators",
    "title": "Mathematical Operators",
    "section": "Bitwise Operators",
    "text": "Bitwise Operators\nThe following table lists the bitwise operators in Python. These operators combine two or more bit patterns and evaluate to a new bit pattern.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n&\nBitwise AND\n0b101 & 0b110\n0b100\n\n\n\\|\nBitwise OR\n0b101 \\| 0b110\n0b111\n\n\n^\nBitwise XOR\n0b101 ^ 0b110\n0b011\n\n\n~\nBitwise NOT\n~0b101\n0b010\n\n\n&lt;&lt;\nBitwise Left Shift\n0b101 &lt;&lt; 1\n0b1010\n\n\n&gt;&gt;\nBitwise Right Shift\n0b101 &gt;&gt; 1\n0b10",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#glossary",
    "href": "basics/operations/math_operators.html#glossary",
    "title": "Mathematical Operators",
    "section": "Glossary",
    "text": "Glossary\n\narithmetic operator\n    An operator that performs a mathematical operation on two operands.\n\nassignment operator\n    An operator that assigns a value to a variable.\n\nbitwise operator\n    An operator that performs a bitwise operation on two or more bit patterns.\n\nboolean operator\n    An operator that returns a boolean value.\n\ncomparison operator\n    An operator that compares two operands and evaluates to either `True` or `False`.\n\nfloor division\n    An operator that performs integer division and returns the floor of the result.\n\nidentity operator\n    An operator that compares the memory addresses of two operands and evaluates to either `True` or `False`.\n\nlogical operator\n    An operator that combines two or more boolean expressions and evaluates to either `True` or `False`.\n\nmodulo\n    An operator that performs integer division and returns the remainder of the result.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#exercise",
    "href": "basics/operations/math_operators.html#exercise",
    "title": "Mathematical Operators",
    "section": "Exercise",
    "text": "Exercise\n\nWhat is the result of the following expression?\n\n\n\n\n\nExpression\nResult\n\n\n\n\ni.\n1 + 2 * 3\n\n\n\nii.\n(1 + 2) * 3\n\n\n\niii.\n1 + 2 * 3 - 4 / 5\n\n\n\niv.\n1 + 2 * (3 - 4) / 5\n\n\n\nv.\n1 + 2 * 3 - 4 / 5 ** 6\n\n\n\nvi.\n1 + 2 * 3 - 4 / 5 ** 6 % 7\n\n\n\nvii.\n1 + 2 * 3 - 4 / 5 ** 6 % 7 // 8",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/java.html",
    "href": "basics/java.html",
    "title": "PROGRAMMING, IN JAVA",
    "section": "",
    "text": "Data (values and variables) are to code what nouns are to prose.\nOperations (arithmetic, logical, relational) are the verbs.\nControl flow (if-else, loops) are the plot.\nAbstractions (functions, classes) are metaphors.\n\nProgramming in Java is different from programming in Python primarily because:\n\nJava is a statically typed language.\nEvery Java program must have a main method.\nJava is a compiled language, where Python is an interpreted language.\nWhile Pythn is also object-oriented, Java is more strictly object-oriented.\n\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA"
    ]
  },
  {
    "objectID": "se/interview.html",
    "href": "se/interview.html",
    "title": "Technical Interviews",
    "section": "",
    "text": "Technical Interviews are a common part of the hiring process for software engineers. They are used to assess a candidate‚Äôs technical knowledge, problem-solving skills, and ability to work under pressure. Many companies use multiple rounds of technical interviews to evaluate candidates, and the questions asked can cover a wide range of topics, including data structures, algorithms, and system design.\nThe hiring process at a typical tech company might include a phone screen, a coding challenge, and multiple rounds of technical interviews. The technical interviews are usually conducted by engineers at the company, and they can be conducted in person or remotely. During the interview, the candidate is asked to solve coding problems on a whiteboard or a computer, and they are expected to explain their thought process as they work through the problem.\nTechnical interviews are generally about an hour long and involve solving one or two coding problems. At the end of the interview, the candidate is usually given the opportunity to ask questions about the company or the role.\nMost technical interviews focus on problem-solving skills and algorithmic thinking. Candidates are expected to be able to write clean, efficient code and to explain their solutions clearly. In addition to coding problems, technical interviews may also include questions about system design, object-oriented design, and other technical topics.\nThe following video shows a mock technical interview that you can watch to get a sense of what to expect in a technical interview:",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Technical Interviews"
    ]
  },
  {
    "objectID": "se/interview.html#leetcode",
    "href": "se/interview.html#leetcode",
    "title": "Technical Interviews",
    "section": "LeetCode",
    "text": "LeetCode\nLeetCode is a popular platform for practicing coding interview questions, and many candidates use it to prepare for technical interviews. The problems on LeetCode cover a wide range of topics and difficulty levels, making it a valuable resource for interview preparation.\nLeetCode premium allows simulating interviews with questions from specific companies like Google, Facebook, Amazon, and Microsoft. It also provides video solutions and additional features to help you prepare for technical interviews.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Technical Interviews"
    ]
  },
  {
    "objectID": "se/interview.html#neetcode",
    "href": "se/interview.html#neetcode",
    "title": "Technical Interviews",
    "section": "Neetcode",
    "text": "Neetcode\nThe incredible breadth of problems on LeetCode can be overwhelming for beginners. You might want to consider starting with a smaller curated list of 75 problems called the ‚ÄúBlind 75‚Äù. This is a very popular tech insider shortlist of commonly asked interview questions. The best place to start with Blind 75, in my opinion, is NeetCode. The roadmap on the website is a great way to sequentially work through categories of problems. Moreover, each problem has an accompanying youtube video that does a great job at explaining the problem and the solution.\nCompetitive Programming: If you enjoyed the competitive programming aspect of the course, I would first recommend marking your calendar with The Thirty-First Annual CCSE: Southeastern Programming Contest is scheduled for 10 a.m.-1 p.m. on Saturday, November 2, 2024 in Riley Hall at Furman University. I honestly believe that we can beat Bob Jones and win the competition this year! The problems from past years are here. You should continue practicing these on your own with a stopwatch running (optionally with the Eye of the Tiger playing in the background).",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Technical Interviews"
    ]
  },
  {
    "objectID": "se/interview.html#hiring-process",
    "href": "se/interview.html#hiring-process",
    "title": "Technical Interviews",
    "section": "Hiring Process",
    "text": "Hiring Process\nHiring process at FAANG (Facebook, Amazon, Apple, Netflix, Google) companies is explained here and Interviewing.io has a blog that provides insights into the technical interview process. For instance, this link gives a pretty good overview of the hiring process at big tech companies. The processes are also broken down by company, for example, Google.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Technical Interviews"
    ]
  },
  {
    "objectID": "se/shell.html",
    "href": "se/shell.html",
    "title": "Shell (sh)",
    "section": "",
    "text": "Shell is a program that takes commands from the keyboard and gives them to the operating system to perform.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/shell.html#preliminaries",
    "href": "se/shell.html#preliminaries",
    "title": "Shell (sh)",
    "section": "0. Preliminaries",
    "text": "0. Preliminaries\n\n0.1. File Structure\nFile structure is a way of organizing files and directories in a computer. Most operating systems use a hierarchical file system.\n\n\n\n\n\n0.2. File Path\nFile path is the location of a file or folder in a directory structure. An example of a file is C:\\Users\\Documents\\file.txt.\n\n\n\n\n\n\nTip\n\n\n\nNote that Unix based systems (e.g.¬†MacOS, Linux etc.) use / whereas Windows uses \\ as the path separator.\n\n\nThe file path is made up of the drive name (e.g.¬†C:\\), the folders (e.g.¬†Users\\), and the file name (e.g.¬†Documents\\file.txt).",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/shell.html#launch-command-line-interface",
    "href": "se/shell.html#launch-command-line-interface",
    "title": "Shell (sh)",
    "section": "1. Launch Command Line Interface",
    "text": "1. Launch Command Line Interface\n\nMacOSWindows\n\n\n\nPress Command + Space to open Spotlight Search.\nType terminal and press Enter.\n\n\n\n\n\nPress Win + R to open the Run dialog box.\nType cmd and press Enter.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/shell.html#where-am-i",
    "href": "se/shell.html#where-am-i",
    "title": "Shell (sh)",
    "section": "2. Where Am I?",
    "text": "2. Where Am I?\n\nMacWindows\n\n\npwd command is used to print the current working directory.\n\n\ncd command, without any parameters, is used to print the current working directory.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/shell.html#whats-in-here",
    "href": "se/shell.html#whats-in-here",
    "title": "Shell (sh)",
    "section": "3. What‚Äôs in Here?",
    "text": "3. What‚Äôs in Here?\n\nMacWindows\n\n\nls [OPTION]... [FILE]...\nls command is used to list the files and directories in the current working directory.\nls -lt command is used to list the files and directories in the current working directory in long listing format and sorted by time modified.\n\n\ndir command is used to list the files and directories in the current working directory.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/shell.html#lets-go",
    "href": "se/shell.html#lets-go",
    "title": "Shell (sh)",
    "section": "4. Let‚Äôs Go!",
    "text": "4. Let‚Äôs Go!\nThe following can be used to jump to locations: cd &lt;location you want to move to&gt; (Change Directory)\nSome common shortcuts:\n\n~: Home Directory\n.: Current Directory\n..: Parent Directory\n/: Root Directory",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/shell.html#lets-create-a-folder",
    "href": "se/shell.html#lets-create-a-folder",
    "title": "Shell (sh)",
    "section": "5. Let‚Äôs create a folder",
    "text": "5. Let‚Äôs create a folder\nA folder can be created using mkdir &lt;folder name&gt;",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Shell (sh)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html",
    "href": "se/version_control/git_colab.html",
    "title": "Git (Team)",
    "section": "",
    "text": "When working in a team, it is important to have a good version control system. Git is a popular version control system that allows you to keep track of changes to your code and collaborate with others. In this guide, we will cover some of the basics of using Git in a team setting.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html#git-fetch",
    "href": "se/version_control/git_colab.html#git-fetch",
    "title": "Git (Team)",
    "section": "git fetch",
    "text": "git fetch\nThe git fetch command is used to download changes from a remote repository. It will download any new branches or changes that have been made since the last time you fetched.\n$ git fetch\nThese changes will be downloaded to your local repository, but they will not be merged into your working directory. To merge the changes into your working directory, you can use the git merge command.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html#git-merge",
    "href": "se/version_control/git_colab.html#git-merge",
    "title": "Git (Team)",
    "section": "git merge",
    "text": "git merge\nThe git merge command is used to merge changes from one branch into another. It will take the changes from the specified branch and apply them to the current branch.\n$ git merge &lt;branch name&gt;\nIf there are any conflicts between the two branches, Git will prompt you to resolve them before completing the merge.\nThere are two ways to resolve conflicts: manually editing the conflicted files or using a merge tool. Some popular merge tools include vimdiff, kdiff3, and meld.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html#git-pull",
    "href": "se/version_control/git_colab.html#git-pull",
    "title": "Git (Team)",
    "section": "git pull",
    "text": "git pull\nThe git pull command is a combination of git fetch and git merge. It will download changes from a remote repository and merge them into your working directory in one step.\n$ git pull",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html#resolving-conflicts",
    "href": "se/version_control/git_colab.html#resolving-conflicts",
    "title": "Git (Team)",
    "section": "Resolving Conflicts",
    "text": "Resolving Conflicts\nConflicts can occur when the same lines of code have been changed in both branches. You will need to manually resolve these conflicts before the merge can be completed.\nThe way to resolve conflicts is to open the conflicted file in your text editor and manually edit the file to resolve the conflicts. Once you have resolved all the conflicts, you can save the file and commit the changes. This manual edit process takes place in the working directory after a merge has been attempted and failed due to conflicts.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html#pull-requests",
    "href": "se/version_control/git_colab.html#pull-requests",
    "title": "Git (Team)",
    "section": "Pull Requests",
    "text": "Pull Requests\nPull requests are a way to propose changes to a repository and collaborate with others. When you create a pull request, you are asking the repository owner to review and merge your changes into the main branch.\nTo create a pull request, you will need to push your changes to a remote branch and then create the pull request on the Git hosting service.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_colab.html#working-with-branches",
    "href": "se/version_control/git_colab.html#working-with-branches",
    "title": "Git (Team)",
    "section": "Working with Branches",
    "text": "Working with Branches\nBranches are an important concept in Git that allow you to work on different features or fixes in isolation. When you create a new branch, you are creating a new line of development that is independent of the main branch (usually called master or main).\nTo create a new branch, you can use the git checkout -b command. This will create a new branch and switch to it in one step.\n$ git checkout -b &lt;branch name&gt;\nOnce you have made changes on a branch, you can merge those changes back into the main branch using the git merge command.\n$ git checkout main\n$ git merge &lt;branch name&gt;\n\n\n\nAt any point, you can check which branch you are on using the git branch command.\n$ git branch",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Team)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#initial-setup",
    "href": "se/version_control/git_solo.html#initial-setup",
    "title": "Git (Individual)",
    "section": "Initial Setup",
    "text": "Initial Setup\n\nIf this is the first time you‚Äôve installed Git, you may need to configure it. You only need to do this once per machine.\nYou can configure your Git username and email using the following commands, replacing John Doe‚Äôs info with your own.\n$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\nThese details will be associated with any commits that you make and blame will be correctly assigned.\n\n\nStarting from scratch\n\nFire it up: git init\nGit init is a one-time command you use during the initial setup of a new repo. Executing this command will create a new Git repository in the current directory. This will create a new subdirectory named .git that contains all of your necessary repository files ‚Äî a Git repository skeleton. At this point, nothing in your project is tracked yet. (See the next section to learn how to start tracking files.)\n\n\n\n\n\n\nLink it to your Github repository: git remote add origin\nGit remote is a command to manage the set of remotes associated with a repository. A remote in Git is a common repository that all team members use to exchange their changes. In most cases, such a remote repository is stored on a code hosting service like GitHub or on an internal server. In contrast to a local repository, a remote typically does not provide a file tree of the project‚Äôs current state. Instead, it only consists of the .git versioning data.\n$ git remote add origin &lt;remote repository URL&gt;\n$ git remote -v\n\n\n\n\nThe remote repository URL is the URL of the repository on GitHub. The git remote -v command lists the URLs that Git has stored for the shortname to be used when reading and writing to that remote.\nOn Github, you can find the URL of your repository by clicking on the green button that says ‚ÄúCode‚Äù and copying the URL that appears under SSH tab.\n\n\n\nStarting from an existing repo on Github\nGit clone is a command for downloading existing source code from a remote repository (like Github, for example). Cloning a repository downloads an exact copy of all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project. You can push your changes to the remote repository on GitHub, or pull other people‚Äôs changes from GitHub.\nThe syntax for git clone is as follows:\n$ git clone &lt;repo URL&gt;\nYou can find the URL of your repository by clicking on the green button that says ‚ÄúCode‚Äù and copying the URL that appears under SSH tab.\nYou don‚Äôt need to run git init or git remote add origin if you are cloning an existing repository.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Individual)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#workflow-individual",
    "href": "se/version_control/git_solo.html#workflow-individual",
    "title": "Git (Individual)",
    "section": "Workflow (individual)",
    "text": "Workflow (individual)\nWhen you are not collaborating with others, using git is pretty straightforward.\nIn git, there are four main states that your files can reside in. They are:\n\nuntracked: means that Git sees the file as a new file that has not been committed to the database yet.\nstaged: means that you have marked a modified file in its current version to go into your next commit snapshot.\ncommitted: means that the data is safely stored in your local database.\npushed: means that your data has been transferred to a remote repository.\n\n\n\n\n\n1. git status\nGit status is a command that displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven‚Äôt, and which files aren‚Äôt being tracked by Git. Status output does not show you any information regarding the committed project history. For this, you need to use git log.\n\n\n\n\n\n\n\n* git diff (optional)\nGit diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more. The git diff command is often used along with git status and git log to analyze the current state of a Git repo.\n\n\n\n\n\n2. git add\nGit add is a command used to add files to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, git add doesn‚Äôt really affect the repository in any significant way‚Äîchanges are not actually recorded until you run git commit.\n\ngit add &lt;file-name-1&gt;\ngit add &lt;file-name-2&gt;\ngit add &lt;file-name-3&gt;\n:\ngit add &lt;file-name-n&gt;\n\n\n\n3. git commit\nGit commit is a command used to save the changes to the local repository. Note that git commit alone doesn‚Äôt send changes to the remote repository. It only records changes to the local repository. To send those changes to the remote repository, you need to execute git push.\n\ngit commit -m &lt;Short text msg to communicate what are the changes made in the snapshot being committed&gt;\n\n\n\n5. git push\nGit push is a command used to upload local repository content (stuff that has been commit-ted) to a remote repository. The syntax for git push is as follows: git push -u  &lt;name of remote branch&gt; &lt;name of local branch&gt;. In most situtations, you will be pushing to the main branch of the origin remote repository. In that case, the command will be\ngit push -u origin main",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Individual)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#umm..-idk-what-happened",
    "href": "se/version_control/git_solo.html#umm..-idk-what-happened",
    "title": "Git (Individual)",
    "section": "Umm.. IDK what happened‚Ä¶",
    "text": "Umm.. IDK what happened‚Ä¶\n\n\n\n\n\n\nTip\n\n\n\nThis webpage, with an easy to remember name, is a great resource for such situations!\n\n\nWhile working on a project, you may find yourself in a situation where you need to undo a commit. Git offers two main ways to undo changes to commits: git revert and git reset.\n\ngit log\nThe first thing you should do is when you inevitably mess up is to assess the situation and identify the most recent commit up to which everything was working fine.\nGit log is a command used to display the commit history of a repository. By default, git log displays the commit hash, the author and the commit message. The git log command allows you to customize the output using a large number of flags and options.\nIt is often a good idea to use git log --oneline to get a more concise view of the commit history.\n\n\n\n\n\n\nGit reset is a powerful command that is used to undo local changes to the state of a Git repo. Git reset operates on ‚ÄúThe Three Trees of Git‚Äù. These trees are the Commit History ( HEAD ), the Staging Index, and the Working Directory.\n\n\ngit revert\nrevert is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.\nStep 1: Find the previous commit:\n\n\n1.1. First thing, we need to find the point we want to return to. To do that, we need to go through the log.\nTo avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing i) the first seven characters of the commit hash and ii) the commit message\nStep 2: Use it to make a new commit:\n\n\ngit revert HEAD --no-edit\nTo revert to earlier commits, use git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)\n\n\ngit reset\nreset is the command we use when we want to go back to a previous commit and erase everything that happened after it.\n\n\n\nSimilar to revert, we first need to find the commit we want to go back to using git log.\nNext, we need to use the reset command.\nTo reset to earlier commits, use git reset followed by the first seven characters of the commit hash of the commit you want to go back to.\ngit reset 1a2b3c4d",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Individual)"
    ]
  },
  {
    "objectID": "se/se.html",
    "href": "se/se.html",
    "title": "SOFTWARE ENGINEERING",
    "section": "",
    "text": "Software engineering is the application of engineering to the design, development, implementation, testing, and maintenance of software in a systematic method.\nIt is a very broad field that includes a wide range of subfields. In this course, we will primarily focus on version control and a popular software development methodology called Test-Driven Development (TDD).",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING"
    ]
  },
  {
    "objectID": "se/version_control/github.html",
    "href": "se/version_control/github.html",
    "title": "Github (Community)",
    "section": "",
    "text": "GitHub is a code hosting platform for version control and and social network for collaboration. It lets you and others work together on projects from anywhere.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#sign-up-for-github",
    "href": "se/version_control/github.html#sign-up-for-github",
    "title": "Github (Community)",
    "section": "Sign up for GitHub",
    "text": "Sign up for GitHub\nIf you don‚Äôt already have an account, you can sign up for a free account at github.com\n\nThis process is like signing up for any other web service. You‚Äôll need to: pick a username, provide an email address and choose a password. Fairly standard stuff.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#github-profile",
    "href": "se/version_control/github.html#github-profile",
    "title": "Github (Community)",
    "section": "Github Profile",
    "text": "Github Profile\nYour GitHub profile is the place where you can share information about yourself, your projects, and your interests. You can also use it to follow other developers, discover new code, and contribute to projects.\nIt is a good idea to add a profile picture and a bio to your profile. This will help others to know who you are and what you are interested in.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#repositories-and-projects",
    "href": "se/version_control/github.html#repositories-and-projects",
    "title": "Github (Community)",
    "section": "Repositories and Projects",
    "text": "Repositories and Projects\nA repository is the most basic element of GitHub. They‚Äôre easiest to imagine as a project‚Äôs folder. A repository contains all of the project files (including documentation), and stores each file‚Äôs revision history. Repositories can have multiple collaborators and can be either public or private.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#creating-a-repository",
    "href": "se/version_control/github.html#creating-a-repository",
    "title": "Github (Community)",
    "section": "Creating a Repository",
    "text": "Creating a Repository\nA repository is usually used to organize a single project. Repositories can contain folders and files, images, videos, spreadsheets, and data sets ‚Äì anything your project needs. Often, repositories include a README file, a file with information about your project. README files are written in the plain text Markdown language. You can use this cheat sheet to get started with Markdown syntax. GitHub lets you add a README file at the same time you create your new repository. GitHub also offers other common options such as a license file, but you do not have to select any of them now.\nYour hello-world repository can be a place where you store ideas, resources, or even share and discuss things with others.\n\nIn the upper-right corner of any page, use the drop-down menu, and select New repository.\n\n\n\n\n\n\nType a name for your repository, and an optional description.\n\n\n\n\n\n\nChoose Public for repository visibility.\n\n\n\nClick Create repository.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#add-ssh-key-to-github",
    "href": "se/version_control/github.html#add-ssh-key-to-github",
    "title": "Github (Community)",
    "section": "Add SSH key to GitHub",
    "text": "Add SSH key to GitHub\n\nGo to your GitHub account settings and click on SSH and GPG keys. Then click on New SSH key. Give a title to your key (ideally this should be something like Macbook 2023) and paste the key in the box below. Click on Add SSH key.\n\nCopy the SSH public key to your clipboard. If your SSH public key file has a different name than the example code, modify the filename to match your current setup. When copying your key, don‚Äôt add any newlines or whitespace.  \nIn the upper-right corner of any page, click your profile photo, then click Settings.  \nIn the ‚ÄúAccess‚Äù section of the sidebar, click SSH and GPG keys.  \nClick New SSH key or Add SSH key.  \nIn the ‚ÄúTitle‚Äù field, add a descriptive label for the new key. For example, if you‚Äôre using a personal laptop, you might call this key ‚ÄúPersonal laptop‚Äù.  \nIn the ‚ÄúKey‚Äù field, paste your public key.  \nClick Add SSH key.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#fork-a-repository",
    "href": "se/version_control/github.html#fork-a-repository",
    "title": "Github (Community)",
    "section": "Fork a Repository",
    "text": "Fork a Repository\nA fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\nMost commonly, forks are used to either propose changes to someone else‚Äôs project or to use someone else‚Äôs project as a starting point for your own idea.\nTo fork a repository, click the Fork button in the header of the repository.\n\n\n\n\nAfter forking the repository, you can clone it to your local machine and make changes. Once you are done, you can create a pull request to propose your changes to the original repository.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/github.html#pull-requests",
    "href": "se/version_control/github.html#pull-requests",
    "title": "Github (Community)",
    "section": "Pull Requests",
    "text": "Pull Requests\nWhen you are ready to share your work, submit a pull request. Pull requests show differences between the content from both branches. The changes, additions, and subtractions are shown in green and red.\nAs soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.\nBy using GitHub‚Äôs @mention system in your pull request message, you can ask for feedback from specific people or teams, whether they‚Äôre down the hall or 10 time zones away.\nYou can even open pull requests in your own repository and merge them yourself. It‚Äôs a great way to learn the GitHub flow before working on larger projects.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Github (Community)"
    ]
  },
  {
    "objectID": "se/version_control/version_control.html",
    "href": "se/version_control/version_control.html",
    "title": "Version Control",
    "section": "",
    "text": "Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.\nIt allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.\nVersion control systems (VCS) are tools used to track changes to source code (or other collections of files and folders). As the name implies, these tools help maintain a history of changes; furthermore, they facilitate collaboration.\nVCSs track changes to a folder and its contents in a series of snapshots, where each snapshot encapsulates the entire state of files/folders within a top-level directory. VCSs also maintain metadata like who created each snapshot, messages associated with each snapshot, and so on.\nIndividual snapshots can be compared to each other, and differences can be extracted. For example, you can ask questions like what changed between this snapshot and the previous snapshot? Who made those changes? etc.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control"
    ]
  },
  {
    "objectID": "se/version_control/version_control.html#git",
    "href": "se/version_control/version_control.html#git",
    "title": "Version Control",
    "section": "Git",
    "text": "Git\n\nWhile other VCSs exist, Git is the de facto standard for version control. This XKCD comic captures Git‚Äôs reputation:\nBecause Git‚Äôs interface is a leaky abstraction, learning Git top-down (starting with its interface / command-line interface) can lead to a lot of confusion. It‚Äôs possible to memorize a handful of commands and think of them as magic incantations, and follow the approach in the comic above whenever anything goes wrong.\n\n\n\n\n\n\nNote\n\n\n\n\n‚ÄúI‚Äôm not a nice person and I don‚Äôt care about you‚Äù\nGit was developed by Linus Torvalds, who also created the open source operating system Linux (portmanteau of Linus and Unix).\nTorvalds is known for his technical brilliance but also his very abrasive personality. This interview on TED and New Yorker profile of Torvalds is a good introduction to him.‚Äù",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control"
    ]
  },
  {
    "objectID": "se/ssh.html",
    "href": "se/ssh.html",
    "title": "Secure Shell (ssh)",
    "section": "",
    "text": "Just as HTTP is a protocol for unencrypted web traffic and HTTPS is a protocol for encrypted web traffic, SSH is a protocol for encrypted remote login and other secure network services.\nUsing the SSH protocol, you can connect and authenticate to remote servers and services.\nIn simple words, you can use SSH to access another computer over a network and execute commands on the other computer. All of this takes place in the command line, without needing a graphical interface. This is how most servers are administered.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Secure Shell (ssh)"
    ]
  },
  {
    "objectID": "se/ssh.html#ssh-keys",
    "href": "se/ssh.html#ssh-keys",
    "title": "Secure Shell (ssh)",
    "section": "SSH Keys",
    "text": "SSH Keys\nSSH keys are a way to identify trusted computers and communicate with them without involving passwords.\nSSH keys are two files that are generated together: a public key and a private key. The private key is kept on the computer you log in from, while the public key is shared with all the computers you want to log communicate with.\n\n\n\n\n\n\nCaution\n\n\n\nNever share or upload your private SSH key!\n\n\n\n\n\n\nCheck if you already have an SSH key\nIf you want to check if you already have an SSH key, you can use the following command:\nls -al ~/.ssh\n\n\n\n\n\n\nNote\n\n\n\nFor Windows Users If you are using Windows and the above command does not work, you can use the following commands: dir ~/.ssh or notepad ~/.ssh/id_rsa.pub\nAlternatively, check [your home directory]/.ssh/id_rsa where [your home directory] is the directory where your home directory (C:) is located.\nWorst case, just download and install Git Bash or PuTTY.\n\n\nls: prints the contents of a directory -a: list all files in long format -l: use a long listing format ~/.ssh: path to the ssh folder ~: home directory .ssh: hidden ssh folder in your home directory\nIf you see a file named id_rsa.pub, you already have an SSH key pair and you can skip the next step.\nThe filename ending with .pub is your public key. The other file is the corresponding private key. If you don‚Äôt have these files (or you don‚Äôt even have a .ssh directory), you need to create them.\n\n\nGenerate a new SSH key, if needed\nSSH keys are generated using a command line tool called ssh-keygen. This tool is installed by default on most systems.\n\nssh-keygen -t ed25519 -C \"your_email@example.com\"\n    \n-t: the type of encryption to use\ned25519: the encryption type\n-C: comment to help you identify the key\nTry the ls -al ~/.ssh command again to see your new SSH key.\n\n\nCopy the SSH key to your clipboard\n\nMacWindows\n\n\npbcopy &lt; ~/.ssh/id_rsa.pub\n\n\nclip &lt; ~/.ssh/id_rsa.pub\n\n\n\nNow you can paste your public ssh key on the website you want to use it on.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Secure Shell (ssh)"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html",
    "href": "basics/operations/precedence_associativity.html",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html#operator-precedence",
    "href": "basics/operations/precedence_associativity.html#operator-precedence",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "Operator Precedence",
    "text": "Operator Precedence\nThe following table lists the operator precedence in Python. Operators with higher precedence are evaluated before operators with lower precedence. Operators with the same precedence are evaluated from left to right.\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n()\nParentheses\n\n\n**\nExponentiation\n\n\n~\nBitwise NOT\n\n\n*, /, //, %\nMultiplication, Division, Floor Division, Modulo\n\n\n+, -\nAddition, Subtraction\n\n\n&lt;&lt;, &gt;&gt;\nBitwise Left Shift, Bitwise Right Shift\n\n\n&\nBitwise AND\n\n\n^\nBitwise XOR\n\n\n|\nBitwise OR\n\n\n==, !=, &gt;, &gt;=, &lt;, &lt;=, is, is not, in, not in\nComparison, Identity, Membership\n\n\nnot\nLogical NOT\n\n\nand\nLogical AND\n\n\nor\nLogical OR\n\n\n=\nAssignment\n\n\n+=, -=, *=, /=, //=, %=, &=, ^=, |=, &lt;&lt;=, &gt;&gt;=\nAssignment Operators",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html#operator-associativity",
    "href": "basics/operations/precedence_associativity.html#operator-associativity",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "Operator Associativity",
    "text": "Operator Associativity\nThe following table lists the operator associativity in Python. Operators with left associativity are evaluated from left to right. Operators with right associativity are evaluated from right to left.\n\n\n\n\n\n\n\nOperator\nAssociativity\n\n\n\n\n**\nRight\n\n\n~\nRight\n\n\n*, /, //, %\nLeft\n\n\n+, -\nLeft\n\n\n&lt;&lt;, &gt;&gt;\nLeft\n\n\n&\nLeft\n\n\n^\nLeft\n\n\n|\nLeft\n\n\n==, !=, &gt;, &gt;=, &lt;, &lt;=, is, is not, in, not in\nLeft\n\n\nnot\nRight\n\n\nand\nLeft\n\n\nor\nLeft\n\n\n=\nRight\n\n\n+=, -=, *=, /=, //=, %=, &=, ^=, |=, &lt;&lt;=, &gt;&gt;=\nRight",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html#implicit-type-conversion",
    "href": "basics/operations/precedence_associativity.html#implicit-type-conversion",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "Implicit Type Conversion",
    "text": "Implicit Type Conversion\n\nAutomatic conversion from one data type to another data type as result of an operation.\n\nPython always converts ‚Äúsmaller‚Äù data types to ‚Äúlarger‚Äù data types to avoid the loss of information.\n\ninteger_part = 21\nfractional_part = 0.03\n\nprint(\"Datatype of integer_part:\", type(integer_part))\nprint(\"Datatype of fractional_part:\", type(fractional_part))\n\nnew_number = integer_part + fractional_part\n\nprint(\"Value of new_number:\",new_number)\nprint(\"Datatype of new_number:\",type(new_number))\n\nprint(\"Datatype of integer_part:\", type(integer_part))\n\n\ninteger_part = \"21\"\nfractional_part = \"0.03\"\n\nnew_number = integer_part + fractional_part\n\nprint(\"Datatype of integer_part:\", type(integer_part))\nprint(\"Datatype of fractional_part:\", type(fractional_part))\n\nprint(\"Value of new_number:\",new_number)\nprint(\"Datatype of new_number:\",type(new_number))",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/operations.html",
    "href": "basics/operations/operations.html",
    "title": "Operations",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.\n\n\nAn expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions: 42, x, x+1\n\nWhen you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. In this example, x + 1, the interpreter adds one to the current value of x. But it doesn‚Äôt display the value unless you tell it to:\n\nx = 42\nx + 1\n\nA statement is a unit of code that has an effect, like creating a variable or displaying a value.\n\nx = 42\nprint(x)\n\nThe first line is an assignment statement that gives a value to x. The second line is a print statement that displays the value of x.\nThe types of statements we have seen so far are assignments and print statements. Other types of statements include:\n\nImport statements: Import a module.\nIf statements: Execute code depending on the value of a condition.\nFor statements: Execute code for each item in a sequence.\nWhile statements: Execute code while a condition is true.\nDef statements: Define a function.\nReturn statements: Exit a function and return a value.\nBreak statements: Exit a loop.\nContinue statements: Skip the rest of the loop body.\n\nWhen you type a statement, the interpreter executes it, which means that it does whatever the statement says. In general, statements don‚Äôt have values.\nA program is a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.\nFor example, the script below contains three statements:\n\nx = 42\nprint(x)\nx = x + 1\n\nThe output of this program is 42. The second line displays the value of x, which is 42. The third line increases the value of x by one. But it doesn‚Äôt display the value.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations"
    ]
  },
  {
    "objectID": "basics/operations/operations.html#expressions-statements-and-programs",
    "href": "basics/operations/operations.html#expressions-statements-and-programs",
    "title": "Operations",
    "section": "",
    "text": "An expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions: 42, x, x+1\n\nWhen you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. In this example, x + 1, the interpreter adds one to the current value of x. But it doesn‚Äôt display the value unless you tell it to:\n\nx = 42\nx + 1\n\nA statement is a unit of code that has an effect, like creating a variable or displaying a value.\n\nx = 42\nprint(x)\n\nThe first line is an assignment statement that gives a value to x. The second line is a print statement that displays the value of x.\nThe types of statements we have seen so far are assignments and print statements. Other types of statements include:\n\nImport statements: Import a module.\nIf statements: Execute code depending on the value of a condition.\nFor statements: Execute code for each item in a sequence.\nWhile statements: Execute code while a condition is true.\nDef statements: Define a function.\nReturn statements: Exit a function and return a value.\nBreak statements: Exit a loop.\nContinue statements: Skip the rest of the loop body.\n\nWhen you type a statement, the interpreter executes it, which means that it does whatever the statement says. In general, statements don‚Äôt have values.\nA program is a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.\nFor example, the script below contains three statements:\n\nx = 42\nprint(x)\nx = x + 1\n\nThe output of this program is 42. The second line displays the value of x, which is 42. The third line increases the value of x by one. But it doesn‚Äôt display the value.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations"
    ]
  },
  {
    "objectID": "basics/controls/loops.html",
    "href": "basics/controls/loops.html",
    "title": "Loops",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#while-loop",
    "href": "basics/controls/loops.html#while-loop",
    "title": "Loops",
    "section": "while loop",
    "text": "while loop\n\nLoops allow conditional repetition of a set of statements.\nIn simple terms, loops repeatedly execute a block of indented statements as long as a corresponding boolean condition evaluates to True.\nwhile loops are the most basic looping construct in the most programming languages, including Python.\n\nRecall, for if...else statements:\n\nif boolean_condition_A: \n    #Indented Block B\nelse:\n    #Indented Block C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is called a loop because flow of execution keeps looping back to the start of the while statement until the condition becomes False.\nWhen the condition becomes False, flow of execution moves to the statement that follows the indented while block.\nThe net effect is that the loop‚Äôs body is executed repeatedly while the condition at the top is True.\nEach execution of the loop‚Äôs body is called an iteration and the variable(s) in the condition are called iterator(s).\nThe while statement consists of:\n\na header line with a boolean condition\na body of one or more indented statements\n\n\n\nstatement 0\nwhile (boolean condition): &gt; statement 1\n&gt; statement 2\n.\n.\n.\nstatement n\nstatement n+1\n\ni = 0\n\nwhile i &lt; 10:\n    \n    print(i)\n    \n    i = i + 1\n    \nprint(\"Outside loop\")\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nOutside loop",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#loop-design-pattern",
    "href": "basics/controls/loops.html#loop-design-pattern",
    "title": "Loops",
    "section": "Loop Design Pattern",
    "text": "Loop Design Pattern\n\nMost loops (not all of them) have the following common parts, in this order:\n\n\nInitialization of iterator, result and other variables.\nContinuation condition (a.k.a. Termination condition)\nBody of the loop (Indented)\nUpdate of result and iterator variables (Indented)\n\nLast lines of the body\n\n\ninitialization\nwhile ( continuation-condition ) { &gt; body\n&gt; update\n\\(summ = \\sum_{i=1}^{n} k\\)\n\ndef summation_k(k, n):\n\n    #initialization result\n    summ = 0 \n\n    #initialization iterator\n    i = 0    \n    \n    #condition\n    while i &lt; n: \n        \n        #update of result\n        summ = summ + k\n        \n        #update of iterator\n        i = i + 1\n        \n    return summ\n\nprint(summation_k(10, 10))\n\n100\n\n\n\\(\\sum_{i=1}^{n} i\\)\n\n\ndef summation_i(n):\n\n    summ = 0\n    i = 0\n    while i &lt;= n:\n        summ = summ + k\n        i = i + 1\n\n    return summ",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#infinite-loops",
    "href": "basics/controls/loops.html#infinite-loops",
    "title": "Loops",
    "section": "Infinite Loops",
    "text": "Infinite Loops\n\ni = 0\n\nwhile i &gt;= 0:\n    \n    print(i)\n    i = i + 1\n\nprint(\"Outside loop\")",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#break",
    "href": "basics/controls/loops.html#break",
    "title": "Loops",
    "section": "break",
    "text": "break\n\nFor immediately exiting the loop i.e.¬†Python jumps out of the loop‚Äôs body (past the entire loop statement) when it encounters a break statement\nGenerally used within an if statement within the loop‚Äôs body\nInside the loop‚Äôs body, the code that follows the break statement is never executed",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#for-loops",
    "href": "basics/controls/loops.html#for-loops",
    "title": "Loops",
    "section": "for loops",
    "text": "for loops\n\nfor loops are used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#continue",
    "href": "basics/controls/loops.html#continue",
    "title": "Loops",
    "section": "continue",
    "text": "continue",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html",
    "href": "basics/controls/conditionals.html",
    "title": "Conditionals",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#flow-chart",
    "href": "basics/controls/conditionals.html#flow-chart",
    "title": "Conditionals",
    "section": "Flow Chart",
    "text": "Flow Chart",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#syntax-of-if-else",
    "href": "basics/controls/conditionals.html#syntax-of-if-else",
    "title": "Conditionals",
    "section": "Syntax of if ‚Ä¶ else",
    "text": "Syntax of if ‚Ä¶ else\nif boolean condition :\nTrue statement 1\n.\n.\n.\nTrue statement n \nelse :\nFalse statement 1 \n. \n. \n. \nFalse statement m \n\na = 3\nif a &gt; 2:\n    print('Greater than 2')\nelse:\n    print(\"Less than or equal to 2\")  \n    print('Second else statement')\nprint('Regardless of condition')",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#boolean-operators",
    "href": "basics/controls/conditionals.html#boolean-operators",
    "title": "Conditionals",
    "section": "Boolean Operators",
    "text": "Boolean Operators\n\nThese operators return True or False (i.e.¬†boolean data type).\nWe will use these for conditions in if statements:\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample.\n\n\n\n\n==\nReturns True if left hand operand is equal to right hand operand. Otherwise, returns False\na+b == b+a\n\n\n!=\nReturns True if left hand operand is NOT equal to right hand operand. Otherwise, returns False.\na*b != b/a\n\n\n&lt;\nReturns True if left hand operand is less than right hand operand. Otherwise, returns False.\nb/a &lt; b\n\n\n&gt;\nReturns True if left hand operand is greater than right hand operand. Otherwise, returns False.\na*b &gt; b\n\n\n&lt;=\nReturns True if left hand operand is less than or equal to right hand operand. Otherwise, returns False.\na-b &lt;= a\n\n\n&gt;=\nReturns True if left hand operand is greater than or equal to right hand operand. Otherwise, returns False.\na*b &gt;= b*a",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#logical-operators",
    "href": "basics/controls/conditionals.html#logical-operators",
    "title": "Conditionals",
    "section": "Logical Operators",
    "text": "Logical Operators\nWe will use these for conditions in if statements:\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\nnot\nInverts the existing boolean value i.e.¬†not True = False; not False = True\n\n\nand\nTrue iff all boolean expressions are True, False otherwise\n\n\nor\nTrue iff any boolean expression is True, False iff all are False\n\n\n\n\na = 0\nb = 3\n\nif not (((b != 3) or (a &lt; 1)) and (b !=0)):\n    print('South')\nelse:\n    print('Carolina')",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#indentation",
    "href": "basics/controls/conditionals.html#indentation",
    "title": "Conditionals",
    "section": "Indentation",
    "text": "Indentation\n\nThe body of the if and else statements start with an indentation (whitespace at the beginning of a line) and the first unindented line marks the end.\nIf the statements in the body are not indented OR the intendentation is not consistent, IndentationError would result\n\n\na = 1\nif a &gt; 2:\n    print('Greater than 2')\nelse:\n    print(\"Less than 2\")  \n    print('Today is Friday')\n    print(\"Abc\")\n    \nprint(\"we have a long weekend coming up\")",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#if-else-vs.-booleans",
    "href": "basics/controls/conditionals.html#if-else-vs.-booleans",
    "title": "Conditionals",
    "section": "If ‚Ä¶ else vs.¬†booleans",
    "text": "If ‚Ä¶ else vs.¬†booleans\n\ncollege = 4\nexperience = 0\ngpa = 3.7\nalready_employee = False\n\ngood_candidate = (college &gt;= 4 and (experience &gt;= 5 or gpa &gt; 3.5) and not already_employee)\nbad_candidate = not good_candidate\n\n## A. \nanswer = (good_candidate*\"Hired!\") + (bad_candidate*\"We regret to inform you...\")\nprint(answer)\n\n## B. \nif good_candidate: \n    answer = \"Hired!\"\nelse:\n    answer = \"We regret to inform you... \"\nprint(answer)\n\n## A. == B.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#nested-if-else",
    "href": "basics/controls/conditionals.html#nested-if-else",
    "title": "Conditionals",
    "section": "Nested if else",
    "text": "Nested if else\n\n#C.\n\nif (college &gt;= 4):\n    if (experience &gt;= 5 or gpa &gt; 3.5):\n        if not already_employee:\n            print(\"Hired\")\nelse:\n    print(\"We regret to inform you...\")\n    \n#A. == B. == C.\n\n\n\n\nCriteria\nLetter Grade\n\n\n\n\nTotal points ‚â• 90%\nA\n\n\n80% ‚â§ Total points &lt; 90%\nB\n\n\n70% ‚â§ Total points &lt; 80%\nC\n\n\n60% ‚â§ Total points &lt; 70%\nD\n\n\nTotal points &lt; 60%\nF\n\n\n\n\n\"\"\"Implement the letter grade \ntable above, using if-else\n\"\"\"\n\n#Inputs, assume percentage \ntotal_points = 75\n\nletter_grade = \"TBD\"\n\nif total_points &lt;60:\n    letter_grade = \"F\"\nelse:\n    if (total_points &lt; 70) and (total_points &gt;= 60):\n        letter_grade = \"D\"    \n    else:\n        if (total_points &lt; 80) and (total_points &gt;= 70):\n            letter_grade = \"C\"    \n        else:   \n            if total_points &lt; 90 and total_points &gt;= 80:\n                letter_grade = \"B\"\n            else: \n                letter_grade = \"A\"\n#                 if totals_points &lt; 100 and total_points &gt;= 90:\n#                 else:\n#                     letter_grade = \"A+\"\n\n#Output(s)\nprint(letter_grade)\n\nC",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#if-elif-else",
    "href": "basics/controls/conditionals.html#if-elif-else",
    "title": "Conditionals",
    "section": "if ‚Ä¶ elif ‚Ä¶ else",
    "text": "if ‚Ä¶ elif ‚Ä¶ else\n\nThe elif keyword allow additional (boolean) conditions, in case the condition for if was False\nYou can have as many elifs as you want\nGenerally, a more readable alternative to nested if.. else statements\n\nSyntax:\nif test expression:\nBody of if \nelif test expression:\nBody of elif\n   \nelse :\nBody of else",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#elif-flowchart",
    "href": "basics/controls/conditionals.html#elif-flowchart",
    "title": "Conditionals",
    "section": "elif flowchart",
    "text": "elif flowchart\n\n\n\"\"\"Elif example\"\"\"\n\na = 33\nb = 33\n\n\"\"\"A\"\"\"\nif b &gt; a:\n    print(\"Block A - b is greater than a\")\nelif b &lt; a:\n    print(\"Block A - b is less than a\")\nelse:\n    print(\"A == B\") \n    \n\"\"\"B\"\"\"\nif b &gt; a:\n    print(\"Block A - b is greater than a\")\nelse:\n    if b &lt; a:\n        print(\"Block A - b is less than a\")\n    else:\n        print(\"A == B\")\n        \n\nA == B\n\n\n\n\n\nCriteria\nLetter Grade\n\n\n\n\nTotal points ‚â• 90%\nA\n\n\n80% ‚â§ Total points &lt; 90%\nB\n\n\n70% ‚â§ Total points &lt; 80%\nC\n\n\n60% ‚â§ Total points &lt; 70%\nD\n\n\nTotal points &lt; 60%\nF\n\n\n\n\n\"\"\"Implement the letter grade \ntable above, using if-else\n\"\"\"\n\n#Inputs, assume percentage \ntotal_points = 85\n\nif total_points &gt;= 90 and total_points &lt;= 100:\n    letter_grade = \"A\"\nelif total_points &gt;= 80:# and total_points &lt;= 89:\n    letter_grade = \"B\"\nelif total_points &gt;= 70:# and total_points &lt;= 79:\n    letter_grade = \"C\"\nelif total_points &gt;= 60:# and total_points &lt;= 69:\n    letter_grade = \"D\"\nelse:\n    letter_grade = \"F\"\n\nprint(letter_grade)\n\nA",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#exercises",
    "href": "basics/controls/conditionals.html#exercises",
    "title": "Conditionals",
    "section": "Exercises",
    "text": "Exercises\nPlease re-implement solutions to the following problems from previous classes, labs and assignments, now using if ‚Ä¶ else statements\nQ1. Tip 20% for good service, tip 10% otherwise (from Lecture 1.3.)\n\ncheque_amount = 100\n\nservice_quality = input(\"Our bill is $\"+str(cheque_amount)+\". How much should we tip? Was the service good? \")\n\n# #True if input is \"Yes\"\ngood_service = service_quality == \"Yes\"\n\nbad_service  = not good_service\n\ntwenty_percent_tip = 0.2 * cheque_amount\nten_percent_tip    = 0.1 * cheque_amount\n\ntip = (good_service * twenty_percent_tip) + (bad_service * ten_percent_tip)\n\nprint(\"Let's tip $\", tip)\n\nQ2. Round a floating point number, without using round() (from Week-1 lab)\n\nAssume inputs are always positive and you are to only round to the nearest integer (no digit precision).\nRound up (ceil) for .5\n\n\n#Input\nfloat_number = 7.6\n\n#Insert your line(s) of code here\n\n#Output\nrounded = \n\nQ3. Convert time from 12-hr. format to 24-hr. format (Q2 from Assignment 1)\nGiven three integers clock_12hrs_hrs, clock_12hrs_mins and pm representing hours, minutes and AM/PM respectively in 12-hour time format, set integers clock_24hrs_hrs and clock_24hrs_mins to corresponding hours and minutes in 24-hour format time.\npm \\(=0\\) indicates input time is AM and pm \\(= 1\\) means otherwise.\nFeel free to introduce new variables, as needed.\nConstraints on input:\n$0 $ pm $ $\n$1 $ clock_12hrs_hrs \\(\\leq 12\\)\n$ 0 $ clock_12hrs_mins $ $\nExample 1\nInput : 7:30 PM\nclock_12hrs_hrs  = 7\nclock_12hrs_mins = 30\npm = 1\nOutputs: 19:30\nclock_24hrs_hrs = 19\nclock_24hrs_mins = 30\nExample 2\nInput : 3:14 AM\nclock_12hrs_hrs  = 3\nclock_12hrs_mins = 14\npm = 0\nOutputs: 3:14\nclock_24hrs_hrs = 3\nclock_24hrs_mins = 14\nExample 3\nInput : 12:00 PM\nclock_12hrs_hrs  = 12\nclock_12hrs_mins = 0\npm = 1\nOutputs: 12:00\nclock_24hrs_hrs = 12\nclock_24hrs_mins = 0\nExample 4\nInput : 12:00 AM\nclock_12hrs_hrs  = 12\nclock_12hrs_mins = 0\npm = 0\nOutputs: 0:00\nclock_24hrs_hrs = 0\nclock_24hrs_mins = 0\nMake sure you test your code for inputs other than the ones provided above\n\n\"\"\" Inputs \"\"\"\nclock_12hrs_hrs   = 12  # Test for values: 1, 2, 3,...., 10, 11, 12\nclock_12hrs_mins  = 0 # Test for values: 0, 1, 2, 3,...., 57, 58, 59 \npm                = 0  # Test for values: 0, 1\n\n\"\"\"Insert your lines of code here\n\nOutputs\n------- \n\"\"\"\n\n\nclock_24hrs_hrs  = clock_12hrs_hrs % 12 + 12*pm\nclock_24hrs_mins = clock_12hrs_mins\n\nprint(\"Inputs: \", clock_12hrs_hrs, clock_12hrs_mins, pm)\nprint(\"Outputs: \",  clock_24hrs_hrs, clock_24hrs_mins)",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/data.html",
    "href": "basics/data.html",
    "title": "Data",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.\nData is to computer science what chemicals are to chemistry or organisms are to biology.\nData is the raw material that we process, analyze, and transform into insight and knowledge.\nIn this section, we will learn about how to represent elementary data in Python. Later, we will learn about how to represent more complex data structures.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#values-and-types",
    "href": "basics/data.html#values-and-types",
    "title": "Data",
    "section": "Values and Types",
    "text": "Values and Types\n\nThe atomic indivisible unit of data in computer programming is called a value.\nValues are the most basic things that a computer program manipulates or calculates.\n\nFor example, the number 42 is a value. So is \"Hello World!\".\n\nEach value belongs to a type.\nThe type of a value determines its interpretation by the computer and the operations that can be performed on it.\n\nFor example, the value 42 is of type int (short for integer) and the value \"Hello World!\" is of type str (short for string, so-called because it contains a string of letters).\nPython comes with the following built-in data types:\n\n\n\n\n\n\n\n\n\n\n\nPython Data Type\nDescription\nCategory\nMutable\nExample Values\n\n\n\n\nint\nIntegers\nNumeric\n‚ùå\n42, 0, -1, 10000000000\n\n\nfloat\nFloating point numbers\nNumeric\n‚ùå\n3.14159, 0.0, -1.0, 1.0e10\n\n\ncomplex\nComplex numbers\nNumeric\n‚ùå\n3 + 4j, 1j\n\n\nbool\nBoolean values\nBoolean\n‚ùå\nTrue, False\n\n\nstr\nString values\nText\n‚ùå\n\"Hello World!\", \"42\"\n\n\nlist\nOrdered mutable sequences of values\nSequence\n‚úÖ\n[1, 2, 3], [\"Hello\", \"World\"]\n\n\ntuple\nOrdered immutable sequences of values\nSequence\n‚ùå\n(1, 2, 3), (\"Hello\", \"World\")\n\n\nrange\nImmutable sequence of numbers\nSequence\n‚ùå\nrange(10), range(1, 10, 2)\n\n\ndict\nUnordered mapping of keys to values\nMapping\n‚úÖ\n{\"a\": 1, \"b\": 2}\n\n\nset\nUnordered collection of unique values\nSet\n‚úÖ\n{1, 2, 3}\n\n\nfrozenset\nImmutable set\nSet\n‚ùå\nfrozenset({1, 2, 3})\n\n\nbytes\nSequence of bytes\nBinary\n‚ùå\nb\"Hello World!\"\n\n\nbytearray\nMutable sequence of bytes\nBinary\n‚úÖ\nbytearray(b\"Hello World!\")\n\n\nmemoryview\nMemory view of bytes\nBinary\n‚ùå\nmemoryview(b\"Hello World!\")\n\n\nNoneType\nSpecial type indicating no value\nNoneType\n‚ùå\nNone",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#variables",
    "href": "basics/data.html#variables",
    "title": "Data",
    "section": "Variables",
    "text": "Variables\nOne of the most powerful features of a programming language is the ability to manipulate variables.\nSimilar to algebra, variables in computer programming are names that refer to values.\nIn algebra, the following statement declares that the variable x has the value 42:\n\\[x = 42\\]\nIn Python, the following statement declares that the variable x has the value 42:\nx = 42\nIn Python, a variable is a just a name. Values are somewhere else, and a variable refers to a value. Multiple names can refer to the same value. Python calls whatever is needed to refer to a value a reference. Assigning to a variable (or object field, or ‚Ä¶) simply makes it refer to another value. The whole model of storage locations does not apply to Python, the programmer never handles storage locations for values. All he stores and shuffles around are Python references, and those are not values in Python, so they cannot be target of other Python references.\nVariables are the first means of abstraction in computer programming. They allow us to abstract away the details of the value and refer to computations in more general terms.\nRules for Naming Variables:\nIn Python, variable names can be arbitrarily long. They can contain both letters and numbers, but they have to begin with a letter or an underscore (variable names can not start with a number).\n\nVariable Names must be descriptive!\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nIn Python, the convention is to NOT use upper case letters anywhere in the name. In case of multi-word names, use _ .",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#dynamic-and-strong-typing",
    "href": "basics/data.html#dynamic-and-strong-typing",
    "title": "Data",
    "section": "Dynamic and Strong Typing",
    "text": "Dynamic and Strong Typing\nYou (and Python) can identify strings because they are enclosed in quotation marks \".\nPython is a dynamically typed language, which means that the type of a value is inferred at runtime (as opposed to compile time) based on the value.\nPython is a dynamically typed language, which means two things:\n\nThe type of a value is inferred at runtime (as opposed to compile time) based on the value\nThe same variable can be assigned values of different types at different times.\n\n\n\n\n```srfrcoul https://res.cloudinary.com/practicaldev/image/fetch/s‚Äìi1yqfSl1‚Äì/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://miro.medium.com/max/1400/1%2ABddwVWW6hFU0miT9DCbUWQ.png\n\n\n\n\nwidth: 50%\n\n\nname: dynamic-strong-typing\n\n\n\nDifferent programming languages have different approaches to types. Python is a dynamically typed and strongly typed programming language.\n\nPython is also a **strongly typed** language, which means that every \n\nThe `=` symbol in Python is called the **assignment operator**. It allows us to creates new variables (names) and _assign_ (refer) them values. \n\nNote that the assignment operator assigns the value on the right to the variable on the left. In other words, the directionality of assignment in `x = 42` is  $x \\leftarrow 42$.\n\nVariables can naturally be assigned different values at different times.\n\nIn fact, the same variable can be assigned values of different types at different times.\n\n::: {#cell-5 .cell}\n``` {.python .cell-code}\nmessage = \"What's up, Doc?\"\nn = 17\npi = 3.14159\n:::\nThis example makes three assignments. The first assigns the string \"What's up, Doc?\" to a new variable named message. The second gives the integer 17 to n, and the third gives the floating-point number 3.14159 to pi.\nThe assignment operator, =, should not be confused with an equals sign (even though it uses the same character). Assignment operators link a name, on the left hand side of the operator, with a value, on the right hand side. This is why you will get an error if you enter:\n\n17 = n # Error: can't assign to literal\nA common way to represent variables on paper is to write the name with an arrow pointing to the variable‚Äôs value. This kind of figure is called a state diagram because it shows what state each of the variables is in (think of it as the variable‚Äôs state of mind). This diagram shows the result of the assignment statements\n\nThe print statement also works with variables.\n\nprint(message), print(n), print(pi)\n\nIn each case the result is the value of the variable. Variables also have types; again, we can ask the interpreter what they are.\n\ntype(message), type(n), type(pi)\n\nThe type of a variable is the type of the value it refers to.\n\nten_percent = 3\nten_percent\n\n\nTen_percent = 10\nTen_percent\n\n\nTEN_PERCENT = 10000\nTEN_PERCENT\n\n\nten_percent = 5\nten_percent\n\n\nage = 2\nage\n\n\nAge = 20\nAge\n\n\nAGE = 200\nAGE\n\nWhich of the following variable names would throw a Syntax Errox?\n\n10_percent = 27.03 / 10\n\nten_percent = 27.03 / 10\nten_percent\n\n_10_percent = 27.03 / 10\n_10_percent\n\n20_percent = 27.03 / 10\n\ntwenty_percent = 27.03 / 10\n\ntwenty_% = 27.03 / 10\n\n\nReserved words\nIn Python, there are 33 reserved words. These are words that have special meaning to Python. You cannot use reserved words as variable names.\nFalse, def, if, raise, None, del, import, return, True, elif ,in, try, and, else, is, while, as, except, lambda, with assert, finally, nonlocal, yield break, for, not\nclass, from, or,\ncontinue, global, pass\n\nA programming language is more than just a means for instructing a computer to perform tasks.\nIt also serves as a framework within which we organize our ideas about computational processes.\nPrograms serve to communicate those ideas among the members of a programming community.\nThus, let me re-emphasize programs must be written for people to read, and only incidentally for machines to execute.\n\n\n\nYou can get the data type of any variable using the built-in type() function\nPython programming language is both:\n\n\nStrongly typed:\n\nAll variables have a type\nThe type matters when performing operations on a variable.\n\nDynamically typed:\n\nIn Python, the data type is set when you assign a value to a variable (during runtime).",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#glossary",
    "href": "basics/data.html#glossary",
    "title": "Data",
    "section": "Glossary",
    "text": "Glossary\n\nvalue\n    The most basic thing a program works with. Values include numbers (like `42` or `3.14159`) and strings (like `\"Hello World!\"`).\n\ntype\n    A category of values. The types we have seen so far are integers (type `int`), floating-point numbers (type `float`), and strings (type `str`).\n\nvariable\n    A name that refers to a value.\n\n\nStrongly typed\n    All variables have a type and the type matters when performing operations on a variable. \n\nDynamically typed\n    The data type is set when you assign a value to a variable (during runtime).\n\nWeakly typed\n    The data type is set when you assign a value to a variable (during compile time).\n\nStatic typed\n    The data type is set when you assign a value to a variable (during compile time).",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#exercises",
    "href": "basics/data.html#exercises",
    "title": "Data",
    "section": "Exercises",
    "text": "Exercises\n\nWhich of the following are valid variable names in Python? Why or why not?\n\n\n\n\n\nVariable Name\nValid?\nWhy or Why Not?\n\n\n\n\ni.\nage\n\n\n\n\nii.\nAge\n\n\n\n\niii.\nAGE\n\n\n\n\niv.\nage_\n\n\n\n\nv.\nage!\n\n\n\n\nvi.\nage@\n\n\n\n\nvii.\nage$\n\n\n\n\nviii.\nFalse\n\n\n\n\nix.\nfalse\n\n\n\n\nx.\nwhile\n\n\n\n\nxi.\n_while\n\n\n\n\nxii.\nwhile_\n\n\n\n\nxiii.\ndef\n\n\n\n\nxiv.\nif\n\n\n\n\nxv.\nelif\n\n\n\n\nxvi.\nelse\n\n\n\n\nxvii.\nreturn\n\n\n\n\nxviii.\nNone\n\n\n\n\nxix.\nnone\n\n\n\n\nxx.\nNoneType\n\n\n\n\nxxi.\nnone_type\n\n\n\n\nxxii.\nnone-type",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Syed Fahad Sultan ÿ≥€åÿØ ŸÅ€ÅÿØ ÿ≥ŸÑÿ∑ÿßŸÜ \nPronunciation: Saiyyudh Fahad Sool-tahn\nJust call me ‚ÄúDr.¬†Sultan‚Äù (click on the speaker for a short audio clip: üîà)\n\n\n\n\n\nI am originally from Lahore, Pakistan and joined Furman University in Fall 2022 after earning my Ph.D.¬†in Computer Science from State University of New York at Stony Brook.\n\n\n\n\n\nFresh out of college, I worked as a professional video game developer for a startup that later got acquired by the Japanese gaming giant DeNA. During this time, I was part of the team that built TapFish, the top-grossing game worldwide, for two weeks in 2011, on both the App Store and Google Play.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVideo games development\n\n\n\nUrban Sensing\n\n\n\nComputational Neuroscience\n\n\n\n\n\n\n\n\nI then went on to work at Technology for People Initiative, an applied research lab in my where I mined social media and cell phone data for proxies of socio-economic indicators that allowed more inclusive policy-making for marginalized communities. During these years, I also dabbled in data journalism and helped organize a boot camp on using data for journalists with the support of the International Center for Journalists (ICFJ) and the Knight Foundation.\n\nIn 2015, I moved to Mecca, Saudi Arabia to work for the GIS Innovation Center (now Wadi Makkah). There I worked on innovative urban sensing techniques for better crowd control during the annual pilgrimage to the city, the largest human gathering in the world every year.\nDuring my PhD, I worked at the intersection of computational neuroscience, bioinformatics and machine learning. My work focused on identifying neurological and genetic biomarkers linking type-2 diabetes with cognitive disorders such as Alzheimer‚Äôs and other dementias.\nI live in Travelers Rest with my wife and cat.\n\n\nOffice: Riley Hall 200-D\nEmail: fahad.sultan@furman.edu\nI have an Open door policy. I am in my office during work hours most weekdays and my door is only closed if I am in a class or in a meeting. So please drop by.\nYou can also schedule a meeting using this link if you want to absolutely make sure that I am available.\n\n\n\n\n\n\nCourse website: https://fahadsultan.com/csc223\nThe Syllabus is available on the course website. In particular, please make sure to read the Grading, Academic Integrity and Textbook and other Resources sections carefully.\nAll of the course content will be posted on this website.\nImportant announcements will be made on both the course website homepage and in class.\nYou are to submit assignments and exams on the course Moodle page. I will also upload all of your grades there.\n\n\n\nDeclarative knowledge is knowledge about facts. It is knowledge that answers the ‚ÄúWhat is‚Äù questions. Most courses outside Computer Science are about declarative knowledge.\nIn contrast, Imperative knowledge is knowledge about how to do things. It is knowledge that answers the ‚ÄúHow to‚Äù questions.\nWhile we will spend a non-trivial amount of time in this course on declarative knowledge, the overwhelming majority of this course will focus on imperative knowledge. Your grade in this course will be determined by your ability to apply declarative and more importantly imperative knowledge to solve problems.\n\nResearch shows that there is only one way to acquire imperative knowledge: Practice, Practice, Practice !. Practice combined with feedback is the only way to achieve mastery.\nIn this course, you will be given ample opportunities to practice along with regular feedback.\n\n\n\nApproach assignments purely as opportunities to learn, prepare for exams and to prepare for your career.\n\nIt is not worth cheating on assignments. Just come talk to me if you are struggling with an assignment. I will literally just tell you the answer.\nOn assignments, expect near maximal flexibility from me. Every assignment will be due 10 days calendar after it is posted.\nYou can schedule a time to get your assignments graded using this link.\nWritten Assignments:\nWritten assignments are to help you build a deeper understanding of algorithms and math covered in class.\nThese could simply be math problems or involve tracing algorithms and dry-runs.\nBoth handwritten or typed submissions are acceptable. Submissions, as always, on Moodle.\nProgramming Assignments:\nProgramming assignments are going to be posted at the start of the lab session each week and will be due in 10 days, unless otherwise specified.\nAll Programming assignments will be graded through an in-person code review. You are to give a walkthrough of your code and be able to answer questions about it.\nDuring these code review, you will be given feedback on how to improve your code and avoid common mistakes.\nYou should expect questions in the exams similar to assignments.\n\n\n\nI have created 10 graded items under class participation on Moodle. In class, you will be asked to answer a question or solve a problem. You will be graded on the basis of your participation. It is your responsibility to make sure you have 10 points by the end of the semester.\nThere are 10 graded items under class participation on Moodle. In class, you will be asked to answer a question or solve a problem. You will be graded on the basis of your participation. It is your responsibility to make sure you have 10 points by the end of the semester.\n\\[\\frac{24~\\text{students} \\times 10~\\text{points needed by each student}}{15~\\text{weeks} \\times 2~\\text{classes per week}} = 8~\\text{points given out class, on average}\\]\nI will give out class participation points in every class class for answering or asking a question.\nGiven the glut of information accessible online and otherwise in this day and age, meaningful interactions with your peers and teachers is essentially why you are paying your college tuition.\nPlease come to class, labs and office hours\nPlease ask questions during class\nPlease answer questions and participate in discussions during class\n\n\n\nThere will be three exams in the course, including the final. The final exam will be cumulative. Exams constitute 60% of your course grade.\nAll exams will be on computer, with a large programming component. Questions will be posted on Moodle and you will have to submit your solutions on Moodle, just like assignments.\nYou will be evaluated on your ability to apply knowledge to new problems and not just on your ability to retain and recall information.\nThe exams, more than the assignments, are going to determine your grade.\nAll exams are going to be cumulative, with focus on the topics covered since last exam.\nDiligent work on the homework and assignments will be rewarded here.\n\n\n\nEverything is tentative and subject to change\n\nThis is my first teaching this course. Any and all feedback is welcome!\nI have created an anonymous feedback poll on Moodle. Please use this to anonymously share any feedback.\nShare any changes you want me to make in the course, at any point in the semester. You can submit multiple times over the span of the semester.\nThink of it as a Complaints Box for the course.\n\n\n\n\nThe course is called Data Structures & Algorithms. In my opinion, a more appropriate name for the course would have been Complexities, Abstractions and Scalability.\nComplexity is the primary challenge we will be dealing with in this course. Abstractions are going to be our primary tool to deal with complexity. Scalability is the primary goal in this course i.e.¬†to write code that can handle the data we have today and the data we expect to have in the future.\n\nIn the world of software development, lines of code (LOC) are often used as a metric to measure the size and complexity of a codebase. The more lines of code a project has, the larger and more intricate it is likely to be.\nHow many millions of lines of code does it take to make the modern program, web service, car, or airplane possible? The figure below sheds some light on this question.\n\n\n\nThe range is extraordinary: the average iPhone app has less than 50,000 lines of code, while Google‚Äôs entire code base is two billion lines for all services. The code needed for fighter jets, popular video game engines, and even the Large Hadron Collider falls somewhere in between the two. It‚Äôs been said that the modern smartphone has more lines of code than a passenger jet ‚Äì and that the code for a typical car has 100 million lines of code.\nIn fact, the lines of code for the Apollo 11 moon lander totaled just 145,000 ‚Äì and the code for the Space Shuttle was about the same.\nIt‚Äôs more than what was needed to run old technologies like the Space Shuttle, a pacemaker, or even the game engine of Quake 3 ‚Äì but it‚Äôs not enough to be the driving force behind the modern software that‚Äôs used in everyday life today.\n\nA million lines of code, if printed, would be about 18,000 pages of text. That‚Äôs 14x the length of War and Peace.\nHow do we then manage this complexity? A large part of the answer lies in Abstractions. Abstractions are ways of dividing a complex system into smaller, more manageable pieces. Each piece is a black box or module that can be used without having to know how it works internally. However, the pieces are not completely opaque. They have a well-defined interface that allows us to use them without knowing how they work internally.\nOn the other hand, the amount of Data that we have to deal with is growing exponentially. Approximately 328.77 million terabytes of data are created each day.\n\nHere‚Äôs a selection of other user-generated internet content stats:\n\n\n\nType of Media\nAmount per Minute\nAmount per Day\n\n\n\n\nEmails sent\n231.4 million\n333.22 billion\n\n\nTexts sent\n16 million\n24.04 billion\n\n\nGoogle searches\n5.9 million\n8.5 billion\n\n\nSnaps shared on Snapchat\n2.43 million\n3.5 billion\n\n\nPieces of content shared on Facebook\n1.7 million\n2.45 billion\n\n\nSwipes on Tinder\n1.1 million\n1.58 billion\n\n\nHours streamed\n1 million\n1.44 billion\n\n\nUSD spent on Amazon\n443,000\n637.92 million\n\n\nUSD sent on Venmo\n437,600\n630.14 million\n\n\nTweets shared on Twitter\n347,200\n499.97 million\n\n\nHours spent in Zoom meetings\n104,600\n150.62 million\n\n\nUSD spent on DoorDash\n76,400\n110.02 million\n\n\n\nFor the software engineer this means writing code that can not only handle the data we have today, but also data that we expect to have in the future. In other words, we need to write code that is scalable.\n\n\n\nA LOT of problems in computer science can be ‚Äòreduced‚Äô to a very small set of fundamental problems.\nIn this course, we are going to focus on the six of such fundamental problems.\n\nSearch : Given a set of data, find a particular element in the set\nSort : Given a set of data, arrange the elements in a particular order\n\n3-6. Create, Read, Update, Delete (CRUD)\n\n\nWe are concerned with the process of collecting information in a computer‚Äôs memory, in such a way that the information can subsequently be recovered as quickly as possible.\n\nIn this course, we are going to focus on the simplest form of search: searching for a single element in a set of data i.e.¬† how to find the data that has been stored with a given identification. For example, in a numerical application we might want to find \\(f(x)\\), given \\(x\\) and a table of the values of \\(f\\); in a nonnumerical application, we might want to find the English translation of a given Russian word.\nIn general, we shall suppose that a set of \\(N\\) records has been stored, and the problem is to locate the appropriate one. As in the case of sorting, we assume that each record includes a special field called its key; this terminology is especially appropriate, because many people spend a great deal of time every day searching for their keys. We generally require the \\(N\\) keys to be distinct, so that each key uniquely identifies its record. Algorithms for searching are presented with a so-called argument, \\(q\\), and the problem is to find which record has \\(q\\) as its key.\nAfter the search is complete, two possibilities can arise:\n\nEither the search was successful, having located the unique record containing \\(q\\); or\nIt was unsuccessful, having determined that \\(q\\) is nowhere to be found.\n\nFormally, the search problem is defined as follows:\n\nProblem: \\(\\textbf{Search}\\)\nInput: A set of \\(n\\) keys \\(S\\), and a query key \\(q\\).\nRequired Output: The location of \\(q\\) in \\(S\\), if present, else \\(-1\\).\n\nSearching is the most time-consuming part of many programs, and the substitution of a good search method for a bad one often leads to a substantial increase in speed. In fact we can often arrange the data or the data structure so that searching is eliminated entirely, by ensuring that we always know just where to find the information we need.\nEfficient algorithms for searching turn out to be quite important in practice.\n\n\n\nTypical computer science students study the basic sorting algorithms at least three times before they graduate: first in introductory programming, then in data structures, and finally in an advanced algorithms course.\n\nWhy is sorting worth so much attention? There are several reasons:\n\nSorting is the basic building block that many other algorithms are built around. By understanding sorting, we obtain an amazing amount of power to solve other problems.\nMost of the interesting ideas used in the design of algorithms appear in the context of sorting, such as divide-and-conquer, data structures, and randomized algorithms.\nComputers have historically spent more time sorting than doing anything else. Research shows that a quarter of all computer cycles were spent sorting data [Knu98]. Sorting remains the most ubiquitous combinatorial algorithm problem in practice.\nSorting is the most thoroughly studied problem in computer science. Literally dozens of different algorithms are known, most of which possess some particular advantage over all other algorithms in certain situations.\n\nFormally, the sorting problem is defined as follows:\n\nProblem: \\(\\textbf{Sorting}\\)\nInput: A sequence of \\(n\\) numbers \\(a_1, a_2, \\dots, a_n\\).\nRequired Output: A permutation (reordering) \\(a_1', a_2', \\dots, a_n'\\) of the input sequence such that \\(a_1' \\leq a_2' \\leq \\dots \\leq a_n'\\).\n\nIn this course, we will discuss sorting in reasonable detail, stressing how sorting can be applied to solving other problems. We will also also sorting as a way to introduce paradigms of algorithm design and analysis.\n\n\n\nCreate: Adding a record to a database, inserting a node into a linked list, and inserting an element into a priority queue are all examples of the insert problem. Other names of this problem include: Insert, Add, Post\n\nRead: Reading or accessing data is the most fundamental problem in computer science. Other names of this problem include: Access, Get, Fetch, Retrieve\nUpdate: For each of the following problems, we are given a set of N records, each record containing a key and some associated data, and we are given a particular key K. The problem is to modify the record containing K in some way. Other names of this problem include: Modify, Edit, Patch\nDelete: Deleting a record from a database, deleting a node from a linked list, and deleting an element from a priority queue are all examples of the delete problem. Other names of this problem include: Remove, Drop\n\n\n\n\n\nIn this course, we will also study non-linear data structures.\nNon-linear data structures are those in which each data element can connect to more than two other data elements.\nExamples of non-linear data structures include trees and graphs.\nTrees are a special type of graph, and have a hierarchical structure. Trees are used to represent the hierarchical relationships between data elements.\nExamples of applications of trees in computer science include the representation of file systems and the structure of many data formats such as JSON, XML and HTML.\n\n   \n\nGraphs are used to represent relationships between data elements that are not hierarchical.\nExamples of applications of graphs in computer science include the representation of social networks, the representation of the internet, and the representation of the structure of a computer network.\n\n\n\n\n\n\n\nThe P vs.¬†NP problem is one of the seven Millennium Prize Problems. It asks whether every problem whose solution can be quickly verified by a computer can also be quickly solved by a computer.\n\n\n\nThe P vs.¬†NP problem is one of the most important unsolved problems in computer science. It is also one of the most famous problems in computer science.\nThe P vs.¬†NP problem is important because it has many practical implications. If P = NP, then many problems that are currently thought to be hard would become easy. For example, many problems in cryptography would become easy to solve.\n\n\n\nThe P problems are the problems that can be solved in polynomial time.\nThe NP problems are the problems that can be verified in polynomial time but as of yet, cannot be solved in polynomial time.\n\n\nThe traveling salesman problem is a problem in combinatorial optimization. It asks for the shortest possible route that visits each city exactly once and returns to the starting city.\n\n\n\nThe traveling salesman problem is one of the most important problems in computer science. It is used in many applications, such as vehicle routing, logistics, and manufacturing.\nOther famous NP-complete problems include the Traveling Salesman Problem, the Knapsack Problem, and the Graph Coloring Problem.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#about-the-course",
    "href": "intro.html#about-the-course",
    "title": "Introduction",
    "section": "",
    "text": "Course website: https://fahadsultan.com/csc223\nThe Syllabus is available on the course website. In particular, please make sure to read the Grading, Academic Integrity and Textbook and other Resources sections carefully.\nAll of the course content will be posted on this website.\nImportant announcements will be made on both the course website homepage and in class.\nYou are to submit assignments and exams on the course Moodle page. I will also upload all of your grades there.\n\n\n\nDeclarative knowledge is knowledge about facts. It is knowledge that answers the ‚ÄúWhat is‚Äù questions. Most courses outside Computer Science are about declarative knowledge.\nIn contrast, Imperative knowledge is knowledge about how to do things. It is knowledge that answers the ‚ÄúHow to‚Äù questions.\nWhile we will spend a non-trivial amount of time in this course on declarative knowledge, the overwhelming majority of this course will focus on imperative knowledge. Your grade in this course will be determined by your ability to apply declarative and more importantly imperative knowledge to solve problems.\n\nResearch shows that there is only one way to acquire imperative knowledge: Practice, Practice, Practice !. Practice combined with feedback is the only way to achieve mastery.\nIn this course, you will be given ample opportunities to practice along with regular feedback.\n\n\n\nApproach assignments purely as opportunities to learn, prepare for exams and to prepare for your career.\n\nIt is not worth cheating on assignments. Just come talk to me if you are struggling with an assignment. I will literally just tell you the answer.\nOn assignments, expect near maximal flexibility from me. Every assignment will be due 10 days calendar after it is posted.\nYou can schedule a time to get your assignments graded using this link.\nWritten Assignments:\nWritten assignments are to help you build a deeper understanding of algorithms and math covered in class.\nThese could simply be math problems or involve tracing algorithms and dry-runs.\nBoth handwritten or typed submissions are acceptable. Submissions, as always, on Moodle.\nProgramming Assignments:\nProgramming assignments are going to be posted at the start of the lab session each week and will be due in 10 days, unless otherwise specified.\nAll Programming assignments will be graded through an in-person code review. You are to give a walkthrough of your code and be able to answer questions about it.\nDuring these code review, you will be given feedback on how to improve your code and avoid common mistakes.\nYou should expect questions in the exams similar to assignments.\n\n\n\nI have created 10 graded items under class participation on Moodle. In class, you will be asked to answer a question or solve a problem. You will be graded on the basis of your participation. It is your responsibility to make sure you have 10 points by the end of the semester.\nThere are 10 graded items under class participation on Moodle. In class, you will be asked to answer a question or solve a problem. You will be graded on the basis of your participation. It is your responsibility to make sure you have 10 points by the end of the semester.\n\\[\\frac{24~\\text{students} \\times 10~\\text{points needed by each student}}{15~\\text{weeks} \\times 2~\\text{classes per week}} = 8~\\text{points given out class, on average}\\]\nI will give out class participation points in every class class for answering or asking a question.\nGiven the glut of information accessible online and otherwise in this day and age, meaningful interactions with your peers and teachers is essentially why you are paying your college tuition.\nPlease come to class, labs and office hours\nPlease ask questions during class\nPlease answer questions and participate in discussions during class\n\n\n\nThere will be three exams in the course, including the final. The final exam will be cumulative. Exams constitute 60% of your course grade.\nAll exams will be on computer, with a large programming component. Questions will be posted on Moodle and you will have to submit your solutions on Moodle, just like assignments.\nYou will be evaluated on your ability to apply knowledge to new problems and not just on your ability to retain and recall information.\nThe exams, more than the assignments, are going to determine your grade.\nAll exams are going to be cumulative, with focus on the topics covered since last exam.\nDiligent work on the homework and assignments will be rewarded here.\n\n\n\nEverything is tentative and subject to change\n\nThis is my first teaching this course. Any and all feedback is welcome!\nI have created an anonymous feedback poll on Moodle. Please use this to anonymously share any feedback.\nShare any changes you want me to make in the course, at any point in the semester. You can submit multiple times over the span of the semester.\nThink of it as a Complaints Box for the course.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#data-structures-algorithms-complexity-abstraction-and-scalability",
    "href": "intro.html#data-structures-algorithms-complexity-abstraction-and-scalability",
    "title": "Introduction",
    "section": "",
    "text": "The course is called Data Structures & Algorithms. In my opinion, a more appropriate name for the course would have been Complexities, Abstractions and Scalability.\nComplexity is the primary challenge we will be dealing with in this course. Abstractions are going to be our primary tool to deal with complexity. Scalability is the primary goal in this course i.e.¬†to write code that can handle the data we have today and the data we expect to have in the future.\n\nIn the world of software development, lines of code (LOC) are often used as a metric to measure the size and complexity of a codebase. The more lines of code a project has, the larger and more intricate it is likely to be.\nHow many millions of lines of code does it take to make the modern program, web service, car, or airplane possible? The figure below sheds some light on this question.\n\n\n\nThe range is extraordinary: the average iPhone app has less than 50,000 lines of code, while Google‚Äôs entire code base is two billion lines for all services. The code needed for fighter jets, popular video game engines, and even the Large Hadron Collider falls somewhere in between the two. It‚Äôs been said that the modern smartphone has more lines of code than a passenger jet ‚Äì and that the code for a typical car has 100 million lines of code.\nIn fact, the lines of code for the Apollo 11 moon lander totaled just 145,000 ‚Äì and the code for the Space Shuttle was about the same.\nIt‚Äôs more than what was needed to run old technologies like the Space Shuttle, a pacemaker, or even the game engine of Quake 3 ‚Äì but it‚Äôs not enough to be the driving force behind the modern software that‚Äôs used in everyday life today.\n\nA million lines of code, if printed, would be about 18,000 pages of text. That‚Äôs 14x the length of War and Peace.\nHow do we then manage this complexity? A large part of the answer lies in Abstractions. Abstractions are ways of dividing a complex system into smaller, more manageable pieces. Each piece is a black box or module that can be used without having to know how it works internally. However, the pieces are not completely opaque. They have a well-defined interface that allows us to use them without knowing how they work internally.\nOn the other hand, the amount of Data that we have to deal with is growing exponentially. Approximately 328.77 million terabytes of data are created each day.\n\nHere‚Äôs a selection of other user-generated internet content stats:\n\n\n\nType of Media\nAmount per Minute\nAmount per Day\n\n\n\n\nEmails sent\n231.4 million\n333.22 billion\n\n\nTexts sent\n16 million\n24.04 billion\n\n\nGoogle searches\n5.9 million\n8.5 billion\n\n\nSnaps shared on Snapchat\n2.43 million\n3.5 billion\n\n\nPieces of content shared on Facebook\n1.7 million\n2.45 billion\n\n\nSwipes on Tinder\n1.1 million\n1.58 billion\n\n\nHours streamed\n1 million\n1.44 billion\n\n\nUSD spent on Amazon\n443,000\n637.92 million\n\n\nUSD sent on Venmo\n437,600\n630.14 million\n\n\nTweets shared on Twitter\n347,200\n499.97 million\n\n\nHours spent in Zoom meetings\n104,600\n150.62 million\n\n\nUSD spent on DoorDash\n76,400\n110.02 million\n\n\n\nFor the software engineer this means writing code that can not only handle the data we have today, but also data that we expect to have in the future. In other words, we need to write code that is scalable.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#six-problems-of-interest",
    "href": "intro.html#six-problems-of-interest",
    "title": "Introduction",
    "section": "",
    "text": "A LOT of problems in computer science can be ‚Äòreduced‚Äô to a very small set of fundamental problems.\nIn this course, we are going to focus on the six of such fundamental problems.\n\nSearch : Given a set of data, find a particular element in the set\nSort : Given a set of data, arrange the elements in a particular order\n\n3-6. Create, Read, Update, Delete (CRUD)\n\n\nWe are concerned with the process of collecting information in a computer‚Äôs memory, in such a way that the information can subsequently be recovered as quickly as possible.\n\nIn this course, we are going to focus on the simplest form of search: searching for a single element in a set of data i.e.¬† how to find the data that has been stored with a given identification. For example, in a numerical application we might want to find \\(f(x)\\), given \\(x\\) and a table of the values of \\(f\\); in a nonnumerical application, we might want to find the English translation of a given Russian word.\nIn general, we shall suppose that a set of \\(N\\) records has been stored, and the problem is to locate the appropriate one. As in the case of sorting, we assume that each record includes a special field called its key; this terminology is especially appropriate, because many people spend a great deal of time every day searching for their keys. We generally require the \\(N\\) keys to be distinct, so that each key uniquely identifies its record. Algorithms for searching are presented with a so-called argument, \\(q\\), and the problem is to find which record has \\(q\\) as its key.\nAfter the search is complete, two possibilities can arise:\n\nEither the search was successful, having located the unique record containing \\(q\\); or\nIt was unsuccessful, having determined that \\(q\\) is nowhere to be found.\n\nFormally, the search problem is defined as follows:\n\nProblem: \\(\\textbf{Search}\\)\nInput: A set of \\(n\\) keys \\(S\\), and a query key \\(q\\).\nRequired Output: The location of \\(q\\) in \\(S\\), if present, else \\(-1\\).\n\nSearching is the most time-consuming part of many programs, and the substitution of a good search method for a bad one often leads to a substantial increase in speed. In fact we can often arrange the data or the data structure so that searching is eliminated entirely, by ensuring that we always know just where to find the information we need.\nEfficient algorithms for searching turn out to be quite important in practice.\n\n\n\nTypical computer science students study the basic sorting algorithms at least three times before they graduate: first in introductory programming, then in data structures, and finally in an advanced algorithms course.\n\nWhy is sorting worth so much attention? There are several reasons:\n\nSorting is the basic building block that many other algorithms are built around. By understanding sorting, we obtain an amazing amount of power to solve other problems.\nMost of the interesting ideas used in the design of algorithms appear in the context of sorting, such as divide-and-conquer, data structures, and randomized algorithms.\nComputers have historically spent more time sorting than doing anything else. Research shows that a quarter of all computer cycles were spent sorting data [Knu98]. Sorting remains the most ubiquitous combinatorial algorithm problem in practice.\nSorting is the most thoroughly studied problem in computer science. Literally dozens of different algorithms are known, most of which possess some particular advantage over all other algorithms in certain situations.\n\nFormally, the sorting problem is defined as follows:\n\nProblem: \\(\\textbf{Sorting}\\)\nInput: A sequence of \\(n\\) numbers \\(a_1, a_2, \\dots, a_n\\).\nRequired Output: A permutation (reordering) \\(a_1', a_2', \\dots, a_n'\\) of the input sequence such that \\(a_1' \\leq a_2' \\leq \\dots \\leq a_n'\\).\n\nIn this course, we will discuss sorting in reasonable detail, stressing how sorting can be applied to solving other problems. We will also also sorting as a way to introduce paradigms of algorithm design and analysis.\n\n\n\nCreate: Adding a record to a database, inserting a node into a linked list, and inserting an element into a priority queue are all examples of the insert problem. Other names of this problem include: Insert, Add, Post\n\nRead: Reading or accessing data is the most fundamental problem in computer science. Other names of this problem include: Access, Get, Fetch, Retrieve\nUpdate: For each of the following problems, we are given a set of N records, each record containing a key and some associated data, and we are given a particular key K. The problem is to modify the record containing K in some way. Other names of this problem include: Modify, Edit, Patch\nDelete: Deleting a record from a database, deleting a node from a linked list, and deleting an element from a priority queue are all examples of the delete problem. Other names of this problem include: Remove, Drop",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#non-linear-data-structures",
    "href": "intro.html#non-linear-data-structures",
    "title": "Introduction",
    "section": "",
    "text": "In this course, we will also study non-linear data structures.\nNon-linear data structures are those in which each data element can connect to more than two other data elements.\nExamples of non-linear data structures include trees and graphs.\nTrees are a special type of graph, and have a hierarchical structure. Trees are used to represent the hierarchical relationships between data elements.\nExamples of applications of trees in computer science include the representation of file systems and the structure of many data formats such as JSON, XML and HTML.\n\n   \n\nGraphs are used to represent relationships between data elements that are not hierarchical.\nExamples of applications of graphs in computer science include the representation of social networks, the representation of the internet, and the representation of the structure of a computer network.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "intro.html#p-vs.-np",
    "href": "intro.html#p-vs.-np",
    "title": "Introduction",
    "section": "",
    "text": "The P vs.¬†NP problem is one of the seven Millennium Prize Problems. It asks whether every problem whose solution can be quickly verified by a computer can also be quickly solved by a computer.\n\n\n\nThe P vs.¬†NP problem is one of the most important unsolved problems in computer science. It is also one of the most famous problems in computer science.\nThe P vs.¬†NP problem is important because it has many practical implications. If P = NP, then many problems that are currently thought to be hard would become easy. For example, many problems in cryptography would become easy to solve.\n\n\n\nThe P problems are the problems that can be solved in polynomial time.\nThe NP problems are the problems that can be verified in polynomial time but as of yet, cannot be solved in polynomial time.\n\n\nThe traveling salesman problem is a problem in combinatorial optimization. It asks for the shortest possible route that visits each city exactly once and returns to the starting city.\n\n\n\nThe traveling salesman problem is one of the most important problems in computer science. It is used in many applications, such as vehicle routing, logistics, and manufacturing.\nOther famous NP-complete problems include the Traveling Salesman Problem, the Knapsack Problem, and the Graph Coloring Problem.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "syllabus/grading.html",
    "href": "syllabus/grading.html",
    "title": "Grading",
    "section": "",
    "text": "Component\nPercentage\n\n\n\n\nClass Participation \\(^1\\)\n10%\n\n\nWritten Assignments\n10%\n\n\nLabs / Programming Assignments \\(^2\\)\n20%\n\n\nExam 1\n10%\n\n\nExam 2\n20%\n\n\nFinal (Cumulative)\n30%\n\n\n\n\\(^1\\) Details in Introduction\n\\(^2\\) Labs / Programming assignments will only be graded in-person in my office or in the lab, within 10 calendar days of them being posted.\nUse this link to schedule a time to get your assignments graded.\n\n\n\n(+/- at instructor‚Äôs discretion)\n\n\n\nLetter Grade\nRange\n\n\n\n\nA\n&gt; 90 %\n\n\nB\n80 - 90 %\n\n\nC\n70 - 80 %\n\n\nD\n60 - 70 %\n\n\nF\n&lt; 60 %\n\n\n\n\n\n\nIn order to pass this class, you must 1. Earn \\(\\geq\\) 60% of the total points 2. Attend \\(\\geq\\) 80% of the lectures and labs. 3. Submit \\(\\geq\\) 80% of written and programmming assignments. 4. Take ALL tests and final!\nIn other words, you cannot blow off an entire aspect of the course and pass this class!\nNote that this basic requirement is necessary but not sufficient to pass the class.",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/grading.html#grade-breakdown",
    "href": "syllabus/grading.html#grade-breakdown",
    "title": "Grading",
    "section": "",
    "text": "Component\nPercentage\n\n\n\n\nClass Participation \\(^1\\)\n10%\n\n\nWritten Assignments\n10%\n\n\nLabs / Programming Assignments \\(^2\\)\n20%\n\n\nExam 1\n10%\n\n\nExam 2\n20%\n\n\nFinal (Cumulative)\n30%\n\n\n\n\\(^1\\) Details in Introduction\n\\(^2\\) Labs / Programming assignments will only be graded in-person in my office or in the lab, within 10 calendar days of them being posted.\nUse this link to schedule a time to get your assignments graded.",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/grading.html#grading-scale",
    "href": "syllabus/grading.html#grading-scale",
    "title": "Grading",
    "section": "",
    "text": "(+/- at instructor‚Äôs discretion)\n\n\n\nLetter Grade\nRange\n\n\n\n\nA\n&gt; 90 %\n\n\nB\n80 - 90 %\n\n\nC\n70 - 80 %\n\n\nD\n60 - 70 %\n\n\nF\n&lt; 60 %",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/grading.html#minimum-requirements",
    "href": "syllabus/grading.html#minimum-requirements",
    "title": "Grading",
    "section": "",
    "text": "In order to pass this class, you must 1. Earn \\(\\geq\\) 60% of the total points 2. Attend \\(\\geq\\) 80% of the lectures and labs. 3. Submit \\(\\geq\\) 80% of written and programmming assignments. 4. Take ALL tests and final!\nIn other words, you cannot blow off an entire aspect of the course and pass this class!\nNote that this basic requirement is necessary but not sufficient to pass the class.",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/integrity.html",
    "href": "syllabus/integrity.html",
    "title": "Academic Integrity",
    "section": "",
    "text": "Academic Integrity\nAcademic Integrity standards are important to our Furman community and will be upheld in this class. Students should review the Academic Integrity Pledge and other resources available on the Academic Integrity page on the Furman website. Pay special attention to definitions of cheating, plagiarism, unacceptable collaboration, facilitating misconduct and other types of misrepresentation. All those apply in this course.\nFor programming assignments/homeworks and labs, follow the 50 foot policy in its spirit.\n\nIn this class, the grade penalty for an academic integrity violation is an F for the course. Academic Discipline procedures will be followed through the Office of the Academic Dean.",
    "crumbs": [
      "Academic Integrity"
    ]
  },
  {
    "objectID": "syllabus/about.html",
    "href": "syllabus/about.html",
    "title": "Course Description and Goals",
    "section": "",
    "text": "CSC-122 Data Structures and Algorithms\n\n\n\n\n\nCore course required for all Computer Science majors\nPre-requisite for, among others:\n\nCSC-343 Artificial Intelligence\nCSC-344 Computer Graphics and Image Processing\nCSC-348 Game Design & Development\nCSC-353 Software Engineering\nCSC-346 Operating Systems\nCSC-331 Computer Architecture\n\n\n\n\n\nThis course introduces non-linear data structures (such as hash tables, trees, and graphs) as well as advanced algorithmic paradigms (such as Backtracking, Greedy Algorithms and Dynamic Programming). Students will extensively use version control software and learn about software engineering practices.\n\n\n\n\nUnderstand and implement non-linear data structures\nUnderstand and implement advanced algorithmic paradigms\nUnderstand and apply software engineering practices\nUnderstand and apply version control software",
    "crumbs": [
      "Course Description and Goals"
    ]
  },
  {
    "objectID": "syllabus/about.html#pre-requisites",
    "href": "syllabus/about.html#pre-requisites",
    "title": "Course Description and Goals",
    "section": "",
    "text": "CSC-122 Data Structures and Algorithms",
    "crumbs": [
      "Course Description and Goals"
    ]
  },
  {
    "objectID": "syllabus/about.html#fulfills-requirements",
    "href": "syllabus/about.html#fulfills-requirements",
    "title": "Course Description and Goals",
    "section": "",
    "text": "Core course required for all Computer Science majors\nPre-requisite for, among others:\n\nCSC-343 Artificial Intelligence\nCSC-344 Computer Graphics and Image Processing\nCSC-348 Game Design & Development\nCSC-353 Software Engineering\nCSC-346 Operating Systems\nCSC-331 Computer Architecture",
    "crumbs": [
      "Course Description and Goals"
    ]
  },
  {
    "objectID": "syllabus/about.html#course-description",
    "href": "syllabus/about.html#course-description",
    "title": "Course Description and Goals",
    "section": "",
    "text": "This course introduces non-linear data structures (such as hash tables, trees, and graphs) as well as advanced algorithmic paradigms (such as Backtracking, Greedy Algorithms and Dynamic Programming). Students will extensively use version control software and learn about software engineering practices.",
    "crumbs": [
      "Course Description and Goals"
    ]
  },
  {
    "objectID": "syllabus/about.html#course-goals",
    "href": "syllabus/about.html#course-goals",
    "title": "Course Description and Goals",
    "section": "",
    "text": "Understand and implement non-linear data structures\nUnderstand and implement advanced algorithmic paradigms\nUnderstand and apply software engineering practices\nUnderstand and apply version control software",
    "crumbs": [
      "Course Description and Goals"
    ]
  },
  {
    "objectID": "syllabus/title_9.html",
    "href": "syllabus/title_9.html",
    "title": "Nondiscrimination Policy and Sexual Misconduct",
    "section": "",
    "text": "Nondiscrimination Policy and Sexual Misconduct\nFurman University and its faculty are committed to supporting our students and seeking an environment that is free of bias, discrimination, and harassment. Furman does not unlawfully discriminate on the basis of race, color, national origin, sex, sexual orientation, gender identity, pregnancy, disability, age, religion, veteran status, or any other characteristic or status protected by applicable local, state, or federal law in admission, treatment, or access to, or employment in, its programs and activities.\nIf you have encountered any form of discrimination or harassment, including sexual misconduct (e.g.¬†sexual assault, sexual harassment or gender-based harassment, sexual exploitation or intimidation, stalking, intimate partner violence), we encourage you to report this to the institution. If you wish to report such an incident of misconduct, you may contact Furman‚Äôs Title IX Coordinator, Melissa Nichols (Trone Center, Suite 215; Melissa.nichols@furman.edu; 864.294.2221).\nIf you would like to speak with someone who can advise you but maintain complete confidentiality, you can talk with a counselor, a professional in the Student Health Center or someone in the Office of Spiritual Life. If you speak with a faculty member, understand that as a ‚ÄúResponsible Employee‚Äù of the University, the faculty member MUST report to the University‚Äôs Title IX Coordinator what you share to help ensure that your safety and welfare are being addressed, consistent with the requirements of the law.\nAdditional information about Furman‚Äôs Sexual Misconduct Policy, how to report sexual misconduct and your rights can be found at the Furman Title IX Webpage. You do not have to go through the experience alone.",
    "crumbs": [
      "Nondiscrimination Policy and Sexual Misconduct"
    ]
  },
  {
    "objectID": "syllabus/accomodations.html",
    "href": "syllabus/accomodations.html",
    "title": "Accomodations",
    "section": "",
    "text": "Accomodations\nFurman University recognizes a student with a disability as anyone whose impairment substantially limits one or more major life activity. Students may receive a variety of services including classroom accommodations such as extended time on tests, test proctoring, note-taking assistance and access to assistive technology. However, receipt of reasonable accommodations cannot guarantee success‚Äìall students are responsible for meeting academic standards. Students with a diagnosed disability may be entitled to accommodations under the Americans with Disabilities Act (ADA).\nPlease visit Student Office for Accessibility Resources for more info.",
    "crumbs": [
      "Accomodations"
    ]
  },
  {
    "objectID": "syllabus/academic_success.html",
    "href": "syllabus/academic_success.html",
    "title": "Center for Academic Success",
    "section": "",
    "text": "Center for Academic Success\nPeer Tutors are available free of charge for many classes and may be requested by dropping by CAS (LIB 002) or on the Center for Academic Success website. Tutors are typically recommended by faculty and have performed well in the class. \nThe Writing & Media Lab (WML) is staffed by student Consultants who are trained to help you improve your writing and multimodal communication skills. The consultation process is non-directive and intended to allow students to maintain ownership of their work. In addition to helping with the nuts and bolts, WML Consultants also support you in developing your own ideas thoughtfully and critically, whether you‚Äôre writing an essay or planning a video or other multimedia project. You may drop into the WML during its regular hours (LIB 002; 9 AM to 10 PM) or visit the **Writing and Media Lab website to make an appointment online.\nProfessional Academic Assistance Staff in CAS can provide students assistance with time management, study skills, and organizational skills.\nThe Writing and ESL Specialist provides professional writing support as well as support for students whose primary language is not English.",
    "crumbs": [
      "Center for Academic Success"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "CSC-122: Introduction to Computer Science"
  },
  {
    "objectID": "syllabus.html#pre-requisites",
    "href": "syllabus.html#pre-requisites",
    "title": "Syllabus",
    "section": "",
    "text": "CSC-122: Introduction to Computer Science"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Testing",
    "section": "",
    "text": "Testing"
  }
]