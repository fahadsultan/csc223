[
  {
    "objectID": "calendar.html",
    "href": "calendar.html",
    "title": "Calendar",
    "section": "",
    "text": "Calendar\n\n\n\n\n\n\nCaution\n\n\n\nPlease note that this is a tentative plan and is subject to change.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\nTOPIC\nREADING\nMEETING 1\nMEETING 2\nWRITTEN ASSIGNMENT\nPROGRAMMING ASSIGNMENT\n\n\n\n\n1\nGit\n\n\n\n\n\n\n\n2\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n7\n\n\n\n\n\n\n\n\n8\n\n\n\n\n\n\n\n\n9\n\n\n\n\n\n\n\n\n10\n\n\n\n\n\n\n\n\n11\n\n\n\n\n\n\n\n\n12\n\n\n\n\n\n\n\n\n13\n\n\n\n\n\n\n\n\n14\n\n\n\n\n\n\n\n\n15\n\n\n\n\n\n\n\n\n16"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever."
  },
  {
    "objectID": "syllabus/textbook.html",
    "href": "syllabus/textbook.html",
    "title": "Textbooks & Other Resources",
    "section": "",
    "text": "Caution\n\n\n\nPlease note that the following textbooks are NOT strictly required for this course, but they are strongly recommended for those prefer to have a physical reference.",
    "crumbs": [
      "Textbooks & Other Resources"
    ]
  },
  {
    "objectID": "syllabus/textbook.html#other-resources",
    "href": "syllabus/textbook.html#other-resources",
    "title": "Textbooks & Other Resources",
    "section": "Other Resources",
    "text": "Other Resources\n\nVisualization and Animation\n\nVisuAlgo (website)\nSorting Algorithms Animations (website)\nData Structure Visualizations (website)\nSorting Algorithms Visualizations, Clément Mihailescu (YouTube video)\nSorting Algorithms Visualizations, Mike Bostock (website)\n\n\n\nBooks\n\nComposing Programs by John DeNero (free, open textbook)\nThink Python by Allen B. Downey (free, open textbook)\n\n\n\nVideo Course\n\nAlgorithms and Data Structures Tutorial - Full Course for Beginners, freeCodeCamp.org (YouTube video)\nData Structures and Algorithms in Python - Full Course for Beginners, freeCodeCamp.org (YouTube video)\nAlgorithms by Jeff Erickson (free, open textbook)\n\n\n\nWebsites\n\nData Structures and Algorithms, Geeks for Geeks (website)\nBig-O Cheat Sheet (website)\n\n\n\nProblems for Practice\n\nProject Euler (website)\nLeetCode (website)\nProject Rosalind (website)",
    "crumbs": [
      "Textbooks & Other Resources"
    ]
  },
  {
    "objectID": "syllabus/textbook.html#other-advanced-textbooks",
    "href": "syllabus/textbook.html#other-advanced-textbooks",
    "title": "Textbooks & Other Resources",
    "section": "Other (Advanced) Textbooks",
    "text": "Other (Advanced) Textbooks\n\nAlgorithms by Sanjoy Dasgupta, Christos Papadimitriou, and Umesh Vazirani\nStructure and Interpretation of Computer Programs by Harold Abelson and Gerald Jay Sussman\nAlgorithm Design Manual by Steven Skiena\nAlgorithm Design by Jon Kleinberg and Eva Tardos",
    "crumbs": [
      "Textbooks & Other Resources"
    ]
  },
  {
    "objectID": "syllabus/pathways.html",
    "href": "syllabus/pathways.html",
    "title": "Purposeful Pathways",
    "section": "",
    "text": "During the semester, you must attend two events that are designated as Purposeful Pathways events for Computer Science.\nA list of such events will be provided to you, and you may ask for approval of additional events not on the list.\nYou are required to write a 1-2 page reflection on each event.\nEach reflection must include:\nIf you declared your major AFTER August 1, 2023, then, as a graduation requirement for Computer Science or Information Technology, you are required to attend at least two events from each of the three categories:\nAND\nRequired to attend and reflect upon two activities for each of the following courses:\nImplementation of this requirement will be through standardized, graded requirements in individual courses.\nThis will allow IT majors will ultimately participate in a minimum of six activities, while CS majors will ultimately participate in 10, during their time at Furman.\nSchedule of Experiences for this semester:"
  },
  {
    "objectID": "syllabus/pathways.html#january",
    "href": "syllabus/pathways.html#january",
    "title": "Purposeful Pathways",
    "section": "January",
    "text": "January\n\nCapgemini Trip – Career Exploration\nFriday, January 12, 12:30-9:00pm\nColumbia, SC\nEarly Access: My Experience in the Video Game Industry – Networking & Employer Engagement Speaker: Noelle Warner ’19\nWednesday, January 17, 6:00-7:00pm\nPatrick Lecture Hall (Plyler 126)\nCareer Skills for CS, Math, and Data Analytics: Pursuing Professional Opportunities – Professional Preparation\nWednesday, January 24, 5:30-6:30pm\nJennifer McHan Good Collab (Riley 106)\n2024 Summer Internship Fellowship Info Sessions – Career Exploration\nJanuary 17, 18, 23, 24: Wednesday, January 17 from 12:30-1:30pm (Watkins Room North)\nWednesday, January 24 from 12:30-1:30pm (Watkins Room North)\nRegister Here\nCothran Center Conversations Dinner – Professional Preparation Speakers: Franklin Ellis and Buket Oztas\nThursday, January 25, 5:30-7:00pm\nHartness Pavilion\nSign up here: https://furman.az1.qualtrics.com/jfe/form/SV_9NZLIL7WLvYX6aa"
  },
  {
    "objectID": "syllabus/pathways.html#february",
    "href": "syllabus/pathways.html#february",
    "title": "Purposeful Pathways",
    "section": "February",
    "text": "February\n\nFunded Opportunities and Experiences in Computer Science – Career Exploration\nWednesday, February 28, 12:30-1:30pm\nJennifer McHan Good Collab (Riley 106)\nDinner with a Din: Navigating Your Black Identity in the Workplace – Networking & Employer Engagement\nWednesday, February 28, 6:00 – 8:00pm\nGreenville Restaurant TBD\n(Limited to 8 students; pre-registration required on Handshake)"
  },
  {
    "objectID": "syllabus/pathways.html#march",
    "href": "syllabus/pathways.html#march",
    "title": "Purposeful Pathways",
    "section": "March",
    "text": "March\n\nHow Good is Furman University? A Data Scientist Looks at College Rankings – Professional Preparation Data Science Visiting Scholar Lecture Series (General audience lecture)\nSpeaker: Dr. Steven Skiena, Stony Brook University\nThursday, March 14, 6:00-7:00pm\nPatrick Lecture Hall (Plyler 126)\n\n(Informal reception (with food!) at 5:30pm) \n\nWord and Graph Embeddings for Machine Learning – Professional Preparation Data Science Visiting Scholar Lecture Series (major-specific lecture)\nSpeaker: Dr. Steven Skiena, Stony Brook University\nFriday, March 15, 12:30-1:30\nJennifer McHan Good Collab (Riley 106)\n\n(Free Lunch will be provided. RSVP here )\n\nLeveraging CliftonStrengths for CS and IT Interviews will be held in the Good Collab (Riley 106) on March 20th at 12:30 PM. A short description of the event is as follows:\n\nWorried about upcoming interviews? Interested in developing strategies to overcome mental blocks and manage stress? This workshop will equip you with the language and tools to present your best self through the lens of your unique talent DNA - your top 5 CliftonStrengths. By understanding how you most naturally absorb and analyze information through your strengths, you can develop a specialized toolkit to handle new situations, think through tough problems, and convey the behaviors that make you a unique and qualified applicant. An understanding of what you are most naturally good at will allow you to leverage those innate talents in any situation thrown your way, including the search for a job, internship, or graduate program. Please review your top 5 CliftonStrengths for Students report at https://login.gallup.com/ in advance of this workshop. This workshop is open to any major who has previously completed the Gallup CliftonStrengths assessment.\nPlease note that you must have access to your CliftonStrengths for Students report, taken during your 1st and 2nd year Pathways course.\nLunch will be provided. If you plan to attend, please RSVP here ASAP: https://calendly.com/proftreu/cliftonstrengths-for-cs-and-it"
  },
  {
    "objectID": "syllabus/pathways.html#april",
    "href": "syllabus/pathways.html#april",
    "title": "Purposeful Pathways",
    "section": "April",
    "text": "April\n\nPaladin Pitch Competition – Professional Preparation\nThursday, April 11, 4:00 – 5:30pm (Watkins Room, Trone Student Center)\nFor additional information, click here\nFurman Engaged – Networking & Employer Engagement Friday, April 12, 9:00am-4:30pm Furman Campus\nComputer Science Powerpoint Night – Professional Preparation Tuesday, April 16, 6-7:30pm Jennifer McHan Good Collab (Riley 106)"
  },
  {
    "objectID": "syllabus/pathways.html#individually-scheduled-experiences",
    "href": "syllabus/pathways.html#individually-scheduled-experiences",
    "title": "Purposeful Pathways",
    "section": "Individually Scheduled Experiences",
    "text": "Individually Scheduled Experiences\nWith prior approval of the professor, activities such as informational interviews (Professional Preparation) and career assessments (Career Exploration) scheduled by the student directly may also qualify for the Purposeful Pathways requirement.\nPLEASE NOTE THAT ADDITIONAL ACTIVITIES MAY BE ADDED TO THIS SCHEDULE THROUGHOUT THE SEMESTER.\nCHECK IT REGULARLY."
  },
  {
    "objectID": "syllabus/appointment.html",
    "href": "syllabus/appointment.html",
    "title": "Appointment",
    "section": "",
    "text": "Appointment"
  },
  {
    "objectID": "syllabus/github.html",
    "href": "syllabus/github.html",
    "title": "Github Classroom",
    "section": "",
    "text": "Link to CSC-223 Github Classroom"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSC-223: Advanced Data Structures and Software Development (Fall 2024)",
    "section": "",
    "text": "Hi! Welcome to the CSC-223 Advanced Data Structures & Software Development course website 👋🏾\nI am excited to talk code 💻, algorithms 🔄 🔀 and software engineering 📊 in this course with you!\nFrom the navigation bar on the top ☝🏾 and sidebar on the left 👈🏾, you should be able to navigate to any topic relevant to the course. If that does not help, there should also be a search icon 🔍 in the top left corner ↗️\n👇🏾 Below, you can find important links and important announcements.\n\n\n\n\n\n\nOpen-Door Policy\n\n\n\nI have an Open-Door Policy and am in my office (Riley Hall 200-D) between 9 AM - 5 PM most weekdays. Please drop by with your questions or just to say hi!\nAlternatively, send me an email or schedule an appointment\n\n\n\n\n\n\n\n\nOpen-Door Policy\n\n\n\nCourse page on Moodle; used mostly for submitting assignments and uploading grades",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "basics/controls/controls.html",
    "href": "basics/controls/controls.html",
    "title": "Control Flow",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow"
    ]
  },
  {
    "objectID": "basics/controls/controls.html#flow-directionality-of-execution",
    "href": "basics/controls/controls.html#flow-directionality-of-execution",
    "title": "Control Flow",
    "section": "Flow / Directionality of Execution",
    "text": "Flow / Directionality of Execution\n\nPrograms (multiple lines of code) run each line of code sequentially top to bottom\nStatements (single line of code) run right to left\n\nExpression on right hand side of assignment/boolean operator is executed first\nThen, left hand expression of assignment operator is executed\n\nExpressions ( &lt; 1 line of code) run as per rules of precedence; for operators of equal precedence, expressions run left to right.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow"
    ]
  },
  {
    "objectID": "basics/operations/file_io.html",
    "href": "basics/operations/file_io.html",
    "title": "Files",
    "section": "",
    "text": "Standard IO is the default IO for a program. It is the IO that is used when no other IO is specified.\nStandard Input is the default input for a program. It is the input that is used when no other input is specified. In most cases, Standard Input is the keyboard.\nStandard Output is the default output for a program. It is the output that is used when no other output is specified. In most cases, Standard Output is the screen.\nStandard Error is the default error output for a program. It is the error output that is used when no other error output is specified. In most cases, Standard Error is the screen.\nIn Python, Standard Input is represented by the stdin object, Standard Output is represented by the stdout object, and Standard Error is represented by the stderr object.\nTo use Standard Input, Standard Output, or Standard Error, you must import the sys module.\nimport sys\nYou can redirect Standard Input, Standard Output, and Standard Error to a file or another program by using the &lt;, &gt;, and | operators. For example, to redirect Standard Input to a file, you would use the &lt; operator.\npython3 my_program.py &lt; input.txt\nTo redirect Standard Output to a file, you would use the &gt; operator.\npython3 my_program.py &gt; output.txt\nTo redirect Standard Error to a file, you would use the 2&gt; operator.\npython3 my_program.py 2&gt; error.txt\n\n\nThe input function is used to get input from the user. It takes one argument, a string, which is the prompt that is displayed to the user. The input function returns a string.\nname = input(\"What is your name? \")\n\n\n\nThe print function is used to display output to the user. It takes one or more arguments, which are the values to be displayed. The print function returns None.\nprint(\"Hello, World!\")\n\n\n\n\n\n\n\nWhile a program is running, its data is stored in Random Access Memory (RAM).\nRAM is Fast and Inexpensive, but it is also Volatile\n\nVolatile memory means that when the program ends, or the computer shuts down, data in RAM disappears.\n\nTo make data available the next time you turn on your computer and start your program, you have to write it to a Non-volatile Storage medium, such as the Hard Drive. \n\nData on non-volatile Storage media is stored in named locations on the media called Files.\nBy reading and writing data to files, programs can save information between program runs.\nWorking with files is a lot like working with a Jupyter notebook.\n\nTo use a notebook, you have to open it.\nWhen you’re done, you have to close it.\nWhile the notebook is open, you can either write in it or read from it. \n\n\n\n\n\n\n\nThe key function for working with files in Python is the open() function.\nThe open() function takes two parameters:\n\nfilename (required)\nmode (optional, default value: \"r\")\n\n\n\nf = open(\"words.txt\") \n\n\n\nThere are four primary methods modes for opening a file:\n\n“r” - Read - Default value. Opens a file for reading\n\nerror if the file does not exist\n\n“a” - Append - Opens a file for appending\n\ncreates the file if it does not exist\n\n“w” - Write - Opens a file for writing\n\ncreates the file if it does not exist\n\n“x” - Create - Creates the specified file\n\nreturns an error if the file exists\n\n\n\n\n\n\n\nTo open a file for reading it is enough to specify the name of the file:\n\nf = open(\"countries.txt\")\n\n\nThe code above is the same as:\n\n\nf = open(\"countries.txt\", \"r\")\n\n\nBecause \"r\" for read is the default value for the second input (mode), you do not need to specify it.\nMake sure the file exists, or else you will get a FileNotFoundError error.\n\n\n\n\n\n\nTo open the file, use the built-in open() function.\nThe open() function returns a file object\nFile objects have a read() method for reading the content of the file:\n\n\nf = open(\"countries.txt\", \"r\")\ncontent = f.read()\nprint(content)\n\n\n\nIf you try to read a file that does not exist, you will get a FileNotFoundError\nIf the file is located in a different location, you will have to specify the file path, like this:\n\n\nf = open(\"countries.txt\")\n\n\n#Open a file on a different location:\n\nf = open(\"/Users/fsultan/Downloads/csc121/notebooks/countries.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nFile extensions have to be explicitly specified in the file name, when opening an existing file\n\n\nf = open('countries.txt')\nprint(f.read())\nf.close()\n\n\n\n\n\n\nIt is often not feasible to read large files with simply read\nThis is often because:\n\nThe size of the file can exceed the capacity of RAM\nThe software may have a limit on how much data it can read\n\nTo avoid the software/app from crashing\n\n\n\n\nf = open(\"words.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nBy default the read() method returns the whole text\nHowever, read() takes an input, which lets you specify how many characters to read:\n\n\n# Example\n# Return the first 20 characters of the file:\n\nf = open(\"words.txt\", \"r\")\nprint(f.read(20))\n\n\n\n\n\n\nYou can return one line by using the readline() method:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nprint(line)\n\n\nBy calling readline() two times, you can read the two first lines:\n\n\n# Read two lines of the file \n\nf = open(\"words.txt\", \"r\")\n\nline1 = f.readline()\n\nline2 = f.readline()\n\nline3 = f.readline()\n\nprint(\"Line 1:\", line1)\nprint(\"Line 2:\", line2)\nprint(\"Line 3:\", line3)\n\n\n\n\n\n\nBy looping through the lines of the file, you can read the whole file, line by line:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    line = f.readline()\n    print(line)\nf.close()\n\n\n\n\n\n\nSince contents (lines) of a file are a sequence, we can loop over lines using a for loop with line as a target variable:\n\n\nf = open(\"countries.txt\", \"r\")\nfor line in f:\n    print(line)\n\n\nf = open(\"countries.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    print(line)\n    line = f.readline()\n\n\n\n\n\n\nIt is a strongly recommended to close the file when you are done with it.\nThis clears up memory consumed by contents of the file.\nFile object cannot be used to read, write or append after it has been closed.\n\n\nf = open(\"countries.txt\", \"r\")\nprint(f.readline())\nf.close()\n\nf.readline()\n\n\n\n\n\n\nopen(filename,\"w\") mode “w” - Write - allows writing to a file with name filename\nIf a file with name filename already exists, it overwrites any existing content.\n\nIn other words, existing content gets deleted and new content is added.\n\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Now the newfile.txt exists and this is it's content!\")\nf.close()\n\n\n\n\n\n\nWhen writing to a file, do not forget the newlines: \\n\nWithout newlines \\n, all content would be written to the same line\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Line1\")\nf.write(\"Line2\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"r\")\nprint(f.read())\nf.close()\n\n\n\n\n\n\nopen(filename,\"a\") mode “a” - Append - allows appending to the end of a file with name filename\nIf a file with name filename already exists, it adds new content to the end of the file.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"countries.txt\", \"a\")\nf.write(\"Wakanda\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"a\")\nf.write(\"testing\")\nf.close()\n\n\n\n\n\n\n\nopen(filename,\"x\") mode “x” - eXclusive creation- allows creating a new file with name filename\n\nOnly if a file with that name does not exist\n\nIf a file with name filename already exists, it throws a FileExistsError.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"x\")\nf.write(\"This is a brand new file\")\nf.close()\n\n\n\n\n\n\nIf a file is opened in write mode, you can not read from it\nIf a file is opened in read mode, you can not write to it\n\n\n\n\n\nQuestion 1. Count lines\nWrite a function count_lines that accepts as input a string filename and returns the number of lines in that file\n\ndef count_lines(filename):\n    \n\nprint(count_lines(\"words.txt\"))\nprint(count_lines(\"countries.txt\"))\n\nQuestion 2. Print lines ending with suffix\nWrite a function search_lines that accepts as inputs a string filename and a string suffix and prints all lines that end with suffix\n\ndef search_lines(filename, suffix):\n\n\nsearch_lines(\"countries.txt\", \"land\")\n\nQuestion 3. Write Left Triangle\nWrite a function left_triangle that accepts two inputs: 1. a string variable filename 2. an integer n. The function creates a file named filename and writes to the file a left triangle of height n.\nFor example, filename=\"abc.txt\" and n=5 prints the following:\n*\n**\n***\n****\n*****\nto a file named abc.txt\n\ndef left_triangle(filename, n):\n    \n    return\n\nleft_triangle('t4.txt',  4)\nleft_triangle('t10.txt', 10)\n\n\nQuestion 4. Copy File\nWrite a function copy_file that takes two string inputs: 1. oldfile 2. newfile and copies all the contents of oldfile to newfile.\n\ndef copy_file(oldfile, newfile):\n    \n    return",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Files"
    ]
  },
  {
    "objectID": "basics/operations/file_io.html#standard-io",
    "href": "basics/operations/file_io.html#standard-io",
    "title": "Files",
    "section": "",
    "text": "Standard IO is the default IO for a program. It is the IO that is used when no other IO is specified.\nStandard Input is the default input for a program. It is the input that is used when no other input is specified. In most cases, Standard Input is the keyboard.\nStandard Output is the default output for a program. It is the output that is used when no other output is specified. In most cases, Standard Output is the screen.\nStandard Error is the default error output for a program. It is the error output that is used when no other error output is specified. In most cases, Standard Error is the screen.\nIn Python, Standard Input is represented by the stdin object, Standard Output is represented by the stdout object, and Standard Error is represented by the stderr object.\nTo use Standard Input, Standard Output, or Standard Error, you must import the sys module.\nimport sys\nYou can redirect Standard Input, Standard Output, and Standard Error to a file or another program by using the &lt;, &gt;, and | operators. For example, to redirect Standard Input to a file, you would use the &lt; operator.\npython3 my_program.py &lt; input.txt\nTo redirect Standard Output to a file, you would use the &gt; operator.\npython3 my_program.py &gt; output.txt\nTo redirect Standard Error to a file, you would use the 2&gt; operator.\npython3 my_program.py 2&gt; error.txt\n\n\nThe input function is used to get input from the user. It takes one argument, a string, which is the prompt that is displayed to the user. The input function returns a string.\nname = input(\"What is your name? \")\n\n\n\nThe print function is used to display output to the user. It takes one or more arguments, which are the values to be displayed. The print function returns None.\nprint(\"Hello, World!\")",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Files"
    ]
  },
  {
    "objectID": "basics/operations/file_io.html#file-io",
    "href": "basics/operations/file_io.html#file-io",
    "title": "Files",
    "section": "",
    "text": "While a program is running, its data is stored in Random Access Memory (RAM).\nRAM is Fast and Inexpensive, but it is also Volatile\n\nVolatile memory means that when the program ends, or the computer shuts down, data in RAM disappears.\n\nTo make data available the next time you turn on your computer and start your program, you have to write it to a Non-volatile Storage medium, such as the Hard Drive. \n\nData on non-volatile Storage media is stored in named locations on the media called Files.\nBy reading and writing data to files, programs can save information between program runs.\nWorking with files is a lot like working with a Jupyter notebook.\n\nTo use a notebook, you have to open it.\nWhen you’re done, you have to close it.\nWhile the notebook is open, you can either write in it or read from it. \n\n\n\n\n\n\n\nThe key function for working with files in Python is the open() function.\nThe open() function takes two parameters:\n\nfilename (required)\nmode (optional, default value: \"r\")\n\n\n\nf = open(\"words.txt\") \n\n\n\nThere are four primary methods modes for opening a file:\n\n“r” - Read - Default value. Opens a file for reading\n\nerror if the file does not exist\n\n“a” - Append - Opens a file for appending\n\ncreates the file if it does not exist\n\n“w” - Write - Opens a file for writing\n\ncreates the file if it does not exist\n\n“x” - Create - Creates the specified file\n\nreturns an error if the file exists\n\n\n\n\n\n\n\nTo open a file for reading it is enough to specify the name of the file:\n\nf = open(\"countries.txt\")\n\n\nThe code above is the same as:\n\n\nf = open(\"countries.txt\", \"r\")\n\n\nBecause \"r\" for read is the default value for the second input (mode), you do not need to specify it.\nMake sure the file exists, or else you will get a FileNotFoundError error.\n\n\n\n\n\n\nTo open the file, use the built-in open() function.\nThe open() function returns a file object\nFile objects have a read() method for reading the content of the file:\n\n\nf = open(\"countries.txt\", \"r\")\ncontent = f.read()\nprint(content)\n\n\n\nIf you try to read a file that does not exist, you will get a FileNotFoundError\nIf the file is located in a different location, you will have to specify the file path, like this:\n\n\nf = open(\"countries.txt\")\n\n\n#Open a file on a different location:\n\nf = open(\"/Users/fsultan/Downloads/csc121/notebooks/countries.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nFile extensions have to be explicitly specified in the file name, when opening an existing file\n\n\nf = open('countries.txt')\nprint(f.read())\nf.close()\n\n\n\n\n\n\nIt is often not feasible to read large files with simply read\nThis is often because:\n\nThe size of the file can exceed the capacity of RAM\nThe software may have a limit on how much data it can read\n\nTo avoid the software/app from crashing\n\n\n\n\nf = open(\"words.txt\", \"r\")\nprint(f.read())\n\n\n\n\n\n\nBy default the read() method returns the whole text\nHowever, read() takes an input, which lets you specify how many characters to read:\n\n\n# Example\n# Return the first 20 characters of the file:\n\nf = open(\"words.txt\", \"r\")\nprint(f.read(20))\n\n\n\n\n\n\nYou can return one line by using the readline() method:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nprint(line)\n\n\nBy calling readline() two times, you can read the two first lines:\n\n\n# Read two lines of the file \n\nf = open(\"words.txt\", \"r\")\n\nline1 = f.readline()\n\nline2 = f.readline()\n\nline3 = f.readline()\n\nprint(\"Line 1:\", line1)\nprint(\"Line 2:\", line2)\nprint(\"Line 3:\", line3)\n\n\n\n\n\n\nBy looping through the lines of the file, you can read the whole file, line by line:\n\n\nf = open(\"words.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    line = f.readline()\n    print(line)\nf.close()\n\n\n\n\n\n\nSince contents (lines) of a file are a sequence, we can loop over lines using a for loop with line as a target variable:\n\n\nf = open(\"countries.txt\", \"r\")\nfor line in f:\n    print(line)\n\n\nf = open(\"countries.txt\", \"r\")\nline = f.readline()\nwhile line != \"\":\n    print(line)\n    line = f.readline()\n\n\n\n\n\n\nIt is a strongly recommended to close the file when you are done with it.\nThis clears up memory consumed by contents of the file.\nFile object cannot be used to read, write or append after it has been closed.\n\n\nf = open(\"countries.txt\", \"r\")\nprint(f.readline())\nf.close()\n\nf.readline()\n\n\n\n\n\n\nopen(filename,\"w\") mode “w” - Write - allows writing to a file with name filename\nIf a file with name filename already exists, it overwrites any existing content.\n\nIn other words, existing content gets deleted and new content is added.\n\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Now the newfile.txt exists and this is it's content!\")\nf.close()\n\n\n\n\n\n\nWhen writing to a file, do not forget the newlines: \\n\nWithout newlines \\n, all content would be written to the same line\n\n\nf = open(\"newfile.txt\", \"w\")\nf.write(\"Line1\")\nf.write(\"Line2\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"r\")\nprint(f.read())\nf.close()\n\n\n\n\n\n\nopen(filename,\"a\") mode “a” - Append - allows appending to the end of a file with name filename\nIf a file with name filename already exists, it adds new content to the end of the file.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"countries.txt\", \"a\")\nf.write(\"Wakanda\")\nf.close()\n\n\nf = open(\"newfile.txt\", \"a\")\nf.write(\"testing\")\nf.close()\n\n\n\n\n\n\n\nopen(filename,\"x\") mode “x” - eXclusive creation- allows creating a new file with name filename\n\nOnly if a file with that name does not exist\n\nIf a file with name filename already exists, it throws a FileExistsError.\nIf a file with name filename does not exist, it creates a new file and writes to it.\n\n\nf = open(\"newfile.txt\", \"x\")\nf.write(\"This is a brand new file\")\nf.close()\n\n\n\n\n\n\nIf a file is opened in write mode, you can not read from it\nIf a file is opened in read mode, you can not write to it\n\n\n\n\n\nQuestion 1. Count lines\nWrite a function count_lines that accepts as input a string filename and returns the number of lines in that file\n\ndef count_lines(filename):\n    \n\nprint(count_lines(\"words.txt\"))\nprint(count_lines(\"countries.txt\"))\n\nQuestion 2. Print lines ending with suffix\nWrite a function search_lines that accepts as inputs a string filename and a string suffix and prints all lines that end with suffix\n\ndef search_lines(filename, suffix):\n\n\nsearch_lines(\"countries.txt\", \"land\")\n\nQuestion 3. Write Left Triangle\nWrite a function left_triangle that accepts two inputs: 1. a string variable filename 2. an integer n. The function creates a file named filename and writes to the file a left triangle of height n.\nFor example, filename=\"abc.txt\" and n=5 prints the following:\n*\n**\n***\n****\n*****\nto a file named abc.txt\n\ndef left_triangle(filename, n):\n    \n    return\n\nleft_triangle('t4.txt',  4)\nleft_triangle('t10.txt', 10)\n\n\nQuestion 4. Copy File\nWrite a function copy_file that takes two string inputs: 1. oldfile 2. newfile and copies all the contents of oldfile to newfile.\n\ndef copy_file(oldfile, newfile):\n    \n    return",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Files"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html",
    "href": "basics/operations/math_operators.html",
    "title": "Mathematical Operators",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#arithmetic-operators",
    "href": "basics/operations/math_operators.html#arithmetic-operators",
    "title": "Mathematical Operators",
    "section": "Arithmetic Operators",
    "text": "Arithmetic Operators\nThe following table lists the arithmetic operators in Python. The first four operators are the basic arithmetic operators. The last two operators are the floor division and modulo operators, respectively.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n+\nAddition\n1 + 2\n3\n\n\n-\nSubtraction\n1 - 2\n-1\n\n\n*\nMultiplication\n1 * 2\n2\n\n\n/\nDivision\n1 / 2\n0.5\n\n\n//\nFloor Division\n1 // 2\n0\n\n\n%\nModulo\n1 % 2\n1",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#boolean-operators",
    "href": "basics/operations/math_operators.html#boolean-operators",
    "title": "Mathematical Operators",
    "section": "Boolean Operators",
    "text": "Boolean Operators\nThese operators return True or False (i.e. boolean data type).\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample.\n\n\n\n\n==\nReturns True if left hand operand is equal to right hand operand. Otherwise, returns False\na+b == b+a\n\n\n!=\nReturns True if left hand operand is NOT equal to right hand operand. Otherwise, returns False.\na*b != b/a\n\n\n&lt;\nReturns True if left hand operand is less than right hand operand. Otherwise, returns False.\nb/a &lt; b\n\n\n&gt;\nReturns True if left hand operand is greater than right hand operand. Otherwise, returns False.\na*b &gt; b\n\n\n&lt;=\nReturns True if left hand operand is less than or equal to right hand operand. Otherwise, returns False.\na-b &lt;= a\n\n\n&gt;=\nReturns True if left hand operand is greater than or equal to right hand operand. Otherwise, returns False.\na*b &gt;= b*a\n\n\n\n\na = 2\nb = 10\n\n\na+b == b+a\n\n\na+b != a*b\n\n\na**2 == a*2\n\n\na+b &lt; a+b\n\n\na+b &lt;= a+b\n\n\nComparison Operators\nThe following table lists the comparison operators in Python. These operators compare two operands and evaluate to either True or False.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n==\nEqual To\n1 == 2\nFalse\n\n\n!=\nNot Equal To\n1 != 2\nTrue\n\n\n&gt;\nGreater Than\n1 &gt; 2\nFalse\n\n\n&gt;=\nGreater Than or Equal To\n1 &gt;= 2\nFalse\n\n\n&lt;\nLess Than\n1 &lt; 2\nTrue\n\n\n&lt;=\nLess Than or Equal To\n1 &lt;= 2\nTrue\n\n\n\n\n\nLogical Operators\nThe following table lists the logical operators in Python. These operators combine two or more boolean expressions and evaluate to either True or False.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\nand\nLogical AND\nTrue and False\nFalse\n\n\nor\nLogical OR\nTrue or False\nTrue\n\n\nnot\nLogical NOT\nnot True\nFalse\n\n\n\n\n\nIdentity Operators\nThe following table lists the identity operators in Python. These operators compare the memory addresses of two operands and evaluate to either True or False.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\nis\nIdentity\n1 is 1\nTrue\n\n\nis not\nNon-Identity\n1 is not 1\nFalse\n\n\n\n\n\nMembership Operators\nThe following table lists the membership operators in Python. These operators evaluate to either True or False depending on whether a value is a member of a sequence.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\nin\nMembership\n1 in [1, 2, 3]\nTrue\n\n\nnot in\nNon-Membership\n1 not in [1, 2, 3]\nFalse",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#assignment-operators",
    "href": "basics/operations/math_operators.html#assignment-operators",
    "title": "Mathematical Operators",
    "section": "Assignment Operators",
    "text": "Assignment Operators\nWe have already seen the assignment operator = in the previous sections.\nThe assignment operator has many variations that combine assignment with another operator (primarily arithmetic operators).\nThe following table lists the assignment operators in Python. These operators assign a value to a variable.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n=\nAssignment\nx = 1\n1\n\n\n+=\nAddition Assignment\nx += 1\n2\n\n\n-=\nSubtraction Assignment\nx -= 1\n1\n\n\n*=\nMultiplication Assignment\nx *= 2\n2\n\n\n/=\nDivision Assignment\nx /= 2\n1\n\n\n//=\nFloor Division Assignment\nx //= 2\n0\n\n\n%=\nModulo Assignment\nx %= 2\n1\n\n\n&=\nBitwise AND Assignment\nx &= 0b101\n0b101",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#bitwise-operators",
    "href": "basics/operations/math_operators.html#bitwise-operators",
    "title": "Mathematical Operators",
    "section": "Bitwise Operators",
    "text": "Bitwise Operators\nThe following table lists the bitwise operators in Python. These operators combine two or more bit patterns and evaluate to a new bit pattern.\n\n\n\nOperator\nDescription\nExample\nResult\n\n\n\n\n&\nBitwise AND\n0b101 & 0b110\n0b100\n\n\n\\|\nBitwise OR\n0b101 \\| 0b110\n0b111\n\n\n^\nBitwise XOR\n0b101 ^ 0b110\n0b011\n\n\n~\nBitwise NOT\n~0b101\n0b010\n\n\n&lt;&lt;\nBitwise Left Shift\n0b101 &lt;&lt; 1\n0b1010\n\n\n&gt;&gt;\nBitwise Right Shift\n0b101 &gt;&gt; 1\n0b10",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#glossary",
    "href": "basics/operations/math_operators.html#glossary",
    "title": "Mathematical Operators",
    "section": "Glossary",
    "text": "Glossary\n\narithmetic operator\n    An operator that performs a mathematical operation on two operands.\n\nassignment operator\n    An operator that assigns a value to a variable.\n\nbitwise operator\n    An operator that performs a bitwise operation on two or more bit patterns.\n\nboolean operator\n    An operator that returns a boolean value.\n\ncomparison operator\n    An operator that compares two operands and evaluates to either `True` or `False`.\n\nfloor division\n    An operator that performs integer division and returns the floor of the result.\n\nidentity operator\n    An operator that compares the memory addresses of two operands and evaluates to either `True` or `False`.\n\nlogical operator\n    An operator that combines two or more boolean expressions and evaluates to either `True` or `False`.\n\nmodulo\n    An operator that performs integer division and returns the remainder of the result.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/operations/math_operators.html#exercise",
    "href": "basics/operations/math_operators.html#exercise",
    "title": "Mathematical Operators",
    "section": "Exercise",
    "text": "Exercise\n\nWhat is the result of the following expression?\n\n\n\n\n\nExpression\nResult\n\n\n\n\ni.\n1 + 2 * 3\n\n\n\nii.\n(1 + 2) * 3\n\n\n\niii.\n1 + 2 * 3 - 4 / 5\n\n\n\niv.\n1 + 2 * (3 - 4) / 5\n\n\n\nv.\n1 + 2 * 3 - 4 / 5 ** 6\n\n\n\nvi.\n1 + 2 * 3 - 4 / 5 ** 6 % 7\n\n\n\nvii.\n1 + 2 * 3 - 4 / 5 ** 6 % 7 // 8",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "basics/java.html",
    "href": "basics/java.html",
    "title": "PROGRAMMING, IN JAVA",
    "section": "",
    "text": "Data (values and variables) are to code what nouns are to prose.\nOperations (arithmetic, logical, relational) are the verbs.\nControl flow (if-else, loops) are the plot.\nAbstractions (functions, classes) are metaphors.\n\nProgramming in Java is different from programming in Python primarily because:\n\nJava is a statically typed language.\nEvery Java program must have a main method.\nJava is a compiled language, where Python is an interpreted language.\nWhile Pythn is also object-oriented, Java is more strictly object-oriented.\n\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\");\n    }\n}",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA"
    ]
  },
  {
    "objectID": "se/version_control/version_control.html",
    "href": "se/version_control/version_control.html",
    "title": "Version Control",
    "section": "",
    "text": "Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.\nIt allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control"
    ]
  },
  {
    "objectID": "se/se.html",
    "href": "se/se.html",
    "title": "SOFTWARE ENGINEERING",
    "section": "",
    "text": "Software engineering is the application of engineering to the design, development, implementation, testing, and maintenance of software in a systematic method.\nIt is a very broad field that includes a wide range of subfields. In this course, we will focus on a",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html",
    "href": "se/version_control/git_solo.html",
    "title": "Git (Solo)",
    "section": "",
    "text": "Git is a distributed Version Control System (VCS). Version control systems are tools used to track changes to source code (or other collections of files and folders). As the name implies, these tools help maintain a history of changes; furthermore, they facilitate collaboration.\n`````tmeqecymbmzv “I’m not a nice person and I don’t care about you” :class: note\nkvbjeis https://media.newyorker.com/photos/5ba177da9eb2f7420aadeb98/4:3/w_1229,h_921,c_limit/Cohen-Linus-Torvalds.jpg :width: 35% :align: right\nGit was developed by Linus Torvalds, who also created the open source operating system Linux (portmanteau of Linus and Unix).\nTorvalds is known for his technical brilliance but also his very abrasive personality. This interview on TED of Torvalds is a good introduction to him.\n`````\nVCSs track changes to a folder and its contents in a series of snapshots, where each snapshot encapsulates the entire state of files/folders within a top-level directory. VCSs also maintain metadata like who created each snapshot, messages associated with each snapshot, and so on.\n\nIndividual snapshots can be compared to each other, and differences can be extracted. For example, you can ask questions like what changed between this snapshot and the previous snapshot? Who made those changes? etc.\nWhile other VCSs exist, Git is the de facto standard for version control. This XKCD comic captures Git’s reputation:\nBecause Git’s interface is a leaky abstraction, learning Git top-down (starting with its interface / command-line interface) can lead to a lot of confusion. It’s possible to memorize a handful of commands and think of them as magic incantations, and follow the approach in the comic above whenever anything goes wrong.\n\n\n\nIf this is the first time you've installed Git, you may need to configure it. You only need to do this once per machine.\n\nYou can configure your Git username and email using the following commands, replacing _John Doe's_ info with your own. \n\n`$ git config --global user.name \"John Doe\"`\n\n`$ git config --global user.email johndoe@example.com`\n\nThese details will be associated with any commits that you make and blame will be correctly assigned.\n\n\n\n\n\nGit init is a one-time command you use during the initial setup of a new repo. Executing this command will create a new Git repository in the current directory. This will create a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton. At this point, nothing in your project is tracked yet. (See the next section to learn how to start tracking files.)\n\n\n\n\n```oqmafssk ../assets/git_init.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\nGit init\n\n#### Link it to your Github repository: `git remote add origin`\n\n\n\n\nGit remote is a command to manage the set of remotes associated with a repository. A remote in Git is a common repository that all team members use to exchange their changes. In most cases, such a remote repository is stored on a code hosting service like GitHub or on an internal server. In contrast to a local repository, a remote typically does not provide a file tree of the project's current state. Instead, it only consists of the .git versioning data.\n\n``` bash   \n$ git remote add origin &lt;remote repository URL&gt;\n$ git remote -v\n\n\n\n\n```oqmafssk ../assets/git_remote.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit remote\n&lt;br/&gt;\n\nThe remote repository URL is the URL of the repository on GitHub. The `git remote -v` command lists the URLs that Git has stored for the shortname to be used when reading and writing to that remote.\n\nOn Github, you can find the URL of your repository by clicking on the green button that says \"Code\" and copying the URL that appears &lt;u&gt;under SSH&lt;/u&gt; tab. \n\n### Starting from an existing repo on Github\n\nGit clone is a command for downloading existing source code from a remote repository (like Github, for example). Cloning a repository downloads an exact copy of all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project. You can push your changes to the remote repository on GitHub, or pull other people's changes from GitHub. \n\nThe syntax for git clone is as follows:\n\n```bash\n$ git clone &lt;repo URL&gt;\nYou can find the URL of your repository by clicking on the green button that says “Code” and copying the URL that appears under SSH tab.\nYou don’t need to run git init or git remote add origin if you are cloning an existing repository.\n\n\n\n\n\nWhen you are not collaborating with others, using git is pretty straightforward.\nIn git, there are four main states that your files can reside in. They are:\n\nuntracked: means that Git sees the file as a new file that has not been committed to the database yet.\nstaged: means that you have marked a modified file in its current version to go into your next commit snapshot.\ncommitted: means that the data is safely stored in your local database.\npushed: means that your data has been transferred to a remote repository.\n\n\n\n\n\n```oqmafssk https://i.ibb.co/gdSwjCr/git.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit flow of operations\n\n### 1. `git status`\n\nGit status is a command that displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git. Status output does not show you any information regarding the committed project history. For this, you need to use git log.\n\n&lt;!-- &lt;img width=\"70%\" align=\"center\" src=\"assets/git_status.png\"&gt; --&gt;\n```{figure} ../assets/git_status.png\n---\nname: git_init\nwidth: 75%\n---\ngit status\n\n\nGit diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more. The git diff command is often used along with git status and git log to analyze the current state of a Git repo.\n\n\n\n\n```oqmafssk ../assets/git_diff.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit diff\n\n### 2. `git add`\n\nGit add is a command used to add files to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, git add doesn’t really affect the repository in any significant way—changes are not actually recorded until you run git commit.\n\n``` shell\n\ngit add &lt;file-name-1&gt;\ngit add &lt;file-name-2&gt;\ngit add &lt;file-name-3&gt;\n:\ngit add &lt;file-name-n&gt;\n\n\n\n\nGit commit is a command used to save the changes to the local repository. Note that git commit alone doesn’t send changes to the remote repository. It only records changes to the local repository. To send those changes to the remote repository, you need to execute git push.\n\ngit commit -m &lt;Short text msg to communicate what are the changes made in the snapshot being committed&gt;\n\n\n\n\nGit push is a command used to upload local repository content (stuff that has been commit-ted) to a remote repository. The syntax for git push is as follows: git push -u  &lt;name of remote branch&gt; &lt;name of local branch&gt;. In most situtations, you will be pushing to the main branch of the origin remote repository. In that case, the command will be\ngit push -u origin main\n\n\n\n\nFor future lecture.\n\n\n\n[This webpage](https://ohshitgit.com/), with an easy to remember name, is a great resource for such situations! \nWhile working on a project, you may find yourself in a situation where you need to undo a commit. Git offers two main ways to undo changes to commits: git revert and git reset.\n\n\nThe first thing you should do is when you inevitably mess up is to assess the situation and identify the most recent commit up to which everything was working fine.\nGit log is a command used to display the commit history of a repository. By default, git log displays the commit hash, the author and the commit message. The git log command allows you to customize the output using a large number of flags and options.\nIt is often a good idea to use git log --oneline to get a more concise view of the commit history.\n\n\n\n\n```oqmafssk ../assets/git_log.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit log\n\n&lt;br/&gt;\n\nGit reset is a powerful command that is used to undo local changes to the state of a Git repo. Git reset operates on \"The Three Trees of Git\". These trees are the Commit History ( HEAD ), the Staging Index, and the Working Directory.\n\n\n\n### `git revert`\n\n`revert` is the command we use when we want to take a previous `commit` and add it as a new `commit`, keeping the `log` intact.\n\n**Step 1**: Find the previous `commit`:\n\n&lt;!-- &lt;img width=\"60%\" src=\"https://www.w3schools.com/git/img_revert_part1.gif\"&gt; --&gt;\n&lt;img width=\"60%\" src=\"https://i.ibb.co/1Gp478j/git-revert.png\"&gt;\n\n\n1.1. First thing, we need to find the point we want to return to. To do that, we need to go through the `log`.\n\nTo avoid the very long log list, we are going to use the `--oneline` option, which gives just one line per commit showing i) the first seven characters of the `commit hash` and ii) the `commit message`\n\n**Step 2**: Use it to make a new `commit`:\n\n&lt;img width=\"60%\" src=\"https://www.w3schools.com/git/img_revert_part2.gif\"&gt;\n\n&lt;br/&gt;&lt;br/&gt;\n\n`git revert HEAD --no-edit`\n\nTo revert to earlier commits, use `git revert HEAD~x` (x being a number. 1 going back one more, 2 going back two more, etc.)\n\n### `git reset`\n\n`reset` is the command we use when we want to go back to a previous `commit` and erase everything that happened after it.\n\n&lt;!-- &lt;img width=\"60%\" align=\"center\" src=\"https://www.w3schools.com/git/img_reset_part1.gif\"&gt; --&gt;\n&lt;img width=\"60%\" align=\"center\" src=\"https://i.ibb.co/9Y0ypHk/git-reset.png\"&gt;\n\n\n&lt;img width=\"60%\" align=\"center\" src=\"https://www.w3schools.com/git/img_reset_part2.gif\"&gt;\n\nSimilar to `revert`, we first need to find the `commit` we want to go back to using `git log`. \n\nNext, we need to use the `reset` command.\n\nTo reset to earlier commits, use `git reset ` followed by the first seven characters of the `commit hash` of the commit you want to go back to. \n\n```bash\ngit reset 1a2b3c4d",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Solo)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#initial-setup",
    "href": "se/version_control/git_solo.html#initial-setup",
    "title": "Git (Solo)",
    "section": "",
    "text": "If this is the first time you've installed Git, you may need to configure it. You only need to do this once per machine.\n\nYou can configure your Git username and email using the following commands, replacing _John Doe's_ info with your own. \n\n`$ git config --global user.name \"John Doe\"`\n\n`$ git config --global user.email johndoe@example.com`\n\nThese details will be associated with any commits that you make and blame will be correctly assigned.\n\n\n\n\n\nGit init is a one-time command you use during the initial setup of a new repo. Executing this command will create a new Git repository in the current directory. This will create a new subdirectory named .git that contains all of your necessary repository files — a Git repository skeleton. At this point, nothing in your project is tracked yet. (See the next section to learn how to start tracking files.)\n\n\n\n\n```oqmafssk ../assets/git_init.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\nGit init\n\n#### Link it to your Github repository: `git remote add origin`\n\n\n\n\nGit remote is a command to manage the set of remotes associated with a repository. A remote in Git is a common repository that all team members use to exchange their changes. In most cases, such a remote repository is stored on a code hosting service like GitHub or on an internal server. In contrast to a local repository, a remote typically does not provide a file tree of the project's current state. Instead, it only consists of the .git versioning data.\n\n``` bash   \n$ git remote add origin &lt;remote repository URL&gt;\n$ git remote -v\n\n\n\n\n```oqmafssk ../assets/git_remote.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit remote\n&lt;br/&gt;\n\nThe remote repository URL is the URL of the repository on GitHub. The `git remote -v` command lists the URLs that Git has stored for the shortname to be used when reading and writing to that remote.\n\nOn Github, you can find the URL of your repository by clicking on the green button that says \"Code\" and copying the URL that appears &lt;u&gt;under SSH&lt;/u&gt; tab. \n\n### Starting from an existing repo on Github\n\nGit clone is a command for downloading existing source code from a remote repository (like Github, for example). Cloning a repository downloads an exact copy of all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project. You can push your changes to the remote repository on GitHub, or pull other people's changes from GitHub. \n\nThe syntax for git clone is as follows:\n\n```bash\n$ git clone &lt;repo URL&gt;\nYou can find the URL of your repository by clicking on the green button that says “Code” and copying the URL that appears under SSH tab.\nYou don’t need to run git init or git remote add origin if you are cloning an existing repository.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Solo)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#normal-day-at-work-by-yourself",
    "href": "se/version_control/git_solo.html#normal-day-at-work-by-yourself",
    "title": "Git (Solo)",
    "section": "",
    "text": "When you are not collaborating with others, using git is pretty straightforward.\nIn git, there are four main states that your files can reside in. They are:\n\nuntracked: means that Git sees the file as a new file that has not been committed to the database yet.\nstaged: means that you have marked a modified file in its current version to go into your next commit snapshot.\ncommitted: means that the data is safely stored in your local database.\npushed: means that your data has been transferred to a remote repository.\n\n\n\n\n\n```oqmafssk https://i.ibb.co/gdSwjCr/git.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit flow of operations\n\n### 1. `git status`\n\nGit status is a command that displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git. Status output does not show you any information regarding the committed project history. For this, you need to use git log.\n\n&lt;!-- &lt;img width=\"70%\" align=\"center\" src=\"assets/git_status.png\"&gt; --&gt;\n```{figure} ../assets/git_status.png\n---\nname: git_init\nwidth: 75%\n---\ngit status\n\n\nGit diff is a multi-use Git command that when executed runs a diff function on Git data sources. These data sources can be commits, branches, files and more. The git diff command is often used along with git status and git log to analyze the current state of a Git repo.\n\n\n\n\n```oqmafssk ../assets/git_diff.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit diff\n\n### 2. `git add`\n\nGit add is a command used to add files to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, git add doesn’t really affect the repository in any significant way—changes are not actually recorded until you run git commit.\n\n``` shell\n\ngit add &lt;file-name-1&gt;\ngit add &lt;file-name-2&gt;\ngit add &lt;file-name-3&gt;\n:\ngit add &lt;file-name-n&gt;\n\n\n\n\nGit commit is a command used to save the changes to the local repository. Note that git commit alone doesn’t send changes to the remote repository. It only records changes to the local repository. To send those changes to the remote repository, you need to execute git push.\n\ngit commit -m &lt;Short text msg to communicate what are the changes made in the snapshot being committed&gt;\n\n\n\n\nGit push is a command used to upload local repository content (stuff that has been commit-ted) to a remote repository. The syntax for git push is as follows: git push -u  &lt;name of remote branch&gt; &lt;name of local branch&gt;. In most situtations, you will be pushing to the main branch of the origin remote repository. In that case, the command will be\ngit push -u origin main",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Solo)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#normal-day-at-work-in-a-team",
    "href": "se/version_control/git_solo.html#normal-day-at-work-in-a-team",
    "title": "Git (Solo)",
    "section": "",
    "text": "For future lecture.",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Solo)"
    ]
  },
  {
    "objectID": "se/version_control/git_solo.html#umm..-idk-what-happened",
    "href": "se/version_control/git_solo.html#umm..-idk-what-happened",
    "title": "Git (Solo)",
    "section": "",
    "text": "[This webpage](https://ohshitgit.com/), with an easy to remember name, is a great resource for such situations! \nWhile working on a project, you may find yourself in a situation where you need to undo a commit. Git offers two main ways to undo changes to commits: git revert and git reset.\n\n\nThe first thing you should do is when you inevitably mess up is to assess the situation and identify the most recent commit up to which everything was working fine.\nGit log is a command used to display the commit history of a repository. By default, git log displays the commit hash, the author and the commit message. The git log command allows you to customize the output using a large number of flags and options.\nIt is often a good idea to use git log --oneline to get a more concise view of the commit history.\n\n\n\n\n```oqmafssk ../assets/git_log.png\n\n\n\n\nname: git_init\n\n\nwidth: 75%\n\n\n\ngit log\n\n&lt;br/&gt;\n\nGit reset is a powerful command that is used to undo local changes to the state of a Git repo. Git reset operates on \"The Three Trees of Git\". These trees are the Commit History ( HEAD ), the Staging Index, and the Working Directory.\n\n\n\n### `git revert`\n\n`revert` is the command we use when we want to take a previous `commit` and add it as a new `commit`, keeping the `log` intact.\n\n**Step 1**: Find the previous `commit`:\n\n&lt;!-- &lt;img width=\"60%\" src=\"https://www.w3schools.com/git/img_revert_part1.gif\"&gt; --&gt;\n&lt;img width=\"60%\" src=\"https://i.ibb.co/1Gp478j/git-revert.png\"&gt;\n\n\n1.1. First thing, we need to find the point we want to return to. To do that, we need to go through the `log`.\n\nTo avoid the very long log list, we are going to use the `--oneline` option, which gives just one line per commit showing i) the first seven characters of the `commit hash` and ii) the `commit message`\n\n**Step 2**: Use it to make a new `commit`:\n\n&lt;img width=\"60%\" src=\"https://www.w3schools.com/git/img_revert_part2.gif\"&gt;\n\n&lt;br/&gt;&lt;br/&gt;\n\n`git revert HEAD --no-edit`\n\nTo revert to earlier commits, use `git revert HEAD~x` (x being a number. 1 going back one more, 2 going back two more, etc.)\n\n### `git reset`\n\n`reset` is the command we use when we want to go back to a previous `commit` and erase everything that happened after it.\n\n&lt;!-- &lt;img width=\"60%\" align=\"center\" src=\"https://www.w3schools.com/git/img_reset_part1.gif\"&gt; --&gt;\n&lt;img width=\"60%\" align=\"center\" src=\"https://i.ibb.co/9Y0ypHk/git-reset.png\"&gt;\n\n\n&lt;img width=\"60%\" align=\"center\" src=\"https://www.w3schools.com/git/img_reset_part2.gif\"&gt;\n\nSimilar to `revert`, we first need to find the `commit` we want to go back to using `git log`. \n\nNext, we need to use the `reset` command.\n\nTo reset to earlier commits, use `git reset ` followed by the first seven characters of the `commit hash` of the commit you want to go back to. \n\n```bash\ngit reset 1a2b3c4d",
    "crumbs": [
      "Home",
      "SOFTWARE ENGINEERING",
      "Version Control",
      "Git (Solo)"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html",
    "href": "basics/operations/precedence_associativity.html",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html#operator-precedence",
    "href": "basics/operations/precedence_associativity.html#operator-precedence",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "Operator Precedence",
    "text": "Operator Precedence\nThe following table lists the operator precedence in Python. Operators with higher precedence are evaluated before operators with lower precedence. Operators with the same precedence are evaluated from left to right.\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\n()\nParentheses\n\n\n**\nExponentiation\n\n\n~\nBitwise NOT\n\n\n*, /, //, %\nMultiplication, Division, Floor Division, Modulo\n\n\n+, -\nAddition, Subtraction\n\n\n&lt;&lt;, &gt;&gt;\nBitwise Left Shift, Bitwise Right Shift\n\n\n&\nBitwise AND\n\n\n^\nBitwise XOR\n\n\n|\nBitwise OR\n\n\n==, !=, &gt;, &gt;=, &lt;, &lt;=, is, is not, in, not in\nComparison, Identity, Membership\n\n\nnot\nLogical NOT\n\n\nand\nLogical AND\n\n\nor\nLogical OR\n\n\n=\nAssignment\n\n\n+=, -=, *=, /=, //=, %=, &=, ^=, |=, &lt;&lt;=, &gt;&gt;=\nAssignment Operators",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html#operator-associativity",
    "href": "basics/operations/precedence_associativity.html#operator-associativity",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "Operator Associativity",
    "text": "Operator Associativity\nThe following table lists the operator associativity in Python. Operators with left associativity are evaluated from left to right. Operators with right associativity are evaluated from right to left.\n\n\n\n\n\n\n\nOperator\nAssociativity\n\n\n\n\n**\nRight\n\n\n~\nRight\n\n\n*, /, //, %\nLeft\n\n\n+, -\nLeft\n\n\n&lt;&lt;, &gt;&gt;\nLeft\n\n\n&\nLeft\n\n\n^\nLeft\n\n\n|\nLeft\n\n\n==, !=, &gt;, &gt;=, &lt;, &lt;=, is, is not, in, not in\nLeft\n\n\nnot\nRight\n\n\nand\nLeft\n\n\nor\nLeft\n\n\n=\nRight\n\n\n+=, -=, *=, /=, //=, %=, &=, ^=, |=, &lt;&lt;=, &gt;&gt;=\nRight",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/precedence_associativity.html#implicit-type-conversion",
    "href": "basics/operations/precedence_associativity.html#implicit-type-conversion",
    "title": "Precedence, Associativity and Type Conversion",
    "section": "Implicit Type Conversion",
    "text": "Implicit Type Conversion\n\nAutomatic conversion from one data type to another data type as result of an operation.\n\nPython always converts “smaller” data types to “larger” data types to avoid the loss of information.\n\ninteger_part = 21\nfractional_part = 0.03\n\nprint(\"Datatype of integer_part:\", type(integer_part))\nprint(\"Datatype of fractional_part:\", type(fractional_part))\n\nnew_number = integer_part + fractional_part\n\nprint(\"Value of new_number:\",new_number)\nprint(\"Datatype of new_number:\",type(new_number))\n\nprint(\"Datatype of integer_part:\", type(integer_part))\n\n\ninteger_part = \"21\"\nfractional_part = \"0.03\"\n\nnew_number = integer_part + fractional_part\n\nprint(\"Datatype of integer_part:\", type(integer_part))\nprint(\"Datatype of fractional_part:\", type(fractional_part))\n\nprint(\"Value of new_number:\",new_number)\nprint(\"Datatype of new_number:\",type(new_number))",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations",
      "Precedence, Associativity and Type Conversion"
    ]
  },
  {
    "objectID": "basics/operations/operations.html",
    "href": "basics/operations/operations.html",
    "title": "Operations",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.\n\n\nAn expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions: 42, x, x+1\n\nWhen you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. In this example, x + 1, the interpreter adds one to the current value of x. But it doesn’t display the value unless you tell it to:\n\nx = 42\nx + 1\n\nA statement is a unit of code that has an effect, like creating a variable or displaying a value.\n\nx = 42\nprint(x)\n\nThe first line is an assignment statement that gives a value to x. The second line is a print statement that displays the value of x.\nThe types of statements we have seen so far are assignments and print statements. Other types of statements include:\n\nImport statements: Import a module.\nIf statements: Execute code depending on the value of a condition.\nFor statements: Execute code for each item in a sequence.\nWhile statements: Execute code while a condition is true.\nDef statements: Define a function.\nReturn statements: Exit a function and return a value.\nBreak statements: Exit a loop.\nContinue statements: Skip the rest of the loop body.\n\nWhen you type a statement, the interpreter executes it, which means that it does whatever the statement says. In general, statements don’t have values.\nA program is a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.\nFor example, the script below contains three statements:\n\nx = 42\nprint(x)\nx = x + 1\n\nThe output of this program is 42. The second line displays the value of x, which is 42. The third line increases the value of x by one. But it doesn’t display the value.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations"
    ]
  },
  {
    "objectID": "basics/operations/operations.html#expressions-statements-and-programs",
    "href": "basics/operations/operations.html#expressions-statements-and-programs",
    "title": "Operations",
    "section": "",
    "text": "An expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions: 42, x, x+1\n\nWhen you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. In this example, x + 1, the interpreter adds one to the current value of x. But it doesn’t display the value unless you tell it to:\n\nx = 42\nx + 1\n\nA statement is a unit of code that has an effect, like creating a variable or displaying a value.\n\nx = 42\nprint(x)\n\nThe first line is an assignment statement that gives a value to x. The second line is a print statement that displays the value of x.\nThe types of statements we have seen so far are assignments and print statements. Other types of statements include:\n\nImport statements: Import a module.\nIf statements: Execute code depending on the value of a condition.\nFor statements: Execute code for each item in a sequence.\nWhile statements: Execute code while a condition is true.\nDef statements: Define a function.\nReturn statements: Exit a function and return a value.\nBreak statements: Exit a loop.\nContinue statements: Skip the rest of the loop body.\n\nWhen you type a statement, the interpreter executes it, which means that it does whatever the statement says. In general, statements don’t have values.\nA program is a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.\nFor example, the script below contains three statements:\n\nx = 42\nprint(x)\nx = x + 1\n\nThe output of this program is 42. The second line displays the value of x, which is 42. The third line increases the value of x by one. But it doesn’t display the value.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Operations"
    ]
  },
  {
    "objectID": "basics/controls/loops.html",
    "href": "basics/controls/loops.html",
    "title": "Loops",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#while-loop",
    "href": "basics/controls/loops.html#while-loop",
    "title": "Loops",
    "section": "while loop",
    "text": "while loop\n\nLoops allow conditional repetition of a set of statements.\nIn simple terms, loops repeatedly execute a block of indented statements as long as a corresponding boolean condition evaluates to True.\nwhile loops are the most basic looping construct in the most programming languages, including Python.\n\nRecall, for if...else statements:\n\nif boolean_condition_A: \n    #Indented Block B\nelse:\n    #Indented Block C\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt is called a loop because flow of execution keeps looping back to the start of the while statement until the condition becomes False.\nWhen the condition becomes False, flow of execution moves to the statement that follows the indented while block.\nThe net effect is that the loop’s body is executed repeatedly while the condition at the top is True.\nEach execution of the loop’s body is called an iteration and the variable(s) in the condition are called iterator(s).\nThe while statement consists of:\n\na header line with a boolean condition\na body of one or more indented statements\n\n\n\nstatement 0\nwhile (boolean condition): &gt; statement 1\n&gt; statement 2\n.\n.\n.\nstatement n\nstatement n+1\n\ni = 0\n\nwhile i &lt; 10:\n    \n    print(i)\n    \n    i = i + 1\n    \nprint(\"Outside loop\")\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\nOutside loop",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#loop-design-pattern",
    "href": "basics/controls/loops.html#loop-design-pattern",
    "title": "Loops",
    "section": "Loop Design Pattern",
    "text": "Loop Design Pattern\n\nMost loops (not all of them) have the following common parts, in this order:\n\n\nInitialization of iterator, result and other variables.\nContinuation condition (a.k.a. Termination condition)\nBody of the loop (Indented)\nUpdate of result and iterator variables (Indented)\n\nLast lines of the body\n\n\ninitialization\nwhile ( continuation-condition ) { &gt; body\n&gt; update\n\\(summ = \\sum_{i=1}^{n} k\\)\n\ndef summation_k(k, n):\n\n    #initialization result\n    summ = 0 \n\n    #initialization iterator\n    i = 0    \n    \n    #condition\n    while i &lt; n: \n        \n        #update of result\n        summ = summ + k\n        \n        #update of iterator\n        i = i + 1\n        \n    return summ\n\nprint(summation_k(10, 10))\n\n100\n\n\n\\(\\sum_{i=1}^{n} i\\)\n\n\ndef summation_i(n):\n\n    summ = 0\n    i = 0\n    while i &lt;= n:\n        summ = summ + k\n        i = i + 1\n\n    return summ",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#infinite-loops",
    "href": "basics/controls/loops.html#infinite-loops",
    "title": "Loops",
    "section": "Infinite Loops",
    "text": "Infinite Loops\n\ni = 0\n\nwhile i &gt;= 0:\n    \n    print(i)\n    i = i + 1\n\nprint(\"Outside loop\")",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#break",
    "href": "basics/controls/loops.html#break",
    "title": "Loops",
    "section": "break",
    "text": "break\n\nFor immediately exiting the loop i.e. Python jumps out of the loop’s body (past the entire loop statement) when it encounters a break statement\nGenerally used within an if statement within the loop’s body\nInside the loop’s body, the code that follows the break statement is never executed",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#for-loops",
    "href": "basics/controls/loops.html#for-loops",
    "title": "Loops",
    "section": "for loops",
    "text": "for loops\n\nfor loops are used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/loops.html#continue",
    "href": "basics/controls/loops.html#continue",
    "title": "Loops",
    "section": "continue",
    "text": "continue",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Loops"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html",
    "href": "basics/controls/conditionals.html",
    "title": "Conditionals",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#flow-chart",
    "href": "basics/controls/conditionals.html#flow-chart",
    "title": "Conditionals",
    "section": "Flow Chart",
    "text": "Flow Chart",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#syntax-of-if-else",
    "href": "basics/controls/conditionals.html#syntax-of-if-else",
    "title": "Conditionals",
    "section": "Syntax of if … else",
    "text": "Syntax of if … else\nif boolean condition :\nTrue statement 1\n.\n.\n.\nTrue statement n \nelse :\nFalse statement 1 \n. \n. \n. \nFalse statement m \n\na = 3\nif a &gt; 2:\n    print('Greater than 2')\nelse:\n    print(\"Less than or equal to 2\")  \n    print('Second else statement')\nprint('Regardless of condition')",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#boolean-operators",
    "href": "basics/controls/conditionals.html#boolean-operators",
    "title": "Conditionals",
    "section": "Boolean Operators",
    "text": "Boolean Operators\n\nThese operators return True or False (i.e. boolean data type).\nWe will use these for conditions in if statements:\n\n\n\n\n\n\n\n\n\nOperator\nDescription\nExample.\n\n\n\n\n==\nReturns True if left hand operand is equal to right hand operand. Otherwise, returns False\na+b == b+a\n\n\n!=\nReturns True if left hand operand is NOT equal to right hand operand. Otherwise, returns False.\na*b != b/a\n\n\n&lt;\nReturns True if left hand operand is less than right hand operand. Otherwise, returns False.\nb/a &lt; b\n\n\n&gt;\nReturns True if left hand operand is greater than right hand operand. Otherwise, returns False.\na*b &gt; b\n\n\n&lt;=\nReturns True if left hand operand is less than or equal to right hand operand. Otherwise, returns False.\na-b &lt;= a\n\n\n&gt;=\nReturns True if left hand operand is greater than or equal to right hand operand. Otherwise, returns False.\na*b &gt;= b*a",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#logical-operators",
    "href": "basics/controls/conditionals.html#logical-operators",
    "title": "Conditionals",
    "section": "Logical Operators",
    "text": "Logical Operators\nWe will use these for conditions in if statements:\n\n\n\n\n\n\n\nOperator\nDescription\n\n\n\n\nnot\nInverts the existing boolean value i.e. not True = False; not False = True\n\n\nand\nTrue iff all boolean expressions are True, False otherwise\n\n\nor\nTrue iff any boolean expression is True, False iff all are False\n\n\n\n\na = 0\nb = 3\n\nif not (((b != 3) or (a &lt; 1)) and (b !=0)):\n    print('South')\nelse:\n    print('Carolina')",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#indentation",
    "href": "basics/controls/conditionals.html#indentation",
    "title": "Conditionals",
    "section": "Indentation",
    "text": "Indentation\n\nThe body of the if and else statements start with an indentation (whitespace at the beginning of a line) and the first unindented line marks the end.\nIf the statements in the body are not indented OR the intendentation is not consistent, IndentationError would result\n\n\na = 1\nif a &gt; 2:\n    print('Greater than 2')\nelse:\n    print(\"Less than 2\")  \n    print('Today is Friday')\n    print(\"Abc\")\n    \nprint(\"we have a long weekend coming up\")",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#if-else-vs.-booleans",
    "href": "basics/controls/conditionals.html#if-else-vs.-booleans",
    "title": "Conditionals",
    "section": "If … else vs. booleans",
    "text": "If … else vs. booleans\n\ncollege = 4\nexperience = 0\ngpa = 3.7\nalready_employee = False\n\ngood_candidate = (college &gt;= 4 and (experience &gt;= 5 or gpa &gt; 3.5) and not already_employee)\nbad_candidate = not good_candidate\n\n## A. \nanswer = (good_candidate*\"Hired!\") + (bad_candidate*\"We regret to inform you...\")\nprint(answer)\n\n## B. \nif good_candidate: \n    answer = \"Hired!\"\nelse:\n    answer = \"We regret to inform you... \"\nprint(answer)\n\n## A. == B.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#nested-if-else",
    "href": "basics/controls/conditionals.html#nested-if-else",
    "title": "Conditionals",
    "section": "Nested if else",
    "text": "Nested if else\n\n#C.\n\nif (college &gt;= 4):\n    if (experience &gt;= 5 or gpa &gt; 3.5):\n        if not already_employee:\n            print(\"Hired\")\nelse:\n    print(\"We regret to inform you...\")\n    \n#A. == B. == C.\n\n\n\n\nCriteria\nLetter Grade\n\n\n\n\nTotal points ≥ 90%\nA\n\n\n80% ≤ Total points &lt; 90%\nB\n\n\n70% ≤ Total points &lt; 80%\nC\n\n\n60% ≤ Total points &lt; 70%\nD\n\n\nTotal points &lt; 60%\nF\n\n\n\n\n\"\"\"Implement the letter grade \ntable above, using if-else\n\"\"\"\n\n#Inputs, assume percentage \ntotal_points = 75\n\nletter_grade = \"TBD\"\n\nif total_points &lt;60:\n    letter_grade = \"F\"\nelse:\n    if (total_points &lt; 70) and (total_points &gt;= 60):\n        letter_grade = \"D\"    \n    else:\n        if (total_points &lt; 80) and (total_points &gt;= 70):\n            letter_grade = \"C\"    \n        else:   \n            if total_points &lt; 90 and total_points &gt;= 80:\n                letter_grade = \"B\"\n            else: \n                letter_grade = \"A\"\n#                 if totals_points &lt; 100 and total_points &gt;= 90:\n#                 else:\n#                     letter_grade = \"A+\"\n\n#Output(s)\nprint(letter_grade)\n\nC",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#if-elif-else",
    "href": "basics/controls/conditionals.html#if-elif-else",
    "title": "Conditionals",
    "section": "if … elif … else",
    "text": "if … elif … else\n\nThe elif keyword allow additional (boolean) conditions, in case the condition for if was False\nYou can have as many elifs as you want\nGenerally, a more readable alternative to nested if.. else statements\n\nSyntax:\nif test expression:\nBody of if \nelif test expression:\nBody of elif\n   \nelse :\nBody of else",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#elif-flowchart",
    "href": "basics/controls/conditionals.html#elif-flowchart",
    "title": "Conditionals",
    "section": "elif flowchart",
    "text": "elif flowchart\n\n\n\"\"\"Elif example\"\"\"\n\na = 33\nb = 33\n\n\"\"\"A\"\"\"\nif b &gt; a:\n    print(\"Block A - b is greater than a\")\nelif b &lt; a:\n    print(\"Block A - b is less than a\")\nelse:\n    print(\"A == B\") \n    \n\"\"\"B\"\"\"\nif b &gt; a:\n    print(\"Block A - b is greater than a\")\nelse:\n    if b &lt; a:\n        print(\"Block A - b is less than a\")\n    else:\n        print(\"A == B\")\n        \n\nA == B\n\n\n\n\n\nCriteria\nLetter Grade\n\n\n\n\nTotal points ≥ 90%\nA\n\n\n80% ≤ Total points &lt; 90%\nB\n\n\n70% ≤ Total points &lt; 80%\nC\n\n\n60% ≤ Total points &lt; 70%\nD\n\n\nTotal points &lt; 60%\nF\n\n\n\n\n\"\"\"Implement the letter grade \ntable above, using if-else\n\"\"\"\n\n#Inputs, assume percentage \ntotal_points = 85\n\nif total_points &gt;= 90 and total_points &lt;= 100:\n    letter_grade = \"A\"\nelif total_points &gt;= 80:# and total_points &lt;= 89:\n    letter_grade = \"B\"\nelif total_points &gt;= 70:# and total_points &lt;= 79:\n    letter_grade = \"C\"\nelif total_points &gt;= 60:# and total_points &lt;= 69:\n    letter_grade = \"D\"\nelse:\n    letter_grade = \"F\"\n\nprint(letter_grade)\n\nA",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/controls/conditionals.html#exercises",
    "href": "basics/controls/conditionals.html#exercises",
    "title": "Conditionals",
    "section": "Exercises",
    "text": "Exercises\nPlease re-implement solutions to the following problems from previous classes, labs and assignments, now using if … else statements\nQ1. Tip 20% for good service, tip 10% otherwise (from Lecture 1.3.)\n\ncheque_amount = 100\n\nservice_quality = input(\"Our bill is $\"+str(cheque_amount)+\". How much should we tip? Was the service good? \")\n\n# #True if input is \"Yes\"\ngood_service = service_quality == \"Yes\"\n\nbad_service  = not good_service\n\ntwenty_percent_tip = 0.2 * cheque_amount\nten_percent_tip    = 0.1 * cheque_amount\n\ntip = (good_service * twenty_percent_tip) + (bad_service * ten_percent_tip)\n\nprint(\"Let's tip $\", tip)\n\nQ2. Round a floating point number, without using round() (from Week-1 lab)\n\nAssume inputs are always positive and you are to only round to the nearest integer (no digit precision).\nRound up (ceil) for .5\n\n\n#Input\nfloat_number = 7.6\n\n#Insert your line(s) of code here\n\n#Output\nrounded = \n\nQ3. Convert time from 12-hr. format to 24-hr. format (Q2 from Assignment 1)\nGiven three integers clock_12hrs_hrs, clock_12hrs_mins and pm representing hours, minutes and AM/PM respectively in 12-hour time format, set integers clock_24hrs_hrs and clock_24hrs_mins to corresponding hours and minutes in 24-hour format time.\npm \\(=0\\) indicates input time is AM and pm \\(= 1\\) means otherwise.\nFeel free to introduce new variables, as needed.\nConstraints on input:\n$0 $ pm $ $\n$1 $ clock_12hrs_hrs \\(\\leq 12\\)\n$ 0 $ clock_12hrs_mins $ $\nExample 1\nInput : 7:30 PM\nclock_12hrs_hrs  = 7\nclock_12hrs_mins = 30\npm = 1\nOutputs: 19:30\nclock_24hrs_hrs = 19\nclock_24hrs_mins = 30\nExample 2\nInput : 3:14 AM\nclock_12hrs_hrs  = 3\nclock_12hrs_mins = 14\npm = 0\nOutputs: 3:14\nclock_24hrs_hrs = 3\nclock_24hrs_mins = 14\nExample 3\nInput : 12:00 PM\nclock_12hrs_hrs  = 12\nclock_12hrs_mins = 0\npm = 1\nOutputs: 12:00\nclock_24hrs_hrs = 12\nclock_24hrs_mins = 0\nExample 4\nInput : 12:00 AM\nclock_12hrs_hrs  = 12\nclock_12hrs_mins = 0\npm = 0\nOutputs: 0:00\nclock_24hrs_hrs = 0\nclock_24hrs_mins = 0\nMake sure you test your code for inputs other than the ones provided above\n\n\"\"\" Inputs \"\"\"\nclock_12hrs_hrs   = 12  # Test for values: 1, 2, 3,...., 10, 11, 12\nclock_12hrs_mins  = 0 # Test for values: 0, 1, 2, 3,...., 57, 58, 59 \npm                = 0  # Test for values: 0, 1\n\n\"\"\"Insert your lines of code here\n\nOutputs\n------- \n\"\"\"\n\n\nclock_24hrs_hrs  = clock_12hrs_hrs % 12 + 12*pm\nclock_24hrs_mins = clock_12hrs_mins\n\nprint(\"Inputs: \", clock_12hrs_hrs, clock_12hrs_mins, pm)\nprint(\"Outputs: \",  clock_24hrs_hrs, clock_24hrs_mins)",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Control Flow",
      "Conditionals"
    ]
  },
  {
    "objectID": "basics/data.html",
    "href": "basics/data.html",
    "title": "Data",
    "section": "",
    "text": "This page is &lt;span style=\"color:red\"&gt;**under construction**&lt;/span&gt;. All or part of the &lt;span style=\"color:red\"&gt;**content may be incomplete or incorrect**&lt;/span&gt;.\nData is to computer science what chemicals are to chemistry or organisms are to biology.\nData is the raw material that we process, analyze, and transform into insight and knowledge.\nIn this section, we will learn about how to represent elementary data in Python. Later, we will learn about how to represent more complex data structures.",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#values-and-types",
    "href": "basics/data.html#values-and-types",
    "title": "Data",
    "section": "Values and Types",
    "text": "Values and Types\n\nThe atomic indivisible unit of data in computer programming is called a value.\nValues are the most basic things that a computer program manipulates or calculates.\n\nFor example, the number 42 is a value. So is \"Hello World!\".\n\nEach value belongs to a type.\nThe type of a value determines its interpretation by the computer and the operations that can be performed on it.\n\nFor example, the value 42 is of type int (short for integer) and the value \"Hello World!\" is of type str (short for string, so-called because it contains a string of letters).\nPython comes with the following built-in data types:\n\n\n\n\n\n\n\n\n\n\n\nPython Data Type\nDescription\nCategory\nMutable\nExample Values\n\n\n\n\nint\nIntegers\nNumeric\n❌\n42, 0, -1, 10000000000\n\n\nfloat\nFloating point numbers\nNumeric\n❌\n3.14159, 0.0, -1.0, 1.0e10\n\n\ncomplex\nComplex numbers\nNumeric\n❌\n3 + 4j, 1j\n\n\nbool\nBoolean values\nBoolean\n❌\nTrue, False\n\n\nstr\nString values\nText\n❌\n\"Hello World!\", \"42\"\n\n\nlist\nOrdered mutable sequences of values\nSequence\n✅\n[1, 2, 3], [\"Hello\", \"World\"]\n\n\ntuple\nOrdered immutable sequences of values\nSequence\n❌\n(1, 2, 3), (\"Hello\", \"World\")\n\n\nrange\nImmutable sequence of numbers\nSequence\n❌\nrange(10), range(1, 10, 2)\n\n\ndict\nUnordered mapping of keys to values\nMapping\n✅\n{\"a\": 1, \"b\": 2}\n\n\nset\nUnordered collection of unique values\nSet\n✅\n{1, 2, 3}\n\n\nfrozenset\nImmutable set\nSet\n❌\nfrozenset({1, 2, 3})\n\n\nbytes\nSequence of bytes\nBinary\n❌\nb\"Hello World!\"\n\n\nbytearray\nMutable sequence of bytes\nBinary\n✅\nbytearray(b\"Hello World!\")\n\n\nmemoryview\nMemory view of bytes\nBinary\n❌\nmemoryview(b\"Hello World!\")\n\n\nNoneType\nSpecial type indicating no value\nNoneType\n❌\nNone",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#variables",
    "href": "basics/data.html#variables",
    "title": "Data",
    "section": "Variables",
    "text": "Variables\nOne of the most powerful features of a programming language is the ability to manipulate variables.\nSimilar to algebra, variables in computer programming are names that refer to values.\nIn algebra, the following statement declares that the variable x has the value 42:\n\\[x = 42\\]\nIn Python, the following statement declares that the variable x has the value 42:\nx = 42\nIn Python, a variable is a just a name. Values are somewhere else, and a variable refers to a value. Multiple names can refer to the same value. Python calls whatever is needed to refer to a value a reference. Assigning to a variable (or object field, or …) simply makes it refer to another value. The whole model of storage locations does not apply to Python, the programmer never handles storage locations for values. All he stores and shuffles around are Python references, and those are not values in Python, so they cannot be target of other Python references.\nVariables are the first means of abstraction in computer programming. They allow us to abstract away the details of the value and refer to computations in more general terms.\nRules for Naming Variables:\nIn Python, variable names can be arbitrarily long. They can contain both letters and numbers, but they have to begin with a letter or an underscore (variable names can not start with a number).\n\nVariable Names must be descriptive!\nA variable name must start with a letter or the underscore character\nA variable name cannot start with a number\nA variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )\nVariable names are case-sensitive (age, Age and AGE are three different variables)\nIn Python, the convention is to NOT use upper case letters anywhere in the name. In case of multi-word names, use _ .",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#dynamic-and-strong-typing",
    "href": "basics/data.html#dynamic-and-strong-typing",
    "title": "Data",
    "section": "Dynamic and Strong Typing",
    "text": "Dynamic and Strong Typing\nYou (and Python) can identify strings because they are enclosed in quotation marks \".\nPython is a dynamically typed language, which means that the type of a value is inferred at runtime (as opposed to compile time) based on the value.\nPython is a dynamically typed language, which means two things:\n\nThe type of a value is inferred at runtime (as opposed to compile time) based on the value\nThe same variable can be assigned values of different types at different times.\n\n\n\n\n```brotpcrw https://res.cloudinary.com/practicaldev/image/fetch/s–i1yqfSl1–/c_imagga_scale,f_auto,fl_progressive,h_900,q_auto,w_1600/https://miro.medium.com/max/1400/1%2ABddwVWW6hFU0miT9DCbUWQ.png\n\n\n\n\nwidth: 50%\n\n\nname: dynamic-strong-typing\n\n\n\nDifferent programming languages have different approaches to types. Python is a dynamically typed and strongly typed programming language.\n\nPython is also a **strongly typed** language, which means that every \n\nThe `=` symbol in Python is called the **assignment operator**. It allows us to creates new variables (names) and _assign_ (refer) them values. \n\nNote that the assignment operator assigns the value on the right to the variable on the left. In other words, the directionality of assignment in `x = 42` is  $x \\leftarrow 42$.\n\nVariables can naturally be assigned different values at different times.\n\nIn fact, the same variable can be assigned values of different types at different times.\n\n::: {#cell-5 .cell}\n``` {.python .cell-code}\nmessage = \"What's up, Doc?\"\nn = 17\npi = 3.14159\n:::\nThis example makes three assignments. The first assigns the string \"What's up, Doc?\" to a new variable named message. The second gives the integer 17 to n, and the third gives the floating-point number 3.14159 to pi.\nThe assignment operator, =, should not be confused with an equals sign (even though it uses the same character). Assignment operators link a name, on the left hand side of the operator, with a value, on the right hand side. This is why you will get an error if you enter:\n\n17 = n # Error: can't assign to literal\nA common way to represent variables on paper is to write the name with an arrow pointing to the variable’s value. This kind of figure is called a state diagram because it shows what state each of the variables is in (think of it as the variable’s state of mind). This diagram shows the result of the assignment statements\n\nThe print statement also works with variables.\n\nprint(message), print(n), print(pi)\n\nIn each case the result is the value of the variable. Variables also have types; again, we can ask the interpreter what they are.\n\ntype(message), type(n), type(pi)\n\nThe type of a variable is the type of the value it refers to.\n\nten_percent = 3\nten_percent\n\n\nTen_percent = 10\nTen_percent\n\n\nTEN_PERCENT = 10000\nTEN_PERCENT\n\n\nten_percent = 5\nten_percent\n\n\nage = 2\nage\n\n\nAge = 20\nAge\n\n\nAGE = 200\nAGE\n\nWhich of the following variable names would throw a Syntax Errox?\n\n10_percent = 27.03 / 10\n\nten_percent = 27.03 / 10\nten_percent\n\n_10_percent = 27.03 / 10\n_10_percent\n\n20_percent = 27.03 / 10\n\ntwenty_percent = 27.03 / 10\n\ntwenty_% = 27.03 / 10\n\n\nReserved words\nIn Python, there are 33 reserved words. These are words that have special meaning to Python. You cannot use reserved words as variable names.\nFalse, def, if, raise, None, del, import, return, True, elif ,in, try, and, else, is, while, as, except, lambda, with assert, finally, nonlocal, yield break, for, not\nclass, from, or,\ncontinue, global, pass\n\nA programming language is more than just a means for instructing a computer to perform tasks.\nIt also serves as a framework within which we organize our ideas about computational processes.\nPrograms serve to communicate those ideas among the members of a programming community.\nThus, let me re-emphasize programs must be written for people to read, and only incidentally for machines to execute.\n\n\n\nYou can get the data type of any variable using the built-in type() function\nPython programming language is both:\n\n\nStrongly typed:\n\nAll variables have a type\nThe type matters when performing operations on a variable.\n\nDynamically typed:\n\nIn Python, the data type is set when you assign a value to a variable (during runtime).",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#glossary",
    "href": "basics/data.html#glossary",
    "title": "Data",
    "section": "Glossary",
    "text": "Glossary\n\nvalue\n    The most basic thing a program works with. Values include numbers (like `42` or `3.14159`) and strings (like `\"Hello World!\"`).\n\ntype\n    A category of values. The types we have seen so far are integers (type `int`), floating-point numbers (type `float`), and strings (type `str`).\n\nvariable\n    A name that refers to a value.\n\n\nStrongly typed\n    All variables have a type and the type matters when performing operations on a variable. \n\nDynamically typed\n    The data type is set when you assign a value to a variable (during runtime).\n\nWeakly typed\n    The data type is set when you assign a value to a variable (during compile time).\n\nStatic typed\n    The data type is set when you assign a value to a variable (during compile time).",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "basics/data.html#exercises",
    "href": "basics/data.html#exercises",
    "title": "Data",
    "section": "Exercises",
    "text": "Exercises\n\nWhich of the following are valid variable names in Python? Why or why not?\n\n\n\n\n\nVariable Name\nValid?\nWhy or Why Not?\n\n\n\n\ni.\nage\n\n\n\n\nii.\nAge\n\n\n\n\niii.\nAGE\n\n\n\n\niv.\nage_\n\n\n\n\nv.\nage!\n\n\n\n\nvi.\nage@\n\n\n\n\nvii.\nage$\n\n\n\n\nviii.\nFalse\n\n\n\n\nix.\nfalse\n\n\n\n\nx.\nwhile\n\n\n\n\nxi.\n_while\n\n\n\n\nxii.\nwhile_\n\n\n\n\nxiii.\ndef\n\n\n\n\nxiv.\nif\n\n\n\n\nxv.\nelif\n\n\n\n\nxvi.\nelse\n\n\n\n\nxvii.\nreturn\n\n\n\n\nxviii.\nNone\n\n\n\n\nxix.\nnone\n\n\n\n\nxx.\nNoneType\n\n\n\n\nxxi.\nnone_type\n\n\n\n\nxxii.\nnone-type",
    "crumbs": [
      "Home",
      "PROGRAMMING, IN JAVA",
      "Data"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "About Me\n Syed Fahad Sultan سید فہد سلطان \nPronunciation: Saiyyad Fahad Sool-tahn\nJust call me “Dr. Sultan” (click on the speaker for a short audio clip: 🔈)\n\n\n\n\n\nI am originally from Lahore, Pakistan and joined Furman University in Fall 2022 after earning my Ph.D. in Computer Science from State University of New York at Stony Brook.\n\n\n\n\n\nFresh out of college, I worked as a professional video game developer for a startup that later got acquired by the Japanese gaming giant DeNA. During this time, I was part of the team that built TapFish, the top-grossing game worldwide, for two weeks in 2011, on both the App Store and Google Play.\nI then went on to work at Technology for People Initiative, an applied research lab in my where I mined social media and cell phone data for proxies of socio-economic indicators that allowed more inclusive policy-making for marginalized communities. During these years, I also dabbled in data journalism and helped organize a boot camp on using data for journalists with the support of the International Center for Journalists (ICFJ) and the Knight Foundation.",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "syllabus/grading.html",
    "href": "syllabus/grading.html",
    "title": "Grading",
    "section": "",
    "text": "Component\nPercentage\n\n\n\n\nClass Participation \\(^1\\)\n10%\n\n\nWritten Assignments\n10%\n\n\nLabs / Programming Assignments \\(^2\\)\n20%\n\n\nExam 1\n10%\n\n\nExam 2\n20%\n\n\nFinal (Cumulative)\n30%\n\n\n\n\\(^1\\) Details in Introduction\n\\(^2\\) Labs / Programming assignments will only be graded in-person in my office or in the lab, within 10 calendar days of them being posted.\nUse this link to schedule a time to get your assignments graded.\n\n\n\n(+/- at instructor’s discretion)\n\n\n\nLetter Grade\nRange\n\n\n\n\nA\n&gt; 90 %\n\n\nB\n80 - 90 %\n\n\nC\n70 - 80 %\n\n\nD\n60 - 70 %\n\n\nF\n&lt; 60 %\n\n\n\n\n\n\nIn order to pass this class, you must 1. Earn \\(\\geq\\) 60% of the total points 2. Attend \\(\\geq\\) 80% of the lectures and labs. 3. Submit \\(\\geq\\) 80% of written and programmming assignments. 4. Take ALL tests and final!\nIn other words, you cannot blow off an entire aspect of the course and pass this class!\nNote that this basic requirement is necessary but not sufficient to pass the class.",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/grading.html#grade-breakdown",
    "href": "syllabus/grading.html#grade-breakdown",
    "title": "Grading",
    "section": "",
    "text": "Component\nPercentage\n\n\n\n\nClass Participation \\(^1\\)\n10%\n\n\nWritten Assignments\n10%\n\n\nLabs / Programming Assignments \\(^2\\)\n20%\n\n\nExam 1\n10%\n\n\nExam 2\n20%\n\n\nFinal (Cumulative)\n30%\n\n\n\n\\(^1\\) Details in Introduction\n\\(^2\\) Labs / Programming assignments will only be graded in-person in my office or in the lab, within 10 calendar days of them being posted.\nUse this link to schedule a time to get your assignments graded.",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/grading.html#grading-scale",
    "href": "syllabus/grading.html#grading-scale",
    "title": "Grading",
    "section": "",
    "text": "(+/- at instructor’s discretion)\n\n\n\nLetter Grade\nRange\n\n\n\n\nA\n&gt; 90 %\n\n\nB\n80 - 90 %\n\n\nC\n70 - 80 %\n\n\nD\n60 - 70 %\n\n\nF\n&lt; 60 %",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/grading.html#minimum-requirements",
    "href": "syllabus/grading.html#minimum-requirements",
    "title": "Grading",
    "section": "",
    "text": "In order to pass this class, you must 1. Earn \\(\\geq\\) 60% of the total points 2. Attend \\(\\geq\\) 80% of the lectures and labs. 3. Submit \\(\\geq\\) 80% of written and programmming assignments. 4. Take ALL tests and final!\nIn other words, you cannot blow off an entire aspect of the course and pass this class!\nNote that this basic requirement is necessary but not sufficient to pass the class.",
    "crumbs": [
      "Grading"
    ]
  },
  {
    "objectID": "syllabus/integrity.html",
    "href": "syllabus/integrity.html",
    "title": "Academic Integrity",
    "section": "",
    "text": "Academic Integrity\nAcademic Integrity standards are important to our Furman community and will be upheld in this class. Students should review the Academic Integrity Pledge and other resources available on the Academic Integrity page on the Furman website. Pay special attention to definitions of cheating, plagiarism, unacceptable collaboration, facilitating misconduct and other types of misrepresentation. All those apply in this course.\nFor programming assignments/homeworks and labs, follow the 50 foot policy in its spirit.\n\n\n\n```rjdoxypd ../assets/50ft.png\n\n\n\n\nwidth: 100%\n\n\nalign: center\n\n\n\n50 foot policy ```\nIn this class, the grade penalty for an academic integrity violation is an F for the course. Academic Discipline procedures will be followed through the Office of the Academic Dean.",
    "crumbs": [
      "Academic Integrity"
    ]
  },
  {
    "objectID": "syllabus/mental_health.html",
    "href": "syllabus/mental_health.html",
    "title": "Mental Health Resources",
    "section": "",
    "text": "Empowering and equipping students to manage their mental health and academic success, the Counseling Center’s stepped care model offers an array of evidence based services.\nThe resources listed below are free, confidential and accessible to all enrolled students. Go to the Counseling Center Website for details.\n\n\nFurman University Counseling Center Mental Health and Crisis Support Line – Call the Counseling Center at 864-294-3031, press #3 (confidential, available 24/7/365 from anywhere).\n\n\n\n\nHeadspace – a mindfulness app that helps decrease stress and improve focus and mind-wandering, sponsored by SGA and PHOKUS. Students may enroll using their Furman email.\nTAO Connect – a self-help platform (anonymous and confidential, 24/7) sponsored by the Counseling Center and accessible to students, faculty and staff. Enroll with a Furman email.\n\n\n\n\n\nPaladin Peer Support is a student peer mentoring organization focused on wellness and self-efficacy. Follow them on Instagram and connect for support in reaching personal well-being goals. ### Skill Building Groups and Workshops\nRotating evidence-based psycho-education and skill building groups for anxiety and emotional regulation ### Consultation and Treatment Services\nStart Strong and Finish Strong Walk-in Clinics (first and last two weeks of every semester)\nBrief individual counseling (in person and online), which may include psychiatric and nutrition consults where clinically indicated.\nSingle Session Consultations\nGroup Counseling and Skill Building Workshops\n\n\n\n\n\n\nThe Office for Spiritual Life provides individual confidential counseling for students, faculty and staff in person and online\nGroups and workshops that are theme-focused and interpersonal\nContact OSL@furman.edu, 864-294-2133, or contact a chaplain directly: vaughn.crowetipton@furman.edu, kate.taber@furman.edu.",
    "crumbs": [
      "Mental Health Resources"
    ]
  },
  {
    "objectID": "syllabus/mental_health.html#the-counseling-center",
    "href": "syllabus/mental_health.html#the-counseling-center",
    "title": "Mental Health Resources",
    "section": "",
    "text": "Empowering and equipping students to manage their mental health and academic success, the Counseling Center’s stepped care model offers an array of evidence based services.\nThe resources listed below are free, confidential and accessible to all enrolled students. Go to the Counseling Center Website for details.\n\n\nFurman University Counseling Center Mental Health and Crisis Support Line – Call the Counseling Center at 864-294-3031, press #3 (confidential, available 24/7/365 from anywhere).\n\n\n\n\nHeadspace – a mindfulness app that helps decrease stress and improve focus and mind-wandering, sponsored by SGA and PHOKUS. Students may enroll using their Furman email.\nTAO Connect – a self-help platform (anonymous and confidential, 24/7) sponsored by the Counseling Center and accessible to students, faculty and staff. Enroll with a Furman email.\n\n\n\n\n\nPaladin Peer Support is a student peer mentoring organization focused on wellness and self-efficacy. Follow them on Instagram and connect for support in reaching personal well-being goals. ### Skill Building Groups and Workshops\nRotating evidence-based psycho-education and skill building groups for anxiety and emotional regulation ### Consultation and Treatment Services\nStart Strong and Finish Strong Walk-in Clinics (first and last two weeks of every semester)\nBrief individual counseling (in person and online), which may include psychiatric and nutrition consults where clinically indicated.\nSingle Session Consultations\nGroup Counseling and Skill Building Workshops",
    "crumbs": [
      "Mental Health Resources"
    ]
  },
  {
    "objectID": "syllabus/mental_health.html#spiritual-life",
    "href": "syllabus/mental_health.html#spiritual-life",
    "title": "Mental Health Resources",
    "section": "",
    "text": "The Office for Spiritual Life provides individual confidential counseling for students, faculty and staff in person and online\nGroups and workshops that are theme-focused and interpersonal\nContact OSL@furman.edu, 864-294-2133, or contact a chaplain directly: vaughn.crowetipton@furman.edu, kate.taber@furman.edu.",
    "crumbs": [
      "Mental Health Resources"
    ]
  },
  {
    "objectID": "syllabus/title_9.html",
    "href": "syllabus/title_9.html",
    "title": "Nondiscrimination Policy and Sexual Misconduct",
    "section": "",
    "text": "Nondiscrimination Policy and Sexual Misconduct\nFurman University and its faculty are committed to supporting our students and seeking an environment that is free of bias, discrimination, and harassment. Furman does not unlawfully discriminate on the basis of race, color, national origin, sex, sexual orientation, gender identity, pregnancy, disability, age, religion, veteran status, or any other characteristic or status protected by applicable local, state, or federal law in admission, treatment, or access to, or employment in, its programs and activities.\nIf you have encountered any form of discrimination or harassment, including sexual misconduct (e.g. sexual assault, sexual harassment or gender-based harassment, sexual exploitation or intimidation, stalking, intimate partner violence), we encourage you to report this to the institution. If you wish to report such an incident of misconduct, you may contact Furman’s Title IX Coordinator, Melissa Nichols (Trone Center, Suite 215; Melissa.nichols@furman.edu; 864.294.2221).\nIf you would like to speak with someone who can advise you but maintain complete confidentiality, you can talk with a counselor, a professional in the Student Health Center or someone in the Office of Spiritual Life. If you speak with a faculty member, understand that as a “Responsible Employee” of the University, the faculty member MUST report to the University’s Title IX Coordinator what you share to help ensure that your safety and welfare are being addressed, consistent with the requirements of the law.\nAdditional information about Furman’s Sexual Misconduct Policy, how to report sexual misconduct and your rights can be found at the Furman Title IX Webpage. You do not have to go through the experience alone.",
    "crumbs": [
      "Nondiscrimination Policy and Sexual Misconduct"
    ]
  },
  {
    "objectID": "syllabus/accomodations.html",
    "href": "syllabus/accomodations.html",
    "title": "Accomodations",
    "section": "",
    "text": "Accomodations\nFurman University recognizes a student with a disability as anyone whose impairment substantially limits one or more major life activity. Students may receive a variety of services including classroom accommodations such as extended time on tests, test proctoring, note-taking assistance and access to assistive technology. However, receipt of reasonable accommodations cannot guarantee success–all students are responsible for meeting academic standards. Students with a diagnosed disability may be entitled to accommodations under the Americans with Disabilities Act (ADA).\nPlease visit Student Office for Accessibility Resources for more info.",
    "crumbs": [
      "Accomodations"
    ]
  },
  {
    "objectID": "syllabus/academic_success.html",
    "href": "syllabus/academic_success.html",
    "title": "Center for Academic Success",
    "section": "",
    "text": "Center for Academic Success\nPeer Tutors are available free of charge for many classes and may be requested by dropping by CAS (LIB 002) or on the Center for Academic Success website. Tutors are typically recommended by faculty and have performed well in the class. \nThe Writing & Media Lab (WML) is staffed by student Consultants who are trained to help you improve your writing and multimodal communication skills. The consultation process is non-directive and intended to allow students to maintain ownership of their work. In addition to helping with the nuts and bolts, WML Consultants also support you in developing your own ideas thoughtfully and critically, whether you’re writing an essay or planning a video or other multimedia project. You may drop into the WML during its regular hours (LIB 002; 9 AM to 10 PM) or visit the **Writing and Media Lab website to make an appointment online.\nProfessional Academic Assistance Staff in CAS can provide students assistance with time management, study skills, and organizational skills.\nThe Writing and ESL Specialist provides professional writing support as well as support for students whose primary language is not English.",
    "crumbs": [
      "Center for Academic Success"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "CSC-122: Introduction to Computer Science"
  },
  {
    "objectID": "syllabus.html#pre-requisites",
    "href": "syllabus.html#pre-requisites",
    "title": "Syllabus",
    "section": "",
    "text": "CSC-122: Introduction to Computer Science"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Testing",
    "section": "",
    "text": "Testing"
  }
]