---
title: "Loops"
toc: true
---

Loops in Java are used to execute a block of code repeatedly. They allow you to iterate over a sequence of elements or execute a block of code until a certain condition is met. In this tutorial, we will learn about loops in Java.

## `for` Loop

The `for` loop is used to iterate over a sequence of elements a fixed number of times. It consists of three parts: initialization, condition, and increment/decrement. The basic syntax of the `for` loop is as follows:

```java
for (initialization; condition; increment/decrement) {
    // code block to be executed
}
```

Here is an example of using the `for` loop to print numbers from 1 to 5:

```java
for (int i = 1; i <= 5; i++) {
    System.out.println(i);
}
```

In the above example, the `for` loop iterates over the numbers from 1 to 5 and prints each number to the console.

## `while` Loop

The `while` loop is used to execute a block of code repeatedly as long as a specified condition is true. The loop continues to execute until the condition becomes false. The basic syntax of the `while` loop is as follows:

```java
while (condition) {
    // code block to be executed
}

```

Here is an example of using the `while` loop to print numbers from 1 to 5:

```java

int i = 1;

while (i <= 5) {
    System.out.println(i);
    i++;
}

```

In the above example, the `while` loop iterates over the numbers from 1 to 5 and prints each number to the console.

## `do-while` Loop

The `do-while` loop is similar to the `while` loop, but the condition is checked after the block of code is executed. This means that the block of code is executed at least once, even if the condition is false. The basic syntax of the `do-while` loop is as follows:

```java
do {
    // code block to be executed
} while (condition);
```

Here is an example of using the `do-while` loop to print numbers from 1 to 5:

```java
int i = 1;

do {
    System.out.println(i);
    i++;
} while (i <= 5);

```

In the above example, the `do-while` loop iterates over the numbers from 1 to 5 and prints each number to the console.

## Loop Control Statements

Java provides loop control statements that allow you to control the flow of the loop. The loop control statements include `break`, `continue`, and `return`.

### `break` Statement

The `break` statement is used to exit the loop prematurely. It is often used to terminate the loop when a certain condition is met. When the `break` statement is encountered, the loop is terminated, and the control is transferred to the statement following the loop.

Here is an example of using the `break` statement to exit a loop when the value of `i` is 3:

```java

for (int i = 1; i <= 5; i++) {
    if (i == 3) {
        break;
    }
    System.out.println(i);
}

```

In the above example, the loop is terminated when the value of `i` is 3.

### `continue` Statement

The `continue` statement is used to skip the current iteration of the loop and continue with the next iteration. It is often used to skip certain elements in the loop based on a condition.

Here is an example of using the `continue` statement to skip printing even numbers:

```java

for (int i = 1; i <= 5; i++) {
    if (i % 2 == 0) {
        continue;
    }
    System.out.println(i);
}

```

In the above example, the loop skips printing even numbers using the `continue` statement.

### `return` Statement

The `return` statement is used to exit a method prematurely. When the `return` statement is encountered inside a loop, the loop is terminated, and the control is transferred back to the caller of the method.

Here is an example of using the `return` statement inside a loop:

```java

public void printNumbers() {
    for (int i = 1; i <= 5; i++) {
        if (i == 3) {
            return;
        }
        System.out.println(i);
    }
}

```

In the above example, the loop is terminated when the value of `i` is 3 using the `return` statement.

## Nested Loops

Nested loops are loops inside another loop. They are used to perform repetitive tasks that require multiple levels of iteration. Nested loops can be of any type, such as `for`, `while`, or `do-while`.

Here is an example of using nested loops to print a pattern:

```java

for (int i = 1; i <= 5; i++) {
    for (int j = 1; j <= i; j++) {
        System.out.print("* ");
    }
    System.out.println();
}

```

In the above example, the nested loops are used to print a pattern of stars.

