---
title: "Math Operators"
toc: true
--- 

## Arithmetic Operators

The following table lists the arithmetic operators in Java. The first four operators are the basic arithmetic operators. The last two operators are the floor division and modulo operators, respectively.

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `+` | Addition | `1 + 2` | `3` |
| `-` | Subtraction | `1 - 2` | `-1` |
| `*` | Multiplication | `1 * 2` | `2` |
| `/` | Division | `1 / 2` | `0.5` |
| `//` | Floor Division | `1 // 2` | `0` |
| `%` | Modulo | `1 % 2` | `1` |


### Comparison with Python

Python and Java have some similarities in their use of mathematical operators, but there are notable differences in their behavior and usage. Hereâ€™s a comparison:

#### 1. **Basic Arithmetic Operators**
Both Python and Java use the same basic arithmetic operators:
- **Addition (`+`)**: Adds two operands.
- **Subtraction (`-`)**: Subtracts the second operand from the first.
- **Multiplication (`*`)**: Multiplies two operands.
- **Division (`/`)**: Divides the first operand by the second.
- **Modulus (`%`)**: Returns the remainder of a division operation.

#### 2. **Division (`/`)**
- **Python**:
  - The `/` operator performs **true division** and always returns a float, even if both operands are integers.
  - **Integer division** can be performed using the `//` operator, which returns the floor of the division.
  ```python
  5 / 2   # Returns 2.5
  5 // 2  # Returns 2
  ```

- **Java**:
  - The `/` operator performs division, but the result depends on the operand types:
    - If both operands are integers, **integer division** is performed, and the result is an integer.
    - If either operand is a floating-point number (`float` or `double`), **floating-point division** is performed, returning a float or double.
  ```java
  int result = 5 / 2;  // Returns 2 (integer division)
  double result = 5.0 / 2;  // Returns 2.5 (floating-point division)
  ```

#### 3. **Exponentiation**
- **Python**:
  - Python has a built-in operator for exponentiation: `**`.
  ```python
  2 ** 3  # Returns 8
  ```

- **Java**:
  - Java does not have a built-in exponentiation operator. Instead, you use the `Math.pow()` method to perform exponentiation.
  ```java
  double result = Math.pow(2, 3);  // Returns 8.0
  ```

#### 4. **Unary Operators**
- **Python**:
  - Supports unary operators like `+` and `-` for positive and negative values.
  ```python
  x = -5
  y = +5
  ```

- **Java**:
  - Java also supports unary operators `+` and `-`, as well as the increment (`++`) and decrement (`--`) operators.
  ```java
  int x = -5;
  int y = +5;
  int z = ++x;  // Increments x by 1, then assigns to z
  ```

#### 5. **Modulus Operator (`%`)**
- **Python**:
  - The `%` operator returns the remainder of a division operation. It handles both positive and negative numbers, with the result having the same sign as the divisor.
  ```python
  5 % 3   # Returns 2
  -5 % 3  # Returns 1
  ```

- **Java**:
  - The `%` operator also returns the remainder, but the result has the same sign as the dividend.
  ```java
  5 % 3   # Returns 2
  -5 % 3  # Returns -2
  ```


## Comparison Operators

The following table lists the comparison operators in Java. These operators compare two operands and evaluate to either `true` or `false`.

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `==` | Equal to | `1 == 1` | `true` |
| `!=` | Not equal to | `1 != 1` | `false` |
| `>` | Greater than | `1 > 1` | `false` |
| `<` | Less than | `1 < 1` | `false` |
| `>=` | Greater than or equal to | `1 >= 1` | `true` |
| `<=` | Less than or equal to | `1 <= 1` | `true` |


### Comparison with Python
- **Python**:
  - Comparison operators (`<`, `<=`, `>`, `>=`, `==`, `!=`) can be used with numbers, strings, and other types.
  - Python also supports chaining comparisons (e.g., `1 < x < 10`).

- **Java**:
  - Comparison operators are used primarily with primitive types and do not support chaining like Python.

## Logical Operators

The following table lists the logical operators in Java. These operators combine two or more boolean expressions and evaluate to either `true` or `false`.

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `&&` | Logical AND | `true && false` | `false` |
| `||` | Logical OR | `true || false` | `true` |
| `!` | Logical NOT | `!true` | `false` |


## Membership Operators

The following table lists the membership operators in Java. These operators test for membership in a sequence and evaluate to either `true` or `false`.

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `in` | Membership | `1 in [1, 2, 3]` | `true` |
| `not in` | Negated Membership | `1 not in [1, 2, 3]` | `false` |

## Identity Operators

The following table lists the identity operators in Java. These operators compare the memory locations of two objects and evaluate to either `true` or `false`.

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `is` | Identity | `1 is 1` | `true` |
| `is not` | Negated Identity | `1 is not 1` | `false` |



## Assignment Operators

We have already seen the assignment operator `=` in the previous sections. 

The assignment operator has many variations that combine assignment with another operator (primarily arithmetic operators).

The following table lists the assignment operators in Java. 

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `=` | Assign | `a = 1` | `1` |
| `+=` | Add and Assign | `a += 1` | `2` |
| `-=` | Subtract and Assign | `a -= 1` | `0` |
| `*=` | Multiply and Assign | `a *= 2` | `2` |
| `/=` | Divide and Assign | `a /= 2` | `0.5` |
| `//=` | Floor Divide and Assign | `a //= 2` | `0` |
| `%=` | Modulo and Assign | `a %= 2` | `1` |

## Bitwise Operators 

The following table lists the bitwise operators in Java. These operators perform bitwise operations on integers.

| Operator | Description | Example | Result |
| --- | --- | --- | --- |
| `&` | Bitwise AND | `1 & 2` | `0` |
| `|` | Bitwise OR | `1 | 2` | `3` |
| `^` | Bitwise XOR | `1 ^ 2` | `3` |
| `~` | Bitwise NOT | `~1` | `-2` |
| `<<` | Left Shift | `1 << 2` | `4` |
| `>>` | Right Shift | `4 >> 2` | `1` |
| `>>>` | Unsigned Right Shift | `4 >>> 2` | `1` |


## **Operator Overloading**
- **Python**:
  - Supports operator overloading, allowing operators to be redefined for user-defined classes.
  - Example: You can define how `+` behaves for a custom class.
  ```python
  class Vector:
      def __init__(self, x, y):
          self.x = x
          self.y = y
      def __add__(self, other):
          return Vector(self.x + other.x, self.y + other.y)
  ```

- **Java**:
  - Does not support operator overloading. Operators have fixed behavior based on the data types they are used with.


