---
title: "PROGRAMMING, IN JAVA"
toc: true
numbered: true
---

<img src="https://upload.wikimedia.org/wikipedia/en/thumb/3/30/Java_programming_language_logo.svg/800px-Java_programming_language_logo.svg.png" width="15%" align="right" style="filter:invert(1)">

Java is a **high-level**, **class-based**, **object-oriented** programming language that is designed to have as few implementation dependencies as possible. It is intended to let application developers Write Once, Run Anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation.


Java is used in a wide variety of computing platforms from embedded devices and mobile phones to enterprise servers and supercomputers. It is also used in developing games, mobile applications, and enterprise software. Some popular software written in Java includes [Workday](https://medium.com/workday-engineering/sneak-peek-into-workdays-technology-stack-1055bb5b06c7), [Minecraft]() and essentially all [Android applications](https://www.android.com/).

<br/>
<center>
| | |
|---|---|---|
| <img src="https://res.cloudinary.com/zenbusiness/image/upload/v1670445040/logaster/logaster-2020-06-image14-3.png" width="80%" style="filter:invert(1)"> |<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/Workday_logo.svg/266px-Workday_logo.svg.png" width="80%" style="filter:invert(1)"> | <img src="https://1000logos.net/wp-content/uploads/2016/10/Android-Logo-2008.png" width="60%" style="filter:invert(1)"> |
</center>
<br/>

Java up until very recently was the most popular programming language in the world. In recent years, it has been overtaken by Python (came out in 1991) and JavaScript (came out in 1995) in terms of popularity, but it still remains one of the most widely used programming languages in the world. In fact, Java is still the most popular programming language in the world for developing enterprise applications (applications used by businesses and organizations). 

Ranking of Java as measured by different indexes:

| Index | Rank |
|-------|------|
| [TIOBE index](https://www.tiobe.com/tiobe-index/) | 2 |
| [GitHub Octoverse](https://octoverse.github.com/2022/top-programming-languages) | 3 |
| [Stack Overflow Developer Survey](https://survey.stackoverflow.co/2024/technology#most-popular-technologies-language) | 7 |
| [PYPL PopularitY of Programming Language](https://pypl.github.io/PYPL.html) | 2 |

<br/>

In recent years, JVM languages like [Kotlin](https://en.wikipedia.org/wiki/Kotlin_(programming_language)) and [Scala](https://en.wikipedia.org/wiki/Scala_(programming_language)) have also gained popularity. Kotlin is a modern programming language that is fully interoperable with Java and is used to develop Android applications. Scala is a functional programming language that is also interoperable with Java and is used to develop big data applications.

## Java Architecture

Java was developed by Sun Microsystems (which has since been acquired by Oracle) and released in 1995. For the time, it was a revolutionary language that was designed to be platform-independent, meaning that it could run on any device hardware that had a Java Virtual Machine (JVM). 


<img src="https://miro.medium.com/v2/resize:fit:868/1*MHpdx5oni3ymFQDKDFbWLQ.png" width="100%" style="filter:invert(1)">


The Java platform consists of three main components:
 
1. **Java Development Kit (JDK)**: JDK is a software development kit used to develop Java applications and applets. It includes the JRE, an interpreter/loader (Java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), and other tools needed in Java development.
2. **Java Runtime Environment (JRE)**: JRE is a software package that provides Java class libraries, along with Java Virtual Machine (JVM), and other components to run applications written in Java programming.
1. **Java Virtual Machine (JVM)**: JVM is a software that can be ported to different hardware platforms and execute Java bytecode.  


Before Java, most programming languages were compiled to platform-specific machine code as an executable file or binary e.g. `.exe` in Windows or `.app` in macOS. This meant that the same executable (application file or binary) could not run on different platforms, since the machine code was different. Java solved this problem by compiling to an intermediate bytecode that could be run on any platform that had a JVM.


## Setting up VS Code for Java development

To help you set up quickly, you can install the **[Coding Pack for Java]**, which includes VS Code, the Java Development Kit (JDK), and essential Java extensions. The Coding Pack can be used as a clean installation, or to update or repair an existing development environment.

* **[Install the Coding Pack for Java - Windows](https://aka.ms/vscode-java-installer-win)**

* **[Install the Coding Pack for Java - macOS](https://aka.ms/vscode-java-installer-mac)**

Note: The Coding Pack for Java is only available for Windows and macOS. For other operating systems, you will need to manually install a JDK, VS Code, and Java extensions.

## Creating a source code file

Create a folder for your Java program and open the folder with VS Code. Then in VS Code, create a new file and save it with the name Hello.java. When you open that file, the Java Language Server automatically starts loading, and you should see a language status item with a loading icon on the right side of the Status Bar showing the language status is busy. After it finishes loading, you can hover on the language status item and find the loading process has been finished successfully. You can also choose to pin the status item in the status bar.

<video  width="100%" autoplay="" loop="" muted="" playsinline="" controls="" title="Creating a source code file">
  <source src="https://code.visualstudio.com/docs/java/java-tutorial/JavaHelloWorld.Standalone.mp4" type="video/mp4">
</video>

::: {.callout-note}
If you open a Java file in VS Code without opening its folder, the Java Language Server might not work properly.
:::

VS Code will also try to figure out the correct package for the new type and fill the new file from a template. See Create new file.

## Creating a Java project

You can also create a Java project using the Java: Create Java Project command. Bring up the Command Palette (⇧⌘P) and then type java to search for this command. After selecting the command, you will be prompted for the location and name of the project. You can also choose your build tool from this command.

<video width="100%" autoplay="" loop="" muted="" playsinline="" controls="" title="Creating a Java project">
  <source src="https://code.visualstudio.com/docs/java/java-tutorial/JavaHelloWorld.Project.mp4" type="video/mp4">
</video>

## Running and debugging your program

To run and debug Java code, set a breakpoint, then either press F5 on your keyboard or use the **"Run > Start Debugging"** menu item. You can also use the **"Run|Debug"** CodeLens option in the editor. After the code compiles, you can see all your variables and threads in the **"Run and Debug"** view.

<video width="100%" autoplay="" loop="" muted="" playsinline="" controls="" title="Running and debugging your program">
  <source src="https://code.visualstudio.com/docs/java/java-tutorial/run-debug.mp4" type="video/mp4">
</video>

## Java vs. Python

Before we dive into "Hello World" in Java, let's first understand the differences between programming in Java and programming in Python. 

Programming in Java is different from programming in Python primarily because: 

* Java is very strictly an **object-oriented** language, whereas Python is a **multi-paradigm** language. This means that Java is designed around the concept of objects and classes, whereas Python can be used in an object-oriented, procedural, or functional style. Every Java program must be inside a class, and every program must have a `main` method. In Python, you can write code outside of a class or function.

* Java is a **statically typed** language. This means that you have to declare the type of a variable when you declare it. For example, in Java, you would declare a variable as `int x = 5;`, whereas in Python, you would declare a variable as `x = 5`.

* Java is a **compiled** language, where Python is an **interpreted** language. This means that running a Java program is a two-step process: 
  1. first you compile the Java code into bytecode, and then 
  2. you run the bytecode on the Java Virtual Machine (JVM). 
In Python, you run the Python code in one-step that is directly on the Python interpreter.


## Hello World 

The following is a simple Java program that prints "Hello, World!" to the console:

::: {.panel-tabset}

## Java

```java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

## Python

```python
print("Hello, World!")
```

## Python (OOP)

```python
class HelloWorld:
    def __init__(self):
        print("Hello, World!")
```
:::

Let's break down the Java program line by line:

1. ```java
public class HelloWorld {
  ``` 
  This line declares a class named `HelloWorld`. 

    * In Java, <u>every program must be inside a class</u>. 

    * The <u>class name must match the name of the file</u>. In this case, the file is named `HelloWorld.java`, so the class name must be `HelloWorld`.

    * The `public` keyword is an **access modifier** that specifies that the class is accessible from other classes. <u>Every class in Java must have an access modifier</u>: `public`, `private`, `protected`, or package-private.

    * The `{}` delimits the body of the class. In Java, <u>`{}` is used to delimit blocks of code</u>. Python uses indentation to delimit blocks of code.

<br/>

2. ```java
  public static void main(String[] args) {
  ```
  This line declares a method named `main`. 

    * In Java, the <u>`main` method is the **entry point</u>** of the program.

    * The `public` keyword is an access modifier that specifies that the method is accessible from other classes. Similar to the class, <u>every method in Java must have an access modifier</u>.

    * The `static` keyword means that the method belongs to the class, not an instance of the class. 

    * The `void` keyword means that the method does not return a value. 

    * The `String[] args` parameter is an array of strings that are passed to the `main` method.

<br/>

3. ```java
    System.out.println("Hello, World!");
```
  This line prints "Hello, World!" to the console. 

    * The `System.out.println` method is used to print a string to the console. This is a method of the `System.out` object, which is a static member of the `System` class that represents the standard output stream. This is imported by default in every Java program. 

      Note that the `println` is equivalent to the built-in `print()` function in Python. 

    * Note that semi-colon `;` is used to end the statement. This is mandatory in Java. Every statement in Java must end with a semi-colon. In contrast, Python uses **whitespace** to delimit statements.

<br/>

4. ```java
  }
```
  This line marks the end of the `main` method.

<br/>

5. ```java
}
```
  This line marks the end of the `HelloWorld` class.

---

Data (values and variables) are to code what nouns are to prose.

Operations (arithmetic, logical, relational) are the verbs.

Control flow (if-else, loops) are the plot. 

Abstractions (functions, classes) are metaphors.

---