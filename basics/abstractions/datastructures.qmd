---
title: "Built-in Data Structures"
toc: true
---

In Java, built-in data structures can be categorized into two main types: arrays and collections. Arrays are fixed-size data structures that store elements of the same type in contiguous memory locations. Collections are dynamic-size data structures that store elements of different types and provide additional functionality for managing and manipulating the data.

## Arrays

An array is a fixed-size collection of elements of the same type stored in contiguous memory locations. Arrays in Java are indexed starting from 0, and the index represents the position of an element in the array. The size of an array is determined when the array is created and cannot be changed.

### Declaring and Initializing Arrays

To declare an array in Java, you specify the type of elements the array will hold, followed by square brackets `[]` and the array name. You can initialize the array with values using an array initializer enclosed in curly braces `{}`.

Here is an example of declaring and initializing an array of integers:

```java
// Declare and initialize an array of integers
int[] numbers = {10, 20, 30, 40, 50};
```

In the above example, we declared an array `numbers` of integers and initialized it with five elements.

### Accessing Array Elements

You can access elements in an array using the index enclosed in square brackets `[]` after the array name. The index starts from 0 for the first element and increments by 1 for each subsequent element.

Here is an example of accessing elements in an array:

```java
int[] numbers = {10, 20, 30, 40, 50};

// Access the first element
int firstElement = numbers[0]; // firstElement = 10

// Access the third element
int thirdElement = numbers[2]; // thirdElement = 30
```

### Array Length

You can get the length of an array using the `length` property of the array. The `length` property returns the number of elements in the array.

Here is an example of getting the length of an array:

```java
int[] numbers = {10, 20, 30, 40, 50};

// Get the length of the array
int length = numbers.length; // length = 5
```

### Iterating Over Arrays

You can iterate over the elements of an array using a loop, such as a `for` loop or a `foreach` loop. By iterating over the array, you can access and process each element in the array.

Here is an example of iterating over an array using a `for` loop:

```java

int[] numbers = {10, 20, 30, 40, 50};

// Iterate over the array using a for loop

for (int i = 0; i < numbers.length; i++) {
    System.out.println(numbers[i]); // Output each element
}

```

In the above example, we used a `for` loop to iterate over the `numbers` array and print each element to the console.

## Collections

Collections in Java are dynamic-size data structures that store elements of different types and provide additional functionality for managing and manipulating the data. Java provides a rich set of collection classes in the `java.util` package that implement various data structures such as lists, sets, maps, queues, and more.

### List Interface

The `List` interface in Java represents an ordered collection of elements that allows duplicate elements. Lists maintain the insertion order of elements and provide methods to add, remove, and access elements by index.

#### ArrayList

The `ArrayList` class in Java implements the `List` interface and provides a dynamic array that can grow or shrink in size. `ArrayList` allows duplicate elements and maintains the insertion order of elements.

Here is an example of creating and using an `ArrayList`:

```java
import java.util.ArrayList;

// Create an ArrayList of strings
ArrayList<String> names = new ArrayList<>();

// Add elements to the ArrayList
names.add("Alice");
names.add("Bob");
names.add("Charlie");

// Access elements by index
String firstElement = names.get(0); // firstElement = "Alice"

// Iterate over the ArrayList
for (String name : names) {
    System.out.println(name); // Output each name
}

```

In the above example, we created an `ArrayList` of strings, added elements to the list, accessed elements by index, and iterated over the list using a `foreach` loop.

### Set Interface

The `Set` interface in Java represents a collection of elements that does not allow duplicate elements. Sets do not maintain the insertion order of elements and provide methods to add, remove, and check for the presence of elements.

#### HashSet

The `HashSet` class in Java implements the `Set` interface and provides a collection of unique elements. `HashSet` does not allow duplicate elements and does not maintain the insertion order of elements.

Here is an example of creating and using a `HashSet`:

```java
import java.util.HashSet;

// Create a HashSet of integers
HashSet<Integer> numbers = new HashSet<>();

// Add elements to the HashSet
numbers.add(10);
numbers.add(20);
numbers.add(30);

// Check if an element is present
boolean containsTwenty = numbers.contains(20); // containsTwenty = true

// Iterate over the HashSet
for (int number : numbers) {
    System.out.println(number); // Output each number
}

```

In the above example, we created a `HashSet` of integers, added elements to the set, checked for the presence of an element, and iterated over the set using a `foreach` loop.

### Map Interface

The `Map` interface in Java represents a collection of key-value pairs where each key is unique. Maps provide methods to add, remove, and access elements by key. Java provides several implementations of the `Map` interface, such as `HashMap`, `TreeMap`, and `LinkedHashMap`.

#### HashMap (Dictionary)

The `HashMap` class in Java implements the `Map` interface and provides a collection of key-value pairs. `HashMap` allows null keys and values, and does not maintain the insertion order of elements.

Here is an example of creating and using a `HashMap`:

```java
import java.util.HashMap;

// Create a HashMap of student names and IDs
HashMap<String, Integer> studentIds = new HashMap<>();

// Add key-value pairs to the HashMap
studentIds.put("Alice", 101);
studentIds.put("Bob", 102);
studentIds.put("Charlie", 103);

// Access values by key
int aliceId = studentIds.get("Alice"); // aliceId = 101

// Iterate over the HashMap
for (String name : studentIds.keySet()) {
    int id = studentIds.get(name);
    System.out.println(name + ": " + id); // Output each name and ID
}

```

In the above example, we created a `HashMap` of student names and IDs, added key-value pairs to the map, accessed values by key, and iterated over the map to print each name and ID.
